/**
 * All query script maintain here.
 */
/**
 * @author Jyoti Ranjan
 *
 */
package com.bfsi.mfi.query;

public final class ApplicationQuery {

	/**
	 * Oracle DataBase Script Start.
	 * 
	 **/

	/* Agency Script */
	public static final String AGENCY_QUERY_UPDATE = "UPDATE srcode.MFI_AGENCIES SET AGENCY_CODE=:id, "
			+ "AGENCY_DESC=:agencyDesc, ADDRESS1=:address1, ADDRESS2=:address2, ADDRESS3=:address3, "
			+ "ADDRESS4=:address4, CONTACT_NUMBER=:contactNumber, "
			+ "AUTH_STATUS=:authStatus, IS_ACTIVE=:isActive, CATEGORY=:category, ALLOCATED_CO=:allocatedCo, "
			+ "ZIP_CODE=:zipCode, CITY=:city, STATE=:state, "
			+ "COUNTRY=:country, EMAIL_ADDRESS=:emailAddress where AGENCY_CODE=:id";

	public static final String AGENCY_QUERY_AUTO_AGENCY_CODE = "SELECT MAX(AGENCY_CODE)AGENCY_CODE FROM srcode.MFI_AGENCIES WHERE AGENCY_CODE LIKE('AGY%')";

	public static final String AGENCY_QUERY_SELECT_ALL = "SELECT AGENCY_CODE, AGENCY_DESC, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, "
			+ " CONTACT_NUMBER, AUTH_STATUS, IS_ACTIVE, CATEGORY, ALLOCATED_CO, ZIP_CODE, CITY, STATE, COUNTRY, EMAIL_ADDRESS FROM srcode.MFI_AGENCIES WHERE IS_ACTIVE "
			+ " in ('A','I') ORDER BY AGENCY_CODE";

	public static final String AGENCY_QUERY_AUTHORIZED = "SELECT AGENCY_CODE, AGENCY_DESC, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, "
			+ " CONTACT_NUMBER, AUTH_STATUS, IS_ACTIVE, CATEGORY, ALLOCATED_CO, ZIP_CODE, CITY, STATE, COUNTRY, EMAIL_ADDRESS FROM srcode.MFI_AGENCIES WHERE IS_ACTIVE IN ('A') AND AUTH_STATUS='A' "
			+ " ORDER BY AGENCY_CODE";

	public static final String AGENCY_QUERY_INSERT = "INSERT INTO srcode.MFI_AGENCIES (AGENCY_CODE,AGENCY_DESC,ADDRESS1,"
			+ "ADDRESS2,ADDRESS3,ADDRESS4,CONTACT_NUMBER,IS_ACTIVE,CATEGORY,ALLOCATED_CO,ZIP_CODE,CITY,STATE,COUNTRY,EMAIL_ADDRESS) "
			+ "VALUES (:id, :agencyDesc, :address1, :address2, :address3, :address4, :contactNumber, :isActive, :category, :allocatedCo, :zipCode, :city, :state, "
			+ ":country, :emailAddress)";

	public static final String QUERY_SELECT_BY_PK = "SELECT AGENCY_CODE, AGENCY_DESC, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, CONTACT_NUMBER, AUTH_STATUS, IS_ACTIVE, CATEGORY, ALLOCATED_CO, ZIP_CODE, CITY, STATE, COUNTRY, EMAIL_ADDRESS "
			+ " FROM srcode.MFI_AGENCIES WHERE AGENCY_CODE = :id";

	public static final String AGENCY_QUERY_Agency_Code_ALLOC = "select D.DEVICE_ID, D.DEVICE_TYPE, D.UNIQUE_ID, D.ISSUED_DATE, D.LAST_SYNC, "
			+ "D.DEVICE_STATUS, D.ISSUED_BY, D.BRAND_MODEL, D.OPERATING_SYSTEM, D.APP_VERSION, D.MOBILE_NUMBER, D.AUTH_STATUS "
			+ "from srcode.AMTB_DEVICE D where D.DEVICE_ID not in (select DEVICE_ID from srcode.MFI_AGENTS where DEVICE_ID is not null) "
			+ "order by DEVICE_ID";

	public static final String AGENCY_QUERY_UPDATE_BY_AUTH = "UPDATE srcode.MFI_AGENCIES SET AUTH_STATUS='A' WHERE AGENCY_CODE=:id";

	public static final String QUERY_AGENCY_CODE_AVAILABLE = "SELECT 1 FROM srcode.MFI_AGENCIES WHERE UPPER(AGENCY_CODE) = UPPER(:id)";

	public static final String AGENCY_QUERY_AUDIT_VERSION = "SELECT MAX(VERSION_NO) FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID=:id AND CHECKER_ID IS NOT NULL";

	public static final String AGENCY_QUERY_DELETE = "DELETE FROM srcode.MFI_AGENCIES WHERE AGENCY_CODE = :id";

	public static final String AGENCY_QUERY_DELETE_AUDIT = "DELETE FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID = :id";

	public static final String QUERY_AGENCY_STATUS_TO_INACTIVE = "select count(AGENCY_CODE) FROM srcode.MFI_AGENTS WHERE UPPER(AGENCY_CODE)=UPPER(:agencyId)";

	public static final String AGENCY_QUERY_COUNTRY_CODES = "SELECT COUNTRY_CODE, DESCRIPTION, ISO_NUM_COUNTRY_CODE FROM srcode.MFI_COUNTRY_CODE ORDER BY DESCRIPTION ASC";

	public static final String AGENCY_QUERY_CBSCOCODE_AVAILABLE = "SELECT 1 FROM srcode.MFI_AGENCIES WHERE upper(ALLOCATED_CO) = upper(:id)";

	public static final String AGENCY_QUERY_CBSCOCODE_LOV = "SELECT DL_VALUE, DL_DESC "
			+ "FROM srcode.MFI_CBS_DROP_LIST WHERE DL_VALUE NOT IN(SELECT ALLOCATED_CO AS DL_VALUE FROM srcode.MFI_AGENCIES WHERE ALLOCATED_CO IS NOT NULL) "
			+ "AND BRANCH_CODE='000' and DL_TYPE='CO' AND  AUTH_STATUS = 'A' AND  IS_ACTIVE = 'A'";

	/* Agency Script End */

	/* Agent Script start */
	public static final String AGENT_QUERY_UPDATE = "UPDATE srcode.MFI_AGENTS SET CREDIT_OFFICER_ID = :creditOfficer,"
			+ " DEVICE_ID = :deviceId, DATE_OF_BIRTH = :dob, GENDER = :gender, ADDRESS1 = :commAddr1,"
			+ " ADDRESS2 = :commAddr2, ADDRESS3 = :commAddr3, ADDRESS4 = :commAddr4, CONTACT_NUMBER = :contactNumber,"
			+ " EMAIL_ADDRESS  = :emailAddress, AGENT_END_DATE = :endDate, FIRST_NAME = :fname, LAST_NAME = :lname, AGENT_PREFERED_LANG = :agentLang,"
			+ " AGENCY_CODE = :agencyCode, AUTH_STATUS = :authStatus, IS_ACTIVE = :isActive, USER_NAME = :userName,"
			+ " AGENT_TYPE = :agentType, CASH_LIMIT = :cashLimit, AGENT_START_DATE = :startDate, ZIP_CODE = :zipCode, CITY = :city, STATE = :state, "
			+ "COUNTRY = :country, LOCATION_CODE = :locationCode, CBS_AGENT_CODE=:cbsagentcode, AGENT_ACC_ID=:agentAccId, EXTERNAL_DEVICEID=:externalDeviceId where AGENT_ID = :id";

	public static final String AGENT_QUERY_SELECT_ALL = "SELECT AGENT_ID, FIRST_NAME, LAST_NAME, CREDIT_OFFICER_ID,DEVICE_ID,"
			+ " DATE_OF_BIRTH, GENDER, IS_ACTIVE, AGENT_TYPE, CASH_LIMIT, ADDRESS1, ADDRESS2, ADDRESS3,"
			+ " ADDRESS4, CONTACT_NUMBER, EMAIL_ADDRESS , AGENT_START_DATE, AGENT_END_DATE, AGENT_PREFERED_LANG, AGENCY_CODE, AUTH_STATUS,"
			+ " USER_NAME, REG_STATUS, REG_KEY, REG_KEY_EXPIRY_TIME, ZIP_CODE, CITY, STATE, COUNTRY, LOCATION_CODE,CBS_AGENT_CODE,AGENT_ACC_ID, EXTERNAL_DEVICEID"
			+ "  FROM srcode.MFI_AGENTS where IS_ACTIVE!='D' ORDER BY AGENT_ID";

	public static final String AGENT_QUERY_INSERT = "INSERT INTO srcode.MFI_AGENTS (AGENT_ID, CREDIT_OFFICER_ID, CASH_LIMIT,"
			+ " DEVICE_ID, FIRST_NAME, LAST_NAME, DATE_OF_BIRTH, GENDER, ADDRESS1, ADDRESS2, ADDRESS3,"
			+ " ADDRESS4, CONTACT_NUMBER, EMAIL_ADDRESS , AGENT_START_DATE, AGENT_END_DATE, AGENT_PREFERED_LANG, AGENCY_CODE, AGENT_TYPE,"
			+ " IS_ACTIVE, USER_NAME, ZIP_CODE, CITY, STATE, COUNTRY, LOCATION_CODE, CBS_AGENT_CODE, AGENT_ACC_ID, EXTERNAL_DEVICEID) VALUES "
			+ "(:id, :creditOfficer, :cashLimit, :deviceId, :fname, :lname, :dob, :gender, :commAddr1, :commAddr2, :commAddr3, "
			+ ":commAddr4, :contactNumber, :emailAddress, :startDate, :endDate, :agentLang, :agencyCode, :agentType, :isActive, "
			+ ":userName, :zipCode, :city, :state, :country, :locationCode, :cbsagentcode, :agentAccId, :externalDeviceId)";

	public static final String AGENT_QUERY_SELECT_BY_PK = "SELECT AGENT_ID, FIRST_NAME, LAST_NAME, CREDIT_OFFICER_ID, DEVICE_ID,"
			+ " DATE_OF_BIRTH, GENDER, IS_ACTIVE, AGENT_TYPE, CASH_LIMIT, ADDRESS1, ADDRESS2, ADDRESS3,"
			+ " ADDRESS4, CONTACT_NUMBER, EMAIL_ADDRESS , AGENT_START_DATE, AGENT_END_DATE, AGENT_PREFERED_LANG, AGENCY_CODE, AUTH_STATUS,"
			+ " USER_NAME, REG_STATUS, REG_KEY, REG_KEY_EXPIRY_TIME, ZIP_CODE, CITY, STATE, COUNTRY, LOCATION_CODE,CBS_AGENT_CODE,AGENT_ACC_ID, EXTERNAL_DEVICEID FROM srcode.MFI_AGENTS WHERE AGENT_ID = :id ORDER BY AGENT_ID";

	public static final String AGENT_QUERY_UPDATE_BY_AUTH = "UPDATE srcode.MFI_AGENTS SET AUTH_STATUS='A' WHERE AGENT_ID=:id";

	public static final String AGENT_QUERY_AGENT_AUTO_ID = "SELECT MAX(AGENT_ID)AGENT_ID FROM srcode.MFI_AGENTS";

	public static final String AGENT_QUERY_DELETE = "DELETE FROM srcode.MFI_AGENTS WHERE AGENT_ID=:id";

	public static final String AGENT_QUERY_SELECT_AGENTID = "SELECT AGENT_ID, FIRST_NAME, LAST_NAME, CREDIT_OFFICER_ID, DEVICE_ID,"
			+ " DATE_OF_BIRTH, GENDER, IS_ACTIVE, AGENT_TYPE, CASH_LIMIT, ADDRESS1, ADDRESS2, ADDRESS3,"
			+ " ADDRESS4, CONTACT_NUMBER, EMAIL_ADDRESS , AGENT_START_DATE, AGENT_END_DATE, AGENT_PREFERED_LANG, AGENCY_CODE, AUTH_STATUS,"
			+ " USER_NAME, REG_STATUS, REG_KEY, REG_KEY_EXPIRY_TIME, ZIP_CODE, CITY, STATE, COUNTRY, LOCATION_CODE,CBS_AGENT_CODE,"
			+ " AGENT_ACC_ID, EXTERNAL_DEVICEID FROM srcode.MFI_AGENTS WHERE IS_ACTIVE in ('A','I') ORDER BY AGENT_ID ";

	public static final String QUERY_DEVICEID_VALID = "SELECT 1 FROM srcode.MFI_DEVICE WHERE UNIQUE_ID = :uniqueKey  AND DEVICE_ID = :deviceId ";

	public static final String QUERY_UPDATE_DATAKEY = "UPDATE srcode.MFI_AGENTS SET DATA_KEY= :dataKey WHERE AGENT_ID = :agentId ";

	public static final String UPDATE_AGENT_STATUS = "UPDATE srcode.MFI_AGENTS SET REG_KEY= :registKey,REG_STATUS= :status,REG_KEY_EXPIRY_TIME= :expTime WHERE AGENT_ID = :agentId ";

	public static final String QUERY_REGKEY_TIME = "SELECT PARAM_VALUE FROM srcode.MFI_SYS_PARAMETERS WHERE PARAM_NAME='MOBILE REGISTRATION KEY EXPIRATION TIME'";

	public static final String QUERY_INSERT_REGKEY = "update srcode.MFI_AGENTS set reg_key=:key,reg_key_expiry_time=:expiryTime where agent_id=:id";

	public static final String QUERY_DATAKEY_AVIAL = "SELECT DATA_KEY FROM srcode.MFI_AGENTS WHERE USER_NAME = :agentId AND REG_STATUS= :status ";

	public static final String QUERY_USER_ID_AVAILABLE = "SELECT 1 FROM srcode.MFI_AGENTS WHERE upper(USER_NAME)=upper(:id)";

	public static final String QUERY_SELECT_BY_USER = "SELECT AGENT_ID, FIRST_NAME, LAST_NAME, CREDIT_OFFICER_ID, DEVICE_ID,"
			+ " DATE_OF_BIRTH, GENDER, IS_ACTIVE, AGENT_TYPE, CASH_LIMIT, ADDRESS1, ADDRESS2, ADDRESS3,"
			+ " ADDRESS4, CONTACT_NUMBER, EMAIL_ADDRESS , AGENT_START_DATE, AGENT_END_DATE, AGENT_PREFERED_LANG, AGENCY_CODE, AUTH_STATUS,"
			+ " USER_NAME, REG_STATUS, REG_KEY, REG_KEY_EXPIRY_TIME, ZIP_CODE, CITY, STATE, COUNTRY, LOCATION_CODE ,CBS_AGENT_CODE,AGENT_ACC_ID,EXTERNAL_DEVICEID FROM srcode.MFI_AGENTS WHERE AGENT_ID = :id ORDER BY AGENT_ID";

	public static final String QUERY_SELECT_AGENT_ID = "SELECT AGENT_ID FROM srcode.MFI_AGENTS WHERE USER_NAME=:userName";

	public static final String AGENT_QUERY_AUDIT_VERSION = "SELECT MAX(VERSION_NO) FROM srcode.MFI_AUDIT_DETAIL "
			+ " WHERE KEY_ID=:id AND CHECKER_ID IS NOT NULL";

	public static final String AGENT_QUERY_DELETE_AUDIT = "DELETE FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID = :id";

	public static final String AGENT_QUERY_AUTHORIZED = "SELECT AGENT_ID, FIRST_NAME, LAST_NAME, CREDIT_OFFICER_ID,DEVICE_ID,"
			+ " DATE_OF_BIRTH, GENDER, IS_ACTIVE, AGENT_TYPE, CASH_LIMIT, ADDRESS1, ADDRESS2, ADDRESS3,"
			+ " ADDRESS4, CONTACT_NUMBER, EMAIL_ADDRESS , AGENT_START_DATE, AGENT_END_DATE, AGENT_PREFERED_LANG, AGENCY_CODE, AUTH_STATUS,"
			+ " USER_NAME, REG_STATUS, REG_KEY, REG_KEY_EXPIRY_TIME, ZIP_CODE, CITY, STATE, COUNTRY, LOCATION_CODE,CBS_AGENT_CODE,AGENT_ACC_ID ,EXTERNAL_DEVICEID FROM srcode.MFI_AGENTS WHERE IS_ACTIVE in ('A','I') AND AUTH_STATUS='A' "
			+ " ORDER BY AGENT_ID";

	public static final String QUERY_AUTHORIZED_HAVING_CREDIT_OFFICER = "SELECT AGENT_ID, FIRST_NAME, LAST_NAME, CREDIT_OFFICER_ID, DEVICE_ID,"
			+ " DATE_OF_BIRTH, GENDER, IS_ACTIVE, AGENT_TYPE, CASH_LIMIT, ADDRESS1, ADDRESS2, ADDRESS3,"
			+ " ADDRESS4, CONTACT_NUMBER, EMAIL_ADDRESS , AGENT_START_DATE, AGENT_END_DATE, AGENT_PREFERED_LANG, AGENCY_CODE, AUTH_STATUS,"
			+ " USER_NAME, REG_STATUS, REG_KEY, REG_KEY_EXPIRY_TIME, ZIP_CODE, CITY, STATE, COUNTRY, LOCATION_CODE,CBS_AGENT_CODE,AGENT_ACC_ID, EXTERNAL_DEVICEID FROM srcode.MFI_AGENTS WHERE IS_ACTIVE='A' AND AUTH_STATUS='A' "
			+ " ORDER BY AGENT_ID";

	public static final String AGENT_QUERY_COUNTRY_CODES = "SELECT COUNTRY_CODE, DESCRIPTION, ISO_NUM_COUNTRY_CODE "
			+ " FROM srcode.MFI_COUNTRY_CODE ORDER BY DESCRIPTION ASC ";

	public static final String USER_QUERY_INSERT_ROLES_AGENT = "INSERT INTO srcode.MFI_AGENT_ROLES (AGENT_ID, ROLE_ID) "
			+ " VALUES (:agentId, :roleId)";

	public static final String USER_QUERY_AGENT_ENTITLEMENTS = "SELECT DISTINCT FUNC_COMMAND ENTITLEMENT FROM "
			+ "srcode.MFI_FUNCTION WHERE FUNC_ID IN (SELECT FUNC_ID FROM srcode.MFI_ROLE_ENTITLEMENT WHERE ROLE_ID IN "
			+ "(SELECT ROLE_ID FROM srcode.MFI_AGENT_ROLES WHERE AGENT_ID = :id))";

	public static final String AGENT_QUERY_MBS_ROLES = "SELECT FUNC_ID FROM srcode.MFI_AGENT_FUNCTIONS_V WHERE AGENT_ID =:agentId";

	public static final String AGENT_QUERY_INSERT_ROLES_USERS = "INSERT INTO srcode.MFI_AGENT_ROLES (AGENT_ID, ROLE_ID) VALUES (:agentId, :roleId)";

	public static final String AGENT_QUERY_DELETE_ROLES_USERS = "DELETE FROM srcode.MFI_AGENT_ROLES WHERE AGENT_ID= :agentId";

	public static final String AGENT_QUERY_UNREGISTER = "UPDATE srcode.MFI_AGENTS SET REG_STATUS=:regStatus,"
			+ "AUTH_STATUS=:authStatus,REG_KEY=:nullValue,REG_KEY_EXPIRY_TIME=:nullValue WHERE AGENT_ID=:agentId";

	/*
	 * public static final String AGENT_QUERY_CBSAGENTCODE_LOV =
	 * "SELECT DL_VALUE, DL_DESC " +
	 * "FROM srcode.MFI_CBS_DROP_LIST WHERE DL_VALUE NOT IN(SELECT CBS_AGENT_CODE AS DL_VALUE FROM srcode.MFI_AGENTS WHERE CBS_AGENT_CODE IS NOT NULL) "
	 * +
	 * "AND BRANCH_CODE='000' and DL_TYPE='CO' AND  AUTH_STATUS = 'A' AND  IS_ACTIVE = 'A'"
	 * ;
	 */
	/* changed CO to AG == changes for Asomi Nirmal kanna S */
	public static final String AGENT_QUERY_CBSAGENTCODE_LOV = "SELECT DL_VALUE, DL_DESC "
			+ "FROM srcode.MFI_CBS_DROP_LIST WHERE DL_VALUE NOT IN(SELECT CBS_AGENT_CODE AS DL_VALUE FROM srcode.MFI_AGENTS WHERE CBS_AGENT_CODE IS NOT NULL) "
			+ "AND BRANCH_CODE='000' and DL_TYPE='AG' AND  AUTH_STATUS = 'A' AND  IS_ACTIVE = 'A'";
	
	public static final String QUERY_AGENT_DATA_KEY="SELECT DATA_KEY FROM srcode.MFI_AGENTS WHERE AGENT_ID= :agentId";

	/* Agent Script End */

	/* Agenda Script Start */
	/* Changes table to view ==> changes for Asomi Nirmal kanna S Starts */

	public static final String QUERY_AGENDA_LIST = "SELECT  * FROM srcode.MFI_AGENDA_MASTER WHERE AGENT_ID = :agentId AND "
			+ "DEVICE_ID = :deviceId AND LOCATION_CODE = :locationCode AND AGENDA_STATUS = :agendaStatus LIMIT :batchSize ";

	public static final String QUERY_AGENDA_UPDATE = "UPDATE srcode.MFI_AGENDA_MASTER SET AGENDA_STATUS = :agendaStatus, "
			+ "AGN_UPLD_DATETIME= :sysTime WHERE AGENDA_ID = :agendaId AND SEQ_NO = :seqNo";

	public static final String QUERY_AGENDA_SELECT = "SELECT AGENDA_ID,SEQ_NO,CBS_AC_REF_NO,MODULE_CODE,TXN_CODE,AGENT_ID,"
			+ "LOCATION_CODE,AGENDA_STATUS,AGN_UPLD_DATETIME,BRANCH_CODE,CUSTOMER_ID,CUSTOMER_NAME,AGN_CCY_CODE,AGN_LCY_CODE,"
			+ "AGN_CMP_NAME,AGN_CMP_ST_DATE,AGN_CMP_END_DT,AGN_MBS_DATE,AGN_AGENDA_AMT,AGN_AGENDA_AMT_LCY,AGN_AGENDA_SETTLED_AMT,"
			+ "AGN_AGENDA_SETTLED_AMT_LCY,FULL_PART_IND,LN_DISBURSEMENT_TYPE,LN_IS_FUTURE_SCH,DP_IS_REDEMPTION,DEVICE_ID,"
			+ "MBS_SYNC_UPLD_TIME,MBS_TXN_ID,CBS_UPLOAD_JOB_ID,IS_VALID,SMS_M_MOBILE,IS_GROUP_LOAN,IS_PARENT_CUSTOMER,"
			+ "PARENT_CUSTOMER_ID,PARENT_CBS_AC_REF_NO,IS_PARENT_LOAN from srcode.MFI_AGENDA_MASTER";

	public static final String QUERY_LOAN_AGENDA_SELECT = "SELECT AGENDA_ID,SEQ_NO,CBS_AC_REF_NO,MODULE_CODE,TXN_CODE,AGENT_ID,"
			+ "LOCATION_CODE,AGENDA_STATUS,AGN_UPLD_DATETIME,BRANCH_CODE,CUSTOMER_ID,CUSTOMER_NAME,AGN_CCY_CODE,AGN_LCY_CODE,"
			+ "AGN_CMP_NAME,AGN_CMP_ST_DATE,AGN_CMP_END_DT,AGN_MBS_DATE,AGN_AGENDA_AMT,AGN_AGENDA_AMT_LCY,AGN_AGENDA_SETTLED_AMT,"
			+ "AGN_AGENDA_SETTLED_AMT_LCY,FULL_PART_IND,LN_DISBURSEMENT_TYPE,LN_IS_FUTURE_SCH,DP_IS_REDEMPTION,DEVICE_ID,"
			+ "MBS_SYNC_UPLD_TIME,MBS_TXN_ID,CBS_UPLOAD_JOB_ID,IS_VALID,SMS_M_MOBILE,IS_GROUP_LOAN,IS_PARENT_CUSTOMER,"
			+ "PARENT_CUSTOMER_ID,PARENT_CBS_AC_REF_NO,IS_PARENT_LOAN from srcode.MFI_AGENDA_MASTER where MODULE_CODE ='LN'";

	public static final String QUERY_DEPOSIT_AGENDA_SELECT = "SELECT AGENDA_ID,SEQ_NO,CBS_AC_REF_NO,MODULE_CODE,TXN_CODE,AGENT_ID,"
			+ "LOCATION_CODE,AGENDA_STATUS,AGN_UPLD_DATETIME,BRANCH_CODE,CUSTOMER_ID,CUSTOMER_NAME,AGN_CCY_CODE,AGN_LCY_CODE,"
			+ "AGN_CMP_NAME,AGN_CMP_ST_DATE,AGN_CMP_END_DT,AGN_MBS_DATE,AGN_AGENDA_AMT,AGN_AGENDA_AMT_LCY,AGN_AGENDA_SETTLED_AMT,"
			+ "AGN_AGENDA_SETTLED_AMT_LCY,FULL_PART_IND,LN_DISBURSEMENT_TYPE,LN_IS_FUTURE_SCH,DP_IS_REDEMPTION,DEVICE_ID,"
			+ "MBS_SYNC_UPLD_TIME,MBS_TXN_ID,CBS_UPLOAD_JOB_ID,IS_VALID,SMS_M_MOBILE,IS_GROUP_LOAN,IS_PARENT_CUSTOMER,"
			+ "PARENT_CUSTOMER_ID,PARENT_CBS_AC_REF_NO,IS_PARENT_LOAN from srcode.MFI_AGENDA_MASTER where MODULE_CODE ='DP'";

	public static final String QUERY_LOAN_AGENDA_ID = "SELECT AGENDA_ID,SEQ_NO,CBS_AC_REF_NO,MODULE_CODE,TXN_CODE,AGENT_ID,"
			+ "LOCATION_CODE,AGENDA_STATUS,AGN_UPLD_DATETIME,BRANCH_CODE,CUSTOMER_ID,CUSTOMER_NAME,AGN_CCY_CODE,AGN_LCY_CODE,"
			+ "AGN_CMP_NAME,AGN_CMP_ST_DATE,AGN_CMP_END_DT,AGN_MBS_DATE,AGN_AGENDA_AMT,AGN_AGENDA_AMT_LCY,AGN_AGENDA_SETTLED_AMT,"
			+ "AGN_AGENDA_SETTLED_AMT_LCY,FULL_PART_IND,LN_DISBURSEMENT_TYPE,LN_IS_FUTURE_SCH,DP_IS_REDEMPTION,DEVICE_ID,"
			+ "MBS_SYNC_UPLD_TIME,MBS_TXN_ID,CBS_UPLOAD_JOB_ID,IS_VALID,SMS_M_MOBILE,IS_GROUP_LOAN,IS_PARENT_CUSTOMER,"
			+ "PARENT_CUSTOMER_ID,PARENT_CBS_AC_REF_NO,IS_PARENT_LOAN from srcode.MFI_AGENDA_MASTER where AGENDA_ID =:id";

	public static final String QUERY_DEPOSIT_AGENDA_ID = "SELECT AGENDA_ID,SEQ_NO,CBS_AC_REF_NO,MODULE_CODE,TXN_CODE,AGENT_ID,"
			+ "LOCATION_CODE,AGENDA_STATUS,AGN_UPLD_DATETIME,BRANCH_CODE,CUSTOMER_ID,CUSTOMER_NAME,AGN_CCY_CODE,AGN_LCY_CODE,"
			+ "AGN_CMP_NAME,AGN_CMP_ST_DATE,AGN_CMP_END_DT,AGN_MBS_DATE,AGN_AGENDA_AMT,AGN_AGENDA_AMT_LCY,AGN_AGENDA_SETTLED_AMT,"
			+ "AGN_AGENDA_SETTLED_AMT_LCY,FULL_PART_IND,LN_DISBURSEMENT_TYPE,LN_IS_FUTURE_SCH,DP_IS_REDEMPTION,DEVICE_ID,"
			+ "MBS_SYNC_UPLD_TIME,MBS_TXN_ID,CBS_UPLOAD_JOB_ID,IS_VALID,SMS_M_MOBILE,IS_GROUP_LOAN,IS_PARENT_CUSTOMER,"
			+ "PARENT_CUSTOMER_ID,PARENT_CBS_AC_REF_NO,IS_PARENT_LOAN from srcode.MFI_AGENDA_MASTER where AGENDA_ID =:id";

	public static final String QUERY_AGENDA_SELECTDATA = "SELECT AGENDA_ID,SEQ_NO,CBS_AC_REF_NO,MODULE_CODE,TXN_CODE,AGENT_ID,"
			+ "LOCATION_CODE,AGENDA_STATUS,AGN_UPLD_DATETIME,BRANCH_CODE,CUSTOMER_ID,CUSTOMER_NAME,AGN_CCY_CODE,AGN_LCY_CODE,"
			+ "AGN_CMP_NAME,AGN_CMP_ST_DATE,AGN_CMP_END_DT,AGN_MBS_DATE,AGN_AGENDA_AMT,AGN_AGENDA_AMT_LCY,AGN_AGENDA_SETTLED_AMT,"
			+ "AGN_AGENDA_SETTLED_AMT_LCY,FULL_PART_IND,LN_DISBURSEMENT_TYPE,LN_IS_FUTURE_SCH,DP_IS_REDEMPTION,DEVICE_ID,"
			+ "MBS_SYNC_UPLD_TIME,MBS_TXN_ID,CBS_UPLOAD_JOB_ID,IS_VALID,SMS_M_MOBILE,IS_GROUP_LOAN,IS_PARENT_CUSTOMER,"
			+ "PARENT_CUSTOMER_ID,PARENT_CBS_AC_REF_NO,IS_PARENT_LOAN,TXN_DESC from srcode.MFI_AGENDA_MASTER_V";

	public static final String QUERY_LOAN_AGENDA_SELECTDATA = "SELECT AGENDA_ID,SEQ_NO,CBS_AC_REF_NO,MODULE_CODE,TXN_CODE,AGENT_ID,"
			+ "LOCATION_CODE,AGENDA_STATUS,AGN_UPLD_DATETIME,BRANCH_CODE,CUSTOMER_ID,CUSTOMER_NAME,AGN_CCY_CODE,AGN_LCY_CODE,"
			+ "AGN_CMP_NAME,AGN_CMP_ST_DATE,AGN_CMP_END_DT,AGN_MBS_DATE,AGN_AGENDA_AMT,AGN_AGENDA_AMT_LCY,AGN_AGENDA_SETTLED_AMT,"
			+ "AGN_AGENDA_SETTLED_AMT_LCY,FULL_PART_IND,LN_DISBURSEMENT_TYPE,LN_IS_FUTURE_SCH,DP_IS_REDEMPTION,DEVICE_ID,"
			+ "MBS_SYNC_UPLD_TIME,MBS_TXN_ID,CBS_UPLOAD_JOB_ID,IS_VALID,SMS_M_MOBILE,IS_GROUP_LOAN,IS_PARENT_CUSTOMER,"
			+ "PARENT_CUSTOMER_ID,PARENT_CBS_AC_REF_NO,IS_PARENT_LOAN,TXN_DESC from srcode.MFI_AGENDA_MASTER_V where MODULE_CODE ='LN'";

	public static final String QUERY_DEPOSIT_AGENDA_SELECTDATA = "SELECT AGENDA_ID,SEQ_NO,CBS_AC_REF_NO,MODULE_CODE,TXN_CODE,AGENT_ID,"
			+ "LOCATION_CODE,AGENDA_STATUS,AGN_UPLD_DATETIME,BRANCH_CODE,CUSTOMER_ID,CUSTOMER_NAME,AGN_CCY_CODE,AGN_LCY_CODE,"
			+ "AGN_CMP_NAME,AGN_CMP_ST_DATE,AGN_CMP_END_DT,AGN_MBS_DATE,AGN_AGENDA_AMT,AGN_AGENDA_AMT_LCY,AGN_AGENDA_SETTLED_AMT,"
			+ "AGN_AGENDA_SETTLED_AMT_LCY,FULL_PART_IND,LN_DISBURSEMENT_TYPE,LN_IS_FUTURE_SCH,DP_IS_REDEMPTION,DEVICE_ID,"
			+ "MBS_SYNC_UPLD_TIME,MBS_TXN_ID,CBS_UPLOAD_JOB_ID,IS_VALID,SMS_M_MOBILE,IS_GROUP_LOAN,IS_PARENT_CUSTOMER,"
			+ "PARENT_CUSTOMER_ID,PARENT_CBS_AC_REF_NO,IS_PARENT_LOAN,TXN_DESC from srcode.MFI_AGENDA_MASTER_V where MODULE_CODE ='DP'";

	public static final String QUERY_LOAN_AGENDA_ID_DATA = "SELECT AGENDA_ID,SEQ_NO,CBS_AC_REF_NO,MODULE_CODE,TXN_CODE,AGENT_ID,"
			+ "LOCATION_CODE,AGENDA_STATUS,AGN_UPLD_DATETIME,BRANCH_CODE,CUSTOMER_ID,CUSTOMER_NAME,AGN_CCY_CODE,AGN_LCY_CODE,"
			+ "AGN_CMP_NAME,AGN_CMP_ST_DATE,AGN_CMP_END_DT,AGN_MBS_DATE,AGN_AGENDA_AMT,AGN_AGENDA_AMT_LCY,AGN_AGENDA_SETTLED_AMT,"
			+ "AGN_AGENDA_SETTLED_AMT_LCY,FULL_PART_IND,LN_DISBURSEMENT_TYPE,LN_IS_FUTURE_SCH,DP_IS_REDEMPTION,DEVICE_ID,"
			+ "MBS_SYNC_UPLD_TIME,MBS_TXN_ID,CBS_UPLOAD_JOB_ID,IS_VALID,SMS_M_MOBILE,IS_GROUP_LOAN,IS_PARENT_CUSTOMER,"
			+ "PARENT_CUSTOMER_ID,PARENT_CBS_AC_REF_NO,IS_PARENT_LOAN,TXN_DESC from srcode.MFI_AGENDA_MASTER_V where AGENDA_ID =:id";

	public static final String QUERY_DEPOSIT_AGENDA_ID_DATA = "SELECT AGENDA_ID,SEQ_NO,CBS_AC_REF_NO,MODULE_CODE,TXN_CODE,AGENT_ID,"
			+ "LOCATION_CODE,AGENDA_STATUS,AGN_UPLD_DATETIME,BRANCH_CODE,CUSTOMER_ID,CUSTOMER_NAME,AGN_CCY_CODE,AGN_LCY_CODE,"
			+ "AGN_CMP_NAME,AGN_CMP_ST_DATE,AGN_CMP_END_DT,AGN_MBS_DATE,AGN_AGENDA_AMT,AGN_AGENDA_AMT_LCY,AGN_AGENDA_SETTLED_AMT,"
			+ "AGN_AGENDA_SETTLED_AMT_LCY,FULL_PART_IND,LN_DISBURSEMENT_TYPE,LN_IS_FUTURE_SCH,DP_IS_REDEMPTION,DEVICE_ID,"
			+ "MBS_SYNC_UPLD_TIME,MBS_TXN_ID,CBS_UPLOAD_JOB_ID,IS_VALID,SMS_M_MOBILE,IS_GROUP_LOAN,IS_PARENT_CUSTOMER,"
			+ "PARENT_CUSTOMER_ID,PARENT_CBS_AC_REF_NO,IS_PARENT_LOAN,TXN_DESC from srcode.MFI_AGENDA_MASTER_V where AGENDA_ID =:id";

	/* Changes table to view ==> changes for Asomi Nirmal kanna S Finished */
	/* Agenda Script End */

	/* AgentLogFileJdbcDao Query Start */

	public static final String LOG_INSERT = "INSERT INTO srcode.AGENT_LOG_DATA (DATA, AGENT_ID, DEVICE_ID) VALUES (?,?,?)";

	public static final String QUERY_INSERT_CLOB = "INSERT INTO srcode.AGENT_LOG_DATA (DATA, AGENT_ID, DEVICE_ID,FILE_NAME,SYNC_DATE) VALUES (?,?,?,?,?)";

	/*
	 * public static final String QUERY_INSERT_IMAGE =
	 * "INSERT INTO srcode.FILE_DATA (AGENT_ID, DEVICE_ID,DATA) VALUES (:agentId, :deviceId,:data)"
	 * ;
	 */

	public static final String QUERY_READ_CLOB = "SELECT DATA FROM srcode.FILE_DATA WHERE AGENT_ID = :agentId AND DEVICE_ID = :deviceId";

	/* AgentLogFileJdbcDao End */

	/* Agent Txn Script Start */

	/*
	 * public static final String TXN_QUERY_SELECT_ALL =
	 * "SELECT T.TXN_ID, T.TXN_TIMESTAMP, T.TXN_TYPE, T.LOAN_AC_NO, T.SYNC_TIME,"
	 * +
	 * " T.DEVICE_ID, T.AUTH_STATUS, T.TXN_STATUS, A.FIRST_NAME, A.LAST_NAME, C.CUSTOMER_NAME, T.TXN_AMOUNT,"
	 * +
	 * " T.TXN_CCY , C.CREDIT_OFFICER FROM IFTB_TRANSACTIONS T LEFT OUTER JOIN AMTB_AGENTS A on A.AGENT_ID=T.AGENT_ID "
	 * + " LEFT OUTER JOIN IFTB_CUST_DETAIL C on C.CUSTOMER_ID=T.CUSTOMER_ID " +
	 * " ORDER BY LOAN_AC_NO, TXN_TIMESTAMP";
	 * 
	 * public static final String QUERY_SELECT_TXNS =
	 * " SELECT TXN_ID, TXN_TIMESTAMP, TXN_TYPE, AGENT_ID, LOAN_AC_NO," +
	 * " SYNC_TIME, CUSTOMER_ID, DEVICE_ID, AUTH_STATUS,TXN_STATUS,TXN_CCY FROM IFTB_TRANSACTIONS WHERE TXN_ID=:id"
	 * + " ORDER BY LOAN_AC_NO, TXN_TIMESTAMP";
	 */

	public static final String TXN_QUERY_SELECT_ALL = "SELECT MBS_TXN_ID,TXN_CODE,TXN_DESC,AGENDA_ID,SEQ_NO,CBS_AC_REF_NO,BRANCH_CODE,CUSTOMER_ID,AGENT_ID,DEVICE_ID,LOCATION_CODE,TXN_INIT_TIME,TXN_STATUS_DESC FROM srcode.MFI_MBS_TXN_RECEIVER_V where TXN_CODE in('L01','L02','L21') ";

	public static final String QUERY_SELECT_TXNS = "SELECT MBS_TXN_ID,TXN_CODE,TXN_DESC,AGENDA_ID,SEQ_NO,CBS_AC_REF_NO,BRANCH_CODE,CUSTOMER_ID,AGENT_ID,DEVICE_ID,LOCATION_CODE,TXN_INIT_TIME,TXN_STATUS_DESC FROM srcode.MFI_MBS_TXN_RECEIVER_V where TXN_CODE in('L01','L02')";

	/* Agent Txn Script End */

	/* Deposit Txn Script Start */

	/* Query changed for Asomi Nirmal kanna S */
	public static final String DEPTXNS_QUERY_SELECT_ALL = "SELECT MBS_TXN_ID,TXN_CODE,TXN_DESC,AGENDA_ID,SEQ_NO,CBS_AC_REF_NO,BRANCH_CODE,CUSTOMER_ID,AGENT_ID,DEVICE_ID,LOCATION_CODE,TXN_INIT_TIME,TXN_STATUS_DESC FROM srcode.MFI_MBS_TXN_RECEIVER_V where TXN_CODE in('D01','D02','D03') ";

	public static final String QUERY_SELECT_DEPTXNS = "SELECT MBS_TXN_ID,TXN_CODE,TXN_DESC,AGENDA_ID,SEQ_NO,CBS_AC_REF_NO,BRANCH_CODE,CUSTOMER_ID,AGENT_ID,DEVICE_ID,LOCATION_CODE,TXN_INIT_TIME,TXN_STATUS_DESC FROM srcode.MFI_MBS_TXN_RECEIVER_V where TXN_CODE in('D01','D02','D03')";

	/* Deposit Txn Script End */

	/* Audit Trail Script Start */

	public static final String AUDTRL_QUERY_INSERT = "INSERT INTO srcode.MFI_AUDIT_DETAIL ("
			+ "TABLE_NAME, KEY_ID, VERSION_NO, MAKER_ID, MAKER_DT, OBJECT_XML) "
			+ "VALUES (:tableName, :keyId, :version, :maker, :makerTimestamp, :objectXml)";

	public static final String AUDTRL_QUERY_UPDATE_AUTH = "UPDATE srcode.MFI_AUDIT_DETAIL SET CHECKER_ID = :checker, "
			+ "CHECKER_DT = :checkerTimestamp "
			+ "WHERE TABLE_NAME = :tableName AND KEY_ID = :keyId AND CHECKER_ID IS NULL";

	public static final String AUDTRL_QUERY_SELECT_VERSION = "SELECT TABLE_NAME, KEY_ID, "
			+ "VERSION_NO, MAKER_ID, MAKER_DT, CHECKER_ID, CHECKER_DT, OBJECT_XML FROM srcode.MFI_AUDIT_DETAIL WHERE "
			+ "TABLE_NAME = :tableName AND KEY_ID = :keyId AND VERSION_NO = :version ORDER BY CHECKER_DT DESC";

	public static final String AUDTRL_QUERY_SELECT_ALL_VERSIONS = "SELECT TABLE_NAME, KEY_ID, "
			+ "VERSION_NO, MAKER_ID, MAKER_DT,"
			+ "CHECKER_ID, CHECKER_DT FROM srcode.MFI_AUDIT_DETAIL WHERE "
			+ "TABLE_NAME = :tableName AND KEY_ID = :keyId ORDER BY VERSION_NO DESC";

	public static final String AUDTRL_QUERY_SELECT_MAX_VERSION = "SELECT MAX(VERSION_NO) FROM srcode.MFI_AUDIT_DETAIL WHERE "
			+ "TABLE_NAME = :tableName AND KEY_ID = :keyId";

	public static final String AUDTRL_QUERY_SELECT_MAX_VERSION_MAKER = "SELECT MAKER_ID FROM srcode.MFI_AUDIT_DETAIL WHERE "
			+ "TABLE_NAME = :tableName AND KEY_ID = :keyId AND CHECKER_ID IS NULL";

	public static final String AUDTRL_QUERY_AUTHORIZED_VERSION = "SELECT MAX(VERSION_NO) FROM srcode.MFI_AUDIT_DETAIL WHERE "
			+ "TABLE_NAME = :tableName AND KEY_ID = :keyId AND CHECKER_ID IS NOT NULL";

	/* Audit Trail Script End */

	/* Branch Script Start */

	public static final String QUERY_SELECT_BRANCH_DETAILS = "SELECT BRANCH_CODE, PARENT_BRN_CODE, BRANCH_NAME, BRANCH_ADD1,"
			+ " BRANCH_ADD2, BRANCH_ADD3, BRANCH_ADD4, ZIP_CODE, CITY, STATE, COUNTRY, BRANCH_DATE_TODAY, BRANCH_EOD_STAT, "
			+ "DATE_CHANGED, BRANCH_LCY, RECORD_STAT, CBS_UPLD_JOB_ID FROM srcode.CBS_BRANCH_DETAIL ORDER BY BRANCH_CODE";

	public static final String QUERY_SELECT_BRANCH = "SELECT BRANCH_CODE,BRANCH_DATE_TODAY FROM srcode.CBS_BRANCH_DETAIL ";

	// Shabu
	public static final String QUERY_SELECT_BRANCH_BY_PK = "SELECT "
			+ "BRANCH_CODE, " + "BRANCH_NAME, " + "PARENT_BRN_CODE, "
			+ "BRN_ADD1, " + "BRN_ADD2, " + "BRN_ADD3,  " + "BRN_ADD4,  "
			+ "ZIP_CODE,  " + "CITY,  " + "STATE,  " + "COUNTRY,  "
			+ "BRANCH_DATE_TODAY, " + "BRN_EOD_STAT, " + "BRN_LCY, "
			+ "RECORD_STAT, " + "CBS_UPLD_JOB_ID "
			+ "FROM srcode.CBS_BRANCH_DETAIL " + "WHERE "
			+ "BRANCH_CODE = :id  ";

	public static final String BRN_QUERY_SELECT_ALL = "SELECT BRANCH_CODE, PARENT_BRN_CODE, BRANCH_NAME, BRANCH_ADD1, BRANCH_ADD2, BRANCH_ADD3, BRANCH_ADD4, "
			+ " ZIP_CODE, CITY, STATE, COUNTRY, BRANCH_DATE_TODAY, BRANCH_EOD_STAT, DATE_CHANGED, BRANCH_LCY, RECORD_STAT, CBS_UPLD_JOB_ID FROM srcode.CBS_BRANCH_DETAIL ORDER BY BRANCH_CODE";

	/* Branch Script End */

	/* CashSettlement Script Start */

	/*
	 * public static final String CASHSETTLE_QUERY_INSERT =
	 * "INSERT INTO AMTB_CASH_SETTLEMENT (ID, AGENT_ID,CCY_CODE,SYSTEM_POSITION,TXN_TYPE,CASHIN_OUT,REMARKS,AMOUNT,TXN_TIME,AUTH_STATUS) "
	 * +
	 * " VALUES (:id,:agentId,:currencyCode,:systemPosition,:txnType,:cashInOut,:remarks,:amount,:txnTime,:authStatus)"
	 * ;
	 * 
	 * public static final String CASHSETTLE_QUERY_SELECT_ALL =
	 * "SELECT  ID, AGENT_ID, CCY_CODE, SYSTEM_POSITION, TXN_TYPE, CASHIN_OUT, REMARKS,"
	 * +
	 * " AMOUNT ,TXN_TIME, AUTH_STATUS  FROM AMTB_CASH_SETTLEMENT ORDER BY TXN_TIME DESC"
	 * ;
	 * 
	 * public static final String CASHSETTLE_QUERY_SELECT_CURRENT_POSITION =
	 * "SELECT SYSTEM_POSITION,TXN_TIME FROM AMTB_CASH_SETTLEMENT WHERE " +
	 * " TXN_TIME = (SELECT MAX(TXN_TIME) FROM AMTB_CASH_SETTLEMENT WHERE AGENT_ID = :agentId AND CCY_CODE = :currencyCode)"
	 * ;
	 * 
	 * public static final String CASHSETTLE_QUERY_SELECT_BY_PK =
	 * "SELECT  ID, AGENT_ID,CCY_CODE,SYSTEM_POSITION,TXN_TYPE,CASHIN_OUT," +
	 * "REMARKS,AMOUNT,TXN_TIME,AUTH_STATUS  FROM AMTB_CASH_SETTLEMENT WHERE ID = :id"
	 * ;
	 * 
	 * public static final String CASHSETTLE_QUERY_UPDATE_BY_AUTH =
	 * "UPDATE AMTB_CASH_SETTLEMENT SET AUTH_STATUS='A' WHERE AGENT_ID = :agentId"
	 * ; public static final String CASHSETTLE_QUERY_SELECT_AGENT_DETAILS =
	 * "SELECT  IS_ACTIVE,AGENT_START_DATE,AGENT_END_DATE  FROM srcode.MFI_AGENTS WHERE AGENT_ID=:agentId"
	 * ; public static final String CASHSETTLE_QUERY_SELECT_TXN_TIME =
	 * "SELECT MAX(TXN_TIME)TXN_TIME FROM AMTB_CASH_SETTLEMENT WHERE AGENT_ID =:agentId AND CCY_CODE =:currencyCode"
	 * ;
	 * 
	 * public static final String CASHSETTLE_QUERY_SELECT_CASHBALANCE =
	 * "SELECT  A.ID,A.CCY_CODE,A.AGENT_ID,A.SYSTEM_POSITION,A.TXN_TYPE,A.CASHIN_OUT,A.REMARKS,A.AMOUNT,A.AUTH_STATUS,A.TXN_TIME"
	 * + " FROM AMTB_CASH_SETTLEMENT A,(SELECT MAX(TXN_TIME) TXN_TIME,CCY_CODE"
	 * +
	 * " FROM AMTB_CASH_SETTLEMENT WHERE AGENT_ID = :agentId GROUP BY CCY_CODE) B"
	 * + " WHERE A.AGENT_ID = :agentId AND A.TXN_TIME = B.TXN_TIME";
	 * 
	 * public static final String CASHSETTLE_QUERY_AUTO_ID =
	 * "SELECT MAX(ID)ID FROM AMTB_CASH_SETTLEMENT"; public static final String
	 * CASHSETTLE_QUERY_AUDIT_VERSION =
	 * "SELECT MAX(VERSION_NO) FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID=:id AND CHECKER_ID IS NOT NULL"
	 * ; public static final String CASHSETTLE_QUERY_DELETE_CASHSETTLEMENT =
	 * "DELETE FROM AMTB_CASH_SETTLEMENT WHERE ID = :id"; public static final
	 * String CASHSETTLE_QUERY_DELETE_AUDIT =
	 * "DELETE FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID = :id"; public static
	 * final String CASHSETTLE_QUERY_DELETE =
	 * "DELETE FROM AMTB_CCY_EXRATE WHERE AGENT_ID=:id";
	 */

	/*
	 * public static final String CASHSETTLE_QUERY_INSERT =
	 * "INSERT INTO srcode.MFI_AGENT_CASH_TILL (TILL_ID, AGENT_ID,CASH_TXN_TYPE,TXN_CODE,TXN_CCY_CODE,CASH_AMOUNT,TXN_REMARKS,IS_ACTIVE,AUTH_STAT,INIT_BY_USER_ID,VERIFY_BY_USER_ID,TXN_INTI_DATETIME,TXN_AUTH_DATETIME) "
	 * +
	 * " VALUES (:tillId,:agentId,:cashTxnType,:txnCode,:txnCcyCode,:cashAmount,:txnRemarks,:isActive,:authStat,:initByUserId,:verifyByUserId,:txnInitDatetime,:txnAuthDatetime)"
	 * ;
	 * 
	 * public static final String CASHSETTLE_QUERY_SELECT_ALL =
	 * "SELECT  TILL_ID, AGENT_ID,CASH_TXN_TYPE,TXN_CODE,TXN_CCY_CODE,CASH_AMOUNT,TXN_REMARKS,"
	 * +
	 * " IS_ACTIVE,AUTH_STATUS,INIT_BY_USER_ID,VERIFY_BY_USER_ID,TXN_INTI_DATETIME,TXN_AUTH_DATETIME  FROM srcode.MFI_AGENT_CASH_TILL"
	 * ;
	 * 
	 * public static final String CASHSETTLE_QUERY_SELECT_BY_PK =
	 * "SELECT  TILL_ID, AGENT_ID,CASH_TXN_TYPE,TXN_CODE,TXN_CCY_CODE,CASH_AMOUNT,TXN_REMARKS,"
	 * +
	 * " IS_ACTIVE,AUTH_STATUS,INIT_BY_USER_ID,VERIFY_BY_USER_ID,TXN_INTI_DATETIME,TXN_AUTH_DATETIME  FROM srcode.MFI_AGENT_CASH_TILL WHERE TILL_ID = :tillId"
	 * ;
	 * 
	 * public static final String CASHSETTLE_QUERY_UPDATE_BY_AUTH =
	 * "UPDATE srcode.MFI_AGENT_CASH_TILL SET AUTH_STATUS='A' WHERE AGENT_ID = :agentId"
	 * ;
	 * 
	 * public static final String CASHSETTLE_QUERY_SELECT_AGENT_DETAILS =
	 * "SELECT  IS_ACTIVE,AGENT_START_DATE,AGENT_END_DATE  FROM AMTB_AGENTS WHERE AGENT_ID=:agentId"
	 * ;
	 */
	public static final String CASHSETTLE_QUERY_SELECT_ALL = "SELECT TILL_ID,AGENT_ID,TXN_CODE,TXN_CCY_CODE,CASH_AMOUNT,TXN_REMARKS,"
			+ "IS_ACTIVE,AUTH_STAT,INIT_BY_USER_ID,VERIFY_BY_USER_ID,TXN_INTI_DATETIME,TXN_AUTH_DATETIME FROM srcode.MFI_AGENT_CASH_TILL";

	public static final String CASHSETTLE_QUERY_SELECT_BY_PK = "SELECT TILL_ID,AGENT_ID,TXN_CODE,TXN_CCY_CODE,CASH_AMOUNT,TXN_REMARKS,"
			+ " IS_ACTIVE,AUTH_STAT,INIT_BY_USER_ID,VERIFY_BY_USER_ID,TXN_INTI_DATETIME,TXN_AUTH_DATETIME FROM srcode.MFI_AGENT_CASH_TILL WHERE TILL_ID = :id";

	public static final String CASHSETTLE_QUERY_DELETE = "DELETE FROM srcode.CBS_CCY_CODES WHERE AGENT_ID=:id";

	public static final String CASHSETTLE_QUERY_DELETE_CASHSETTLEMENT = "DELETE FROM srcode.MFI_AGENT_CASH_TILL WHERE ID = :id";

	public static final String CASHSETTLE_QUERY_DELETE_AUDIT = "DELETE FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID = :id";

	public static final String CASHSETTLE_QUERY_UPDATE_BY_AUTH = "UPDATE srcode.MFI_AGENT_CASH_TILL SET AUTH_STAT='A' ,VERIFY_BY_USER_ID=:verifyByUserId ,TXN_AUTH_DATETIME=:txnInitDatetime WHERE TILL_ID = :id";

	public static final String CASHSETTLE_QUERY_INSERT = "INSERT INTO srcode.MFI_AGENT_CASH_TILL (TILL_ID, AGENT_ID,TXN_CODE,TXN_CCY_CODE,CASH_AMOUNT,TXN_REMARKS,IS_ACTIVE,AUTH_STAT,INIT_BY_USER_ID,VERIFY_BY_USER_ID,TXN_INTI_DATETIME,TXN_AUTH_DATETIME) "
			+ " VALUES (:id,:agentId,:txnCode,:currencyCode,:cashAmount,:txnRemarks,:isActive,:authStatus,:initByUserId,:verifyByUserId,:txnInitDatetime,:txnAuthDatetime)";

	public static final String CASHSETTLE_QUERY_AUDIT_VERSION = "SELECT MAX(VERSION_NO) FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID=:id AND CHECKER_ID IS NOT NULL";

	public static final String CASHSETTLE_QUERY_SELECT_AGENT_DETAILS = "SELECT  IS_ACTIVE,AGENT_START_DATE,AGENT_END_DATE  FROM srcode.MFI_AGENTS WHERE AGENT_ID=:agentId";

	public static final String CASHSETTLE_QUERY_RECORD_STATUS = " select count(*) FROM  srcode.MFI_AGENT_CASH_TILL where AUTH_STATUS = 'A' and TILL_ID = :tillId";

	public static final String CASHSETTLE_QUERY_UPDATE = "UPDATE srcode.MFI_AGENT_CASH_TILL SET AGND_AMT_ACT=:agndAmtAct, "
			+ "TXN_AMT_ACT=:txnAmtAct,REAL_AMT_ACT=:realAmtAct  where TILL_ID = :tillId";

	public static final String CASHSETTLE_QUERY_SELECT_TILLID = "SELECT TILL_ID,CCYCODE FROM srcode.MFI_MBS_TILLID_V";

	public static final String CASHSETTLE_QUERY_TILL_ID = "SELECT MAX(TILL_ID)TILL_ID FROM srcode.MFI_AGENT_CASH_TILL where TILL_ID like 'CASH%' ";

	public static final String CASHSETTLE_QUERY_TXN_CODE = "SELECT TXN_CODE,TXN_DESC FROM srcode.MFI_TXN_CODES WHERE MODULE_CODE = :moduleCode";

	/* CashSettlement Script End */

	public static final String CASHSETTLE_QUERY_UPDATE_AGN = "UPDATE srcode.MFI_AGENT_CASH_TILL SET AGND_AMT_ACT=:amount where TILL_ID = :id";

	public static final String CASHSETTLE_QUERY_UPDATE_TXN = "UPDATE srcode.MFI_AGENT_CASH_TILL SET TXN_AMT_ACT=:amount where TILL_ID = :id";

	/* ErrorCode Script Start */

	public static final String ERRORCODE_QUERY_SELECT_ALL = "SELECT  MSG_CODE, LANG,MSG_DESC,ERR_TYPE,SUB_SYS,MSG_TYPE FROM srcode.MFI_MSG_CODE order by  MSG_CODE";

	public static final String ERRORCODE_QUERY_SELECT_BY_PK = "SELECT  MSG_CODE, LANG,MSG_DESC,ERR_TYPE,SUB_SYS,MSG_TYPE FROM srcode.MFI_MSG_CODE WHERE MSG_CODE = :id";

	/* ErrorCode Script Start */

	/* CbsJob History Script Start */

	public static final String CBS_QUERY_SELECT_ALL = "SELECT DISTINCT "
			+ "A.JOB_ID,"
			+ "A.START_TIME,"
			+ "A.STARTED_BY,"
			+ "A.END_TIME,"
			+ "NVL(B.CUSTOMER,0) AS CUSTOMER ,"
			+ "NVL(C.LOAN,0) AS LOAN, "
			+ " NVL(D.DEPOSIT,0) AS DEPOSIT  "
			+ "FROM srcode.MFI_CBS_JOB_DETAIL A, "
			+ "(SELECT A.JOB_ID JOB, COUNT(RECORD_ID) AS CUSTOMER FROM srcode.MFI_CBS_JOB_HISTORY_DETAIL A,srcode.MFI_CBS_JOB_DETAIL B WHERE A.JOB_ID=B.JOB_ID AND A.RECORD_TYPE='CUSTOMER' GROUP BY A.JOB_ID)B, "
			+ "(SELECT A.JOB_ID JOB, COUNT(RECORD_ID) AS LOAN FROM srcode.MFI_CBS_JOB_HISTORY_DETAIL A,srcode.MFI_CBS_JOB_DETAIL B WHERE A.JOB_ID=B.JOB_ID AND A.RECORD_TYPE='LOAN' GROUP BY A.JOB_ID)C, "
			+ "(SELECT A.JOB_ID JOB, COUNT(RECORD_ID) AS DEPOSIT FROM srcode.MFI_CBS_JOB_HISTORY_DETAIL A,srcode.MFI_CBS_JOB_DETAIL B WHERE A.JOB_ID=B.JOB_ID AND A.RECORD_TYPE='DEPOSIT' GROUP BY A.JOB_ID)D  "
			+ "WHERE A.JOB_ID=B.JOB(+) AND A.JOB_ID=C.JOB(+) AND A.JOB_ID= D.JOB(+) ORDER BY JOB_ID DESC";

	public static final String CBS_QUERY_SELECT_BY_LOAN = "SELECT JOB_ID, RECORD_TYPE, TIMESTAMP, RECORD_ID, OPERATION "
			+ " FROM srcode.MFI_CBS_JOB_HISTORY_DETAIL JOB_ID WHERE upper(RECORD_TYPE) = upper('loan')";

	public static final String CBS_QUERY_SELECT_BY_CUSTOMER = "SELECT JOB_ID, RECORD_TYPE, TIMESTAMP, RECORD_ID, OPERATION "
			+ " FROM srcode.MFI_CBS_JOB_HISTORY_DETAIL JOB_ID WHERE upper(RECORD_TYPE) = upper('customer')";

	public static final String CBS_QUERY_SELECT_BY_DEPOSIT = "SELECT JOB_ID, RECORD_TYPE, TIMESTAMP, RECORD_ID, OPERATION "
			+ " FROM srcode.MFI_CBS_JOB_HISTORY_DETAIL JOB_ID WHERE upper(RECORD_TYPE) = upper('deposit')";

	public static final String CBS_QUERY_JOB_ID = "SELECT MAX(JOB_ID)JOB_ID FROM srcode.MFI_CBS_JOB_DETAIL";

	public static final String CBS_QUERY_INSERT_JOBID = "INSERT INTO srcode.MFI_CBS_JOB_DETAIL(JOB_ID,START_TIME,STARTED_BY) VALUES (:jobId,:jobStartTime,:userId)";

	public static final String CBS_QUERY_UPDATE_JOBID = "UPDATE srcode.MFI_CBS_JOB_DETAIL SET END_TIME=:jobEndTime  WHERE JOB_ID=:jobId";

	public static final String CBS_QUERY_SELECT_JOBID = "SELECT JOB_ID FROM srcode.MFI_CBS_JOB_DETAIL WHERE JOB_ID LIKE :date AND END_TIME IS NULL AND STARTED_BY=:userId ";

	public static final String CBS_QUERY_UPDATE_JOBTIME = "UPDATE srcode.MFI_CBS_JOB_DETAIL  SET START_TIME=:jobStartTime  WHERE JOB_ID=:jobId ";

	public static final String CBS_QUERY_CBS_LOAN = "SELECT RECORD_ID AS LOAN_AC_NO,JOB_ID FROM srcode.MFI_CBS_JOB_HISTORY_DETAIL WHERE JOB_ID=:jobId AND RECORD_TYPE='LOAN' ";

	public static final String CBS_UPLOAD_STATUS_HISTORY = "SELECT TYPE, CLASS, KEY, ERR_CODE, ERR_DESC FROM srcode.MFI_CBS_UPLOAD_STATUS_V where type='1'";

	public static final String CBS_UPLOAD_STATUS_HISTORY1 = "SELECT TYPE, CLASS, KEY, ERR_CODE, ERR_DESC FROM srcode.MFI_CBS_UPLOAD_STATUS_V where type='1'";

	public static final String CBS_UPLOAD_STATUS_HISTORY2 = "SELECT TYPE, CLASS, KEY, ERR_CODE, ERR_DESC FROM srcode.MFI_CBS_UPLOAD_STATUS_V where type='2' ";

	public static final String CBS_UPLOAD_STATUS_HISTORY3 = "SELECT TYPE, CLASS, KEY, ERR_CODE, ERR_DESC FROM srcode.MFI_CBS_UPLOAD_STATUS_V where type='3'";

	public static final String CBS_UPLOAD_STATUS_HISTORY5 = "SELECT TYPE, CLASS, KEY, ERR_CODE, ERR_DESC FROM srcode.MFI_CBS_UPLOAD_STATUS_V where type='5'";

	public static final String CBS_UPLOAD_STATUS_HISTORY6 = "SELECT TYPE, CLASS, KEY, ERR_CODE, ERR_DESC FROM srcode.MFI_CBS_UPLOAD_STATUS_V where type='6'";

	public static final String CBS_UPLOAD_STATUS_HISTORY7 = "SELECT TYPE, CLASS, KEY, ERR_CODE, ERR_DESC FROM srcode.MFI_CBS_UPLOAD_STATUS_V where type='7'";

	public static final String CBS_QUERY_CBS_CUSTOMER = "SELECT RECORD_ID AS CUSTOMER_ID,JOB_ID FROM srcode.MFI_CBS_JOB_HISTORY_DETAIL WHERE JOB_ID=:jobId AND RECORD_TYPE='CUSTOMER'";

	public static final String CBS_QUERY_CBS_DEPOSIT = "SELECT RECORD_ID AS DEP_AC_NO,JOB_ID FROM srcode.MFI_CBS_JOB_HISTORY_DETAIL WHERE JOB_ID=:jobId AND RECORD_TYPE='DEPOSIT'";

	public static final String CBS_QUERY_INSERT_SYNC_DETAILS = "INSERT INTO srcode.MFI_CBS_SYNC_DETAILS(MODULE_CODE,TXN_CODE,"
			+ "SYNC_TIME,BUSINESS_DATE,CBS_UPLD_JOB_ID,COUNT_FETCH) "
			+ "VALUES (:modCode,:txnCode,:syncTime,:businessDate,:jobId,:countFetch)";

	public static final String QUERY_SYSDATE = "select now()";

	public static final String QUERY_DELETE_SYNC_DETAILS = "DELETE FROM srcode.MFI_CBS_SYNC_DETAILS";

	/* CbsJob History Script End */

	/* Currency Script Start */

	public static final String CUR_QUERY_SELECT_ALL = "select C.CCY_CODE  CCY_CODE ,C.CCY_NAME CCY_NAME,C.ISO_CCY_CODE ISO_CCY_CODE,"
			+ " C.ISO_ALT_CCODE ISO_ALT_CCODE,C.COUNTRY COUNTRY,C.CCY_ROUND_RULE CCY_ROUND_RULE,C.CCY_DECIMAL CCY_DECIMAL,"
			+ " C.RECORD_STAT RECORD_STAT,C.CBS_UPLD_JOB_ID CBS_UPLD_JOB_ID,C.SYNC_STATUS SYNC_STATUS,C.SYNC_TIME SYNC_TIME,L.DESN  DESN"
			+ " from srcode.CBS_CCY_CODES C INNER JOIN srcode.MFI_LIST_VALUE L "
			+ "  ON C.COUNTRY = L.LIST_VALUE";

	/*
	 * public static final String CUR_QUERY_SELECT_ALL =
	 * "SELECT c.CCY_CODE  CCY_CODE,c.CCY_NAME CCY_NAME,c.ISO_CCY_CODE ISO_CCY_CODE,c.ISO_ALT_CCODE ISO_ALT_CCODE,c.COUNTRY  COUNTRY,"
	 * +
	 * "c.CCY_ROUND_RULE  CCY_ROUND_RULE,c.CCY_DECIMAL  CCY_DECIMAL,c.RECORD_STAT RECORD_STAT,c.CBS_UPLD_JOB_ID  CBS_UPLD_JOB_ID,c.SYNC_STATUS  SYNC_STATUS,"
	 * + "c.SYNC_TIME  SYNC_TIME,l.DESCRIPTION DESCRIPTION from CBS_CCY_CODES c"
	 * +
	 * " left outer join srcode.MFI_COUNTRY_CODE l on c.COUNTRY = l.COUNTRY_CODE"
	 * ;
	 */
	// public static final String CUR_QUERY_SELECT_ALL
	// ="SELECT CCY_CODE, CCY_NAME, ISO_CCY_CODE, ISO_ALT_CCODE, COUNTRY, CCY_ROUND_RULE, CCY_DECIMAL, RECORD_STAT, CBS_UPLD_JOB_ID, SYNC_STATUS, SYNC_TIME FROM CBS_CCY_CODES ORDER BY CCY_CODE";

	public static final String CUR_QUERY_SELECT_CURRENCY = "SELECT * FROM srcode.CBS_CCY_CODES ";

	public static final String CUR_QUERY_TOGET_DECIMAL = "SELECT CCY_DECIMALS FROM srcode.CBS_CCY_CODES WHERE CCY_CODE = :curencyCode ";

	public static final String CUR_QUERY_SELECT_PK = "SELECT CCY_CODE, CCY_NAME, ISO_CCY_CODE, ISO_ALT_CCODE, COUNTRY, CCY_ROUND_RULE,CCY_DECIMAL,RECORD_STAT,"
			+ "CBS_UPLD_JOB_ID,SYNC_STATUS,SYNC_TIME  FROM srcode.CBS_CCY_CODES WHERE CCY_CODE= :id";

	/* Currency Script End */

	/* Customer Script Start */

	public static final String CUS_QUERY_SELECT_BY_PK = "SELECT CUSTOMER_ID,CUSTOMER_FULL_NAME,CUSTOMER_SHORT_NAME,CUSTOMER_CATEGORY,"
			+ " GENDER,DOB,CUSTOMER_SINCE,LOCATION_CODE,ADDRESS_LINE1,ADDRESS_LINE2,ADDRESS_LINE3,ADDRESS_LINE4,ZIP_CODE,"
			+ " CITY,STATE,COUNTRY,NATIONALITY,ALLOCATED_AGENT_ID,LOCAL_BRANCH_CODE,PREFERRED_LANGUAGE,EMAIL_ADDRESS,"// SMS_REQUIRED
			+ " MOBILE_NUMBER,CREDIT_OFFICER,VIEW_FILE,IMAGE,RECORD_STAT,CBS_UPLD_JOB_ID,  "
			+ " sms_from_ibs,sms_from_mbs,collect_kyc,parent_cust_id,is_parent_cust,GROUP_ID "
			+ " FROM srcode.CBS_CUSTOMER_DETAIL_v where CUSTOMER_ID = :id";

	public static final String CUS_QUERY_SELECT_ALL = "SELECT CUSTOMER_ID,CUSTOMER_FULL_NAME,CUSTOMER_SHORT_NAME,CUSTOMER_CATEGORY,"
			+ " GENDER,DOB,CUSTOMER_SINCE,LOCATION_CODE,ADDRESS_LINE1,ADDRESS_LINE2,ADDRESS_LINE3,ADDRESS_LINE4,ZIP_CODE,"
			+ " CITY,STATE,COUNTRY,NATIONALITY,ALLOCATED_AGENT_ID,LOCAL_BRANCH_CODE,PREFERRED_LANGUAGE,EMAIL_ADDRESS,"// SMS_REQUIRED
			+ " MOBILE_NUMBER,CREDIT_OFFICER,VIEW_FILE,IMAGE,RECORD_STAT,CBS_UPLD_JOB_ID,  "
			+ " sms_from_ibs,sms_from_mbs,collect_kyc,parent_cust_id,is_parent_cust " // cbs_group_code
			+ " FROM srcode.CBS_CUSTOMER_DETAIL_v ORDER BY CUSTOMER_ID";

	/*
	 * public static final String CUS_QUERY_CUSTOMER_DETAIL =
	 * "SELECT  distinct A.CUSTOMER_ID ,A.CUSTOMER_NAME,A.PHONE_NUMBER,A.CITY,A.LOC_CODE,A.LOC_NAME,A.VIEW_FILE,A.CREDIT_OFFICER,"
	 * +
	 * "A.ADDRESS_LINE1,A.ADDRESS_LINE2,A.UNIQUE_ID_NAME,A.UNIQUE_ID_VALUE,A.DOB,A.SEX,A.COUNTRY,A.STATE "
	 * +
	 * " FROM   IFVW_MBS_CUST_INFO A  WHERE  A.SYNC_STATUS IN (:naStatus,:PendStatus,:updateStatus) AND  A.AGENT_ID=:agentId AND  LIMIT :batchSize "
	 * ;
	 */
	public static final String CUS_QUERY_CUSTOMER_DETAIL = "SELECT * FROM srcode.CBS_CUSTOMER_DETAIL "
			+ "WHERE ALLOCATED_AGENT_ID=:agentId AND LOCATION_CODE=:locCode";

	public static final String CUS_QUERY_CUSTOMIZE_COND1 = "SELECT * FROM srcode.CBS_CUSTOMER_DETAIL WHERE CUSTOMER_ID=:customerId "
			+ " AND LOCATION_CODE=:locationCode AND LOCAL_BRANCH_CODE=:localBranchCode";

	public static final String CUS_QUERY_CUSTOMIZE_COND2 = "SELECT * FROM srcode.CBS_CUSTOMER_DETAIL WHERE CUSTOMER_ID=:customerId "
			+ " AND LOCATION_CODE=:locationCode ";

	public static final String CUS_QUERY_CUSTOMIZE_COND3 = "SELECT * FROM srcode.CBS_CUSTOMER_DETAIL WHERE  "
			+ " LOCATION_CODE=:locationCode AND LOCAL_BRANCH_CODE=:localBranchCode";

	public static final String CUS_QUERY_CUSTOMIZE_COND4 = "SELECT * FROM srcode.CBS_CUSTOMER_DETAIL WHERE CUSTOMER_ID=:customerId "
			+ " AND LOCAL_BRANCH_CODE=:localBranchCode ";

	public static final String CUS_QUERY_CUSTOMIZE_CUSTOMER_DETAIL = "SELECT * FROM srcode.CBS_CUSTOMER_DETAIL WHERE CUSTOMER_ID=:customerId "
			+ " OR LOCATION_CODE=:locationCode OR LOCAL_BRANCH_CODE=:localBranchCode";

	public static final String CUS_QUERY_CUSTOMIZE_COMMON = "SELECT * FROM srcode.CBS_CUSTOMER_DETAIL "
			+ " where CUSTOMER_ID = nvl( :customerId,CUSTOMER_ID) AND LOCATION_CODE=nvl(:locationCode, LOCATION_CODE) "
			+ " AND LOCAL_BRANCH_CODE=nvl(:localBranchCode,LOCAL_BRANCH_CODE)";

	public static final String CUS_QUERY_ALLWHERE = "SELECT CUSTOMER_ID,CUSTOMER_FULL_NAME,CUSTOMER_SHORT_NAME,CUSTOMER_CATEGORY,"
			+ " GENDER,DOB,CUSTOMER_SINCE,LOCATION_CODE,ADDRESS_LINE1,ADDRESS_LINE2,ADDRESS_LINE3,ADDRESS_LINE4,ZIP_CODE,"
			+ " CITY,STATE,COUNTRY,NATIONALITY,ALLOCATED_AGENT_ID,LOCAL_BRANCH_CODE,PREFERRED_LANGUAGE,EMAIL_ADDRESS,"// SMS_REQUIRED
			+ " MOBILE_NUMBER,CREDIT_OFFICER,VIEW_FILE,IMAGE,RECORD_STAT,CBS_UPLD_JOB_ID,  "
			+ " sms_from_ibs,sms_from_mbs,collect_kyc,parent_cust_id,is_parent_cust,GROUP_ID "
			+ " from srcode.CBS_CUSTOMER_DETAIL_v where ";

	public static final String CUS_QUERY_SYNC = "UPDATE srcode.CBS_CUSTOMER_DETAIL SET SYNC_STATUS= :status WHERE CUSTOMER_ID IN (";
	/* Customer Script End */

	/* Customer Info Script Start */

	public static final String CUSINFO_QUERY_INSERT = "INSERT INTO srcode.IFTB_CUSTOMER_INFO_DATA (ENROLLMENT_ID,FIRST_NAME,LAST_NAME,MIDDLE_NAME,DOB,GENDER,ADDRESS1,ADDRESS2,CONTACT_NO,EMAIL_ID,COUNTRY,STATE,ZIP_CODE,CURRENCY,RESIDENCE_TYPE,NATIONALITY,MARTIAL_STATUS,"
			+ "PROFESSION,PROFESSION_REMARK,ENROLL_DATE,SYNC_TIME,DEVICE_ID,ACCOUNT_TYPE,ACCOUNT_TYPE_REMARK)"
			+ " VALUES (:id,:firstName,:lastName,:middleName,:dob,:gender,:address1,:address2,:contactNumber,:emailId,:country,:state,:zipCode,"
			+ ":currency,:residentialType,:nationality,:martialStatus,:profession,:professionRemark,:enrollmentdate,:syncTime,:deviceId,:accountType,:accTypeRemark) ";

	public static final String CUSINFO_QUERY_SELECT_SESSIONID = "SELECT SESSION_ID FROM srcode.IFTB_TRANSACTION_STATUS WHERE TXN_ID = :id AND STATUS =:status ";

	public static final String CUSINFO_QUERY_INSERT_IDSTATUS = "INSERT INTO srcode.IFTB_TRANSACTION_STATUS (TXN_ID, SESSION_ID, STATUS) VALUES (:id, :syncsessionid, 'PENDING')";

	public static final String CUSINFO_QUERY_DELETE = "DELETE FROM srcode.IFTB_TRANSACTION_STATUS WHERE STATUS=:status AND TXN_ID  IN (";

	public static final String CUSINFO_QUERY_TXNSTATUS = "UPDATE srcode.IFTB_TRANSACTION_STATUS SET STATUS=:recvStatus WHERE STATUS=:status AND TXN_ID  IN (";
	/* Customer Info Script End */

	/* Deposit Enrichment Script End */

	public static final String DEPE_QUERY_SELECT_UNASSIGNED = "SELECT * from srcode.MFI_DEPOSIT_ENRICHMENT order by dep_ac_no";

	/*
	 * public static final String DEPE_QUERY_INSERT_AGENTID =
	 * "INSERT INTO IFTB_DEPOSIT_ENRICHMENT(DEP_AC_NO, AGENT_ID, ALLOCATE_USER, ALLOCATION_TIME, LOCATION_CODE) "
	 * +
	 * "VALUES (:depositAccountNumber, :agentId, :allocateUser, :allocationTime, :locationCode )"
	 * ;
	 */
	public static final String DEPE_QUERY_INSERT_AGENTID = "UPDATE srcode.MFI_DEPOSIT_ENRICHMENT SET AGENT_ID=:agentId "
			+ " ,ALLOCATION_BY=:allocateUser, ALLOCATION_TIME=:allocationTime WHERE DEP_AC_NO = :depositAccountNumber ";

	public static final String DEPE_QUERY_INSERT_ISALLOCATED = "UPDATE srcode.MFI_DEPOSIT_DETAIL SET IS_ALLOCATED='Y' "
			+ " WHERE DEP_AC_NO = :depositAccountNumber ";

	public static final String DEPE_QUERY_UPDATE_AGENTID = "UPDATE srcode.MFI_DEPOSIT_ENRICHMENT SET AGENT_ID = :agentId WHERE DEP_AC_NO = :depositAccountNumber";

	/* Deposit Enrichment Script End */

	/* Deposit Req Script Start */

	public static final String DEPR_SELECT_QUEARY_ALL = "select * from srcode.MFI_mbs_req_receiver_v where txn_code IN('D21','D22','D23')"; // "select * from ifvw_requests";
	public static final String DEPR_SELECT_QUEARY_ALL_PK = "select * from srcode.MFI_mbs_req_receiver_v where REQ_ID = :id";

	/* Deposit Req Script End */

	/* WithdrawlDepReq Script Start */

	public static final String WITHDEPREQ_SELECT_QUEARY_ALL = "select * from srcode.MFI_mbs_req_receiver_v where txn_code IN('C21','C22')"; // "select * from ifvw_requests";
	public static final String WITHDEPREQ_SELECT_QUEARY_ALL_PK = "select * from srcode.MFI_mbs_req_receiver_v where REQ_ID=:id";

	/* WithdrawlDepReq Script End */

	/* Deposit Script Start */

	public static final String DEP_QUERY_SELECT_ALL = " SELECT DEP_AC_NO, BRANCH_CODE, CUSTOMER_ID, LOCATION_ID, AGENT_ID, "
			+ " DEP_CCY, DEP_OPEN_DATE, DEP_PAY_FREQ, DEP_INST_AMT, DEP_INST_AMT_DUE, DEP_INT_RATE, DEP_MATURITY_AMT, "
			+ " DEP_MATURITY_DATE, TOTAL_INST_PAID, TOTAL_INT_ACCURED, DEP_LAST_INST_DATE, DEP_OVERDUE_STATUS, "
			+ " DEP_OVER_DUE_DATE, DEP_OVER_DUE_AMT, REDEMPTION_FLAG, REDEMPTION_PAYOUT_DATE, REDEMPTION_AMOUNT, "
			+ " SYNC_STATUS, SYNC_TIME, RECORD_STAT, JOB_ID FROM srcode.IFTB_DEPOSIT_DETAILS";

	public static final String DEP_QUERY_SELECT_ALL_DISB = "SELECT DEP_AC_NO, BRANCH_CODE, CUSTOMER_ID, LOCATION_ID, AGENT_ID, "
			+ " DEP_CCY, DEP_OPEN_DATE, DEP_PAY_FREQ, DEP_INST_AMT, DEP_INST_AMT_DUE, DEP_INT_RATE, DEP_MATURITY_AMT, "
			+ " DEP_MATURITY_DATE, TOTAL_INST_PAID, TOTAL_INT_ACCURED, DEP_LAST_INST_DATE, DEP_OVERDUE_STATUS, "
			+ " DEP_OVER_DUE_DATE, DEP_OVER_DUE_AMT, REDEMPTION_FLAG, REDEMPTION_PAYOUT_DATE, REDEMPTION_AMOUNT, "
			+ " SYNC_STATUS, SYNC_TIME, RECORD_STAT, JOB_ID FROM srcode.IFTB_DEPOSIT_DETAILS WHERE TXN_ID=:id";

	/* Deposit Script End */

	/* Deposit Collection Script Start */
	/*
	 * public static final String DEPC_QUERY_SELECT_ALL =
	 * " SELECT TXN_ID, DEP_OPEN_DATE, DEP_PAY_FREQ, TOTAL_INST_PAID, " +
	 * " DEP_MATURITY_DATE, DEP_INT_RATE, FULL_PARTIAL_FLAG, DEP_INST_AMT_PAID, TXN_NARRATIVE FROM "
	 * + " IFTB_DEP_INST_COLLECTION";
	 * 
	 * public static final String DEPC_QUERY_SELECT_ALL_DISB =
	 * "SELECT TXN_ID, DEP_OPEN_DATE, DEP_PAY_FREQ, TOTAL_INST_PAID, " +
	 * " DEP_MATURITY_DATE, DEP_INT_RATE, COLL_FULL_PARTIAL_FLAG, DEP_INST_AMT_PAID, TXN_NARRATIVE FROM "
	 * + " IFVW_DEP_INST_COLLECTION WHERE TXN_ID=:id";
	 */

	public static final String DEPCTXN_QUERY_SELECT_ALL = " SELECT MBS_TXN_ID, AGENDA_ID, SEQ_NO, TXN_CODE, "
			+ " CBS_AC_REF_NO, BRANCH_CODE, CUSTOMER_ID, CUSTOMER_FULL_NAME, AGENT_ID,AGENT_NAME,LOCATION_CODE,LOCATION_DESC,AMOUNT_DUE,AMOUNT_PAID,TXN_NARRATIVE,TXN_INIT_TIME,TXN_SYNC_TIME,TXN_STATUS_DESC,TXN_ERR_CODE,TXN_ERR_MESSAGE, GENERATED_SMS, SMS_MOBILE_NO, SMS_CONTENT, GENERATED_REVR, FULL_PART_IND, SYNC_TYPE FROM "
			+ "srcode.MFI_MBS_TXN_DP_COLL_V"; //For Tag No : EGA-MN15-000021

	public static final String DEPCTXN_QUERY_SELECT_ALL_DISB = "SELECT MBS_TXN_ID, AGENDA_ID, SEQ_NO, TXN_CODE, "
			+ " CBS_AC_REF_NO, BRANCH_CODE, CUSTOMER_ID, CUSTOMER_FULL_NAME, AGENT_ID,AGENT_NAME,LOCATION_CODE,LOCATION_DESC,AMOUNT_DUE,AMOUNT_PAID,TXN_NARRATIVE,TXN_INIT_TIME,TXN_SYNC_TIME,TXN_STATUS_DESC,TXN_ERR_CODE,TXN_ERR_MESSAGE,GENERATED_SMS, SMS_MOBILE_NO, SMS_CONTENT, GENERATED_REVR, FULL_PART_IND, SYNC_TYPE FROM "
			+ "srcode.MFI_MBS_TXN_DP_COLL_V WHERE MBS_TXN_ID =:id"; //For Tag No : EGA-MN15-000021

	/* Deposit Collection Script End */

	/***************************************** Cash Withdrawal Start ********************************************************/

	public static final String CASHWITHDRAW_QUERY_SELECT_ALL = " select * from  srcode.MFI_mbs_req_cashwdrl_v ";

	public static final String CASHWITHDRAW_QUERY_SELECT_ALL_DISB = " select * from  srcode.MFI_mbs_req_cashwdrl_v  WHERE MBS_TXN_ID = :id";

	/* Cash Withdrawal End */

	/********************************** Cash Deposit for Request Start ******************************************************/

	public static final String CASHDEPOSIT_QUERY_SELECT_ALL = "select * from  srcode.MFI_mbs_req_cashdeposit_v";

	public static final String CASHDEPOSIT_QUERY_SELECT_ALL_DISB = "select * from  srcode.MFI_mbs_req_cashdeposit_v  WHERE MBS_TXN_ID = :id";

	/* Cash Deposit for Request End */

	/* Deposit Maturity Script Start */

	/*
	 * public static final String DEPM_QUERY_SELECT_ALL =
	 * " SELECT TXN_ID, DEP_OPEN_DATE, DEP_PAY_FREQ, DEP_INST_AMT, " +
	 * " DEP_INT_RATE, DEP_INST_AMT_PAID, DEP_INT_ACCRUED, DEP_MATURITY_AMT_PAID, DEP_MATURITY_DATE, "
	 * +
	 * " REDEMPTION_FLAG, REDEMPTION_PAYOUT_DATE, REDEMPTION_AMOUNT, TXN_NARRATIVE FROM "
	 * + " IFTB_DEP_MATURITY_PAYMENT";
	 * 
	 * 
	 * public static final String DEPM_QUERY_SELECT_ALL_DISB =
	 * "SELECT TXN_ID, DEP_OPEN_DATE, DEP_PAY_FREQ, DEP_INST_AMT, " +
	 * " DEP_INT_RATE, DEP_INST_AMT_PAID, DEP_INT_ACCRUED, DEP_MATURITY_AMT_PAID, DEP_MATURITY_DATE, "
	 * +
	 * " REDEMPTION_FLAG, REDEMPTION_PAYOUT_DATE, REDEMPTION_AMOUNT, TXN_NARRATIVE FROM "
	 * + " IFVW_DEP_MATURITY_PAYMENT WHERE TXN_ID=:id";
	 */
	public static final String DEPM_QUERY_SELECT_ALL = " SELECT MBS_TXN_ID, AGENDA_ID, SEQ_NO, TXN_CODE, "
			+ " CBS_AC_REF_NO, BRANCH_CODE, CUSTOMER_ID, CUSTOMER_FULL_NAME, AGENT_ID, "
			+ " AGENT_NAME, LOCATION_CODE, LOCATION_DESC, MATURITY_AMOUNT,AMOUNT_PAID_OUT,TXN_NARRATIVE,TXN_INIT_TIME,TXN_SYNC_TIME, TXN_STATUS_DESC,TXN_ERR_CODE,TXN_ERR_MESSAGE, GENERATED_SMS, SMS_MOBILE_NO, SMS_CONTENT, GENERATED_REVR, FULL_PART_IND, SYNC_TYPE  FROM "
			+ " srcode.MFI_MBS_TXN_DPMATURITY_V "; //For Tag No : EGA-MN15-000021

	public static final String DEPM_QUERY_SELECT_ALL_DISB = " SELECT MBS_TXN_ID, AGENDA_ID, SEQ_NO, TXN_CODE, "
			+ " CBS_AC_REF_NO, BRANCH_CODE, CUSTOMER_ID, CUSTOMER_FULL_NAME, AGENT_ID, "
			+ " AGENT_NAME, LOCATION_CODE, LOCATION_DESC, MATURITY_AMOUNT,AMOUNT_PAID_OUT,TXN_NARRATIVE,TXN_INIT_TIME,TXN_SYNC_TIME, TXN_STATUS_DESC ,TXN_ERR_CODE,TXN_ERR_MESSAGE, GENERATED_SMS, SMS_MOBILE_NO, SMS_CONTENT, GENERATED_REVR, FULL_PART_IND, SYNC_TYPE FROM "
			+ " srcode.MFI_MBS_TXN_DPMATURITY_V  WHERE MBS_TXN_ID=:id"; //For Tag No : EGA-MN15-000021

	/* Deposit Maturity Script End */

	/* Deposit Redemption Script Start */

	public static final String DEPMREDM_QUERY_SELECT_ALL = " SELECT MBS_TXN_ID, AGENDA_ID, SEQ_NO, TXN_CODE, "
			+ " CBS_AC_REF_NO, BRANCH_CODE, CUSTOMER_ID, CUSTOMER_FULL_NAME, AGENT_ID, "
			+ " AGENT_NAME, LOCATION_CODE, LOCATION_DESC, REDEMPTION_AMOUNT,AMOUNT_PAID_OUT,TXN_NARRATIVE,TXN_INIT_TIME,TXN_SYNC_TIME, TXN_STATUS_DESC ,TXN_ERR_CODE,TXN_ERR_MESSAGE, GENERATED_SMS, SMS_MOBILE_NO, SMS_CONTENT, GENERATED_REVR, FULL_PART_IND, SYNC_TYPE FROM "
			+ " srcode.MFI_MBS_TXN_DPREDEMPTION_V "; //For Tag No : EGA-MN15-000021

	public static final String DEPMREDM_QUERY_SELECT_ALL_DISB = " SELECT MBS_TXN_ID, AGENDA_ID, SEQ_NO, TXN_CODE, "
			+ " CBS_AC_REF_NO, BRANCH_CODE, CUSTOMER_ID, CUSTOMER_FULL_NAME, AGENT_ID, "
			+ " AGENT_NAME, LOCATION_CODE, LOCATION_DESC, REDEMPTION_AMOUNT,AMOUNT_PAID_OUT,TXN_NARRATIVE,TXN_INIT_TIME,TXN_SYNC_TIME, TXN_STATUS_DESC,TXN_ERR_CODE,TXN_ERR_MESSAGE, GENERATED_SMS, SMS_MOBILE_NO, SMS_CONTENT, GENERATED_REVR, FULL_PART_IND, SYNC_TYPE  FROM "
			+ " srcode.MFI_MBS_TXN_DPREDEMPTION_V  WHERE MBS_TXN_ID=:id"; //For Tag No : EGA-MN15-000021

	/* Deposit Redemption Script Start */

	/* Deposit Request Script Start */

	public static final String DEPREQ_QUERY_INSERT_DEPREQ = "INSERT INTO srcode.IFTB_REQUESTS (REQ_ID , REQ_TIMESTAMP, REQ_TYPE ,AGENT_ID,REQ_AC_NO, CUSTOMER_ID,SYNC_TIME,REQ_STATUS,DEVICE_ID,AUTH_STATUS,BRANCH_CODE ) "
			+ " VALUES (:id,:requestDate,:requestType,:agentId,:depositAccNum,:customerId,:syncTime,:requeststatus,:deviceId,:authStatus,:branchCode)";

	public static final String DEPREQ_QUERY_INSERT_ACCREQ = "INSERT INTO srcode.IFTB_REQUESTS_DET (REQ_ID, REQ_AMOUNT,REQ_CCY,REQ_DATE,DEP_TENURE,DEP_FREQUENCY,DEP_NO_INST,REQ_NERRATIVE , MATURITY_DATE, DEP_TENURE_TYPE, DEP_FREQUENCY_TYPE) VALUES "
			+ " (:id,:reqAmnt,:depositCcy,:firstPaymentDate,:deposittenure,:depositPayfreq,:numOfInst,:narrative , :maturityDate, :tenureType, :frequencyType)"; // bug-251

	public static final String DEPREQ_QUERY_INSERT_DEPREDEM = "INSERT INTO srcode.IFTB_REQUESTS_DET(REQ_ID ,REQ_AMOUNT,RED_FULL_PARTIAL_IND,REQ_NERRATIVE) VALUES "
			+ " (:id,:reqAmnt,:redemptionType,:narrative )";

	public static final String DEPREQ_QUERY_INSERT_DEPPREPAY = "INSERT INTO srcode.IFTB_REQUESTS_DET(REQ_ID ,REQ_AMOUNT,REQ_NERRATIVE) VALUES "
			+ " (:id,:reqAmnt,:narrative )";

	public static final String DEPREQ_QUERY_SELECT_SESSIONID = "SELECT SESSION_ID FROM srcode.IFTB_TRANSACTION_STATUS WHERE TXN_ID = :id AND STATUS =:status ";

	public static final String DEPREQ_QUERY_INSERT_IDSTATUS = "INSERT INTO srcode.IFTB_TRANSACTION_STATUS (TXN_ID, SESSION_ID, STATUS) VALUES (:id, :syncsessionid, 'PENDING')";

	public static final String DEPREQ_QUERY_INSERT_DEPTXN = "INSERT INTO srcode.IFTB_TRANSACTIONS (TXN_ID,TXN_TIMESTAMP,TXN_TYPE,AGENT_ID,LOAN_AC_NO,CUSTOMER_ID,DEVICE_ID,SYNC_TIME,TXN_AMOUNT,TXN_CCY,BRANCH_CODE,TXN_STATUS,AUTH_STATUS) VALUES (:id,:txnTimestamp,:txnType,:agentId,:loanAcNo,:customerId,:deviceId,:syncTime,:txnAmount,:txnCcy,:branchCode,:txnStatus,:authStatus )";

	public static final String DEPREQ_QUERY_INSERT_DEPCOLL = "INSERT INTO srcode.IFTB_MBS_DEP_TRANSACTIONS (TXN_ID,COLL_FULL_PARTIAL_FLAG,TXN_NARRATIVE ) VALUES (:id,:fullPartlFlag,:txnNarrative )";

	public static final String DEPREQ_QUERY_INSERT_DEPRED = "INSERT INTO srcode.IFTB_MBS_DEP_TRANSACTIONS (TXN_ID,REDEMPTION_FLAG,COLL_FULL_PARTIAL_FLAG,REDEMPTION_PAID_DATE,TXN_NARRATIVE) VALUES (:id,:redempFlag,:fullPartlFlag,:redemDate,:txnNarrative ) ";

	public static final String DEPREQ_QUERY_INSERT_DEPMAT = "INSERT INTO srcode.IFTB_MBS_DEP_TRANSACTIONS (TXN_ID,REDEMPTION_FLAG,REDEMPTION_PAID_DATE,TXN_NARRATIVE) VALUES (:id,:redempFlag,:depMatDate,:txnNarrative ) ";

	public static final String DEPREQ_QUERY_UPDATE_STATUS = "UPDATE srcode.IFTB_TRANSACTION_STATUS SET STATUS= :recStatus WHERE TXN_ID IN (";

	public static final String DEPREQ_AND = " ) AND STATUS=:penStatus ";

	public static final String DEPREQ_QUERY_DELETE = "DELETE FROM srcode.IFTB_TRANSACTION_STATUS WHERE STATUS=:status AND TXN_ID  IN (";

	/* Deposit Request Script End */

	/* Device Script Start */

	public static final String DEV_QUERY_UPDATE = "UPDATE srcode.MFI_DEVICE SET DEVICE_TYPE=:deviceType, UNIQUE_ID=:uniqueId, "
			+ "ISSUED_DATE=:issuedDate, LAST_SYNC=:lastSync, IS_ACTIVE=:isActive, ISSUED_BY_CO=:issuedByCo, BRAND_MODEL=:brandModel, "
			+ "OPERATING_SYSTEM=:operatingSystem, APP_VERSION=:appVersion, SIM_NUMBER=:simNumber, AUTH_STATUS=:authStatus "
			+ "where  DEVICE_ID=:id";

	public static final String DEV_QUERY_SELECT_ALL = "SELECT DEVICE_ID, DEVICE_TYPE, UNIQUE_ID, ISSUED_DATE, LAST_SYNC, IS_ACTIVE, "
			+ "ISSUED_BY_CO, BRAND_MODEL, OPERATING_SYSTEM, APP_VERSION, SIM_NUMBER,AUTH_STATUS  FROM srcode.MFI_DEVICE WHERE IS_ACTIVE "
			+ "in ('A','I') ORDER BY DEVICE_ID";

	// Bug :EGALITE-226 start

	/*
	 * public static final String DEV_QUERY_DEVICE_ID_ALLOC =
	 * "select D.DEVICE_ID, D.DEVICE_TYPE, D.UNIQUE_ID, D.ISSUED_DATE, D.LAST_SYNC, "
	 * +
	 * "D.IS_ACTIVE, D.ISSUED_BY_CO, D.BRAND_MODEL, D.OPERATING_SYSTEM, D.APP_VERSION, D.SIM_NUMBER, D.AUTH_STATUS "
	 * +
	 * "from srcode.MFI_DEVICE D where D.DEVICE_ID not in (select DEVICE_ID from srcode.MFI_AGENTS where DEVICE_ID is not null) AND"
	 * +" IS_ACTIVE in ('A','I') AND AUTH_STATUS='A' order by DEVICE_ID";
	 */

	public static final String DEV_QUERY_DEVICE_ID_ALLOC = "select D.DEVICE_ID, D.DEVICE_TYPE, D.UNIQUE_ID, D.ISSUED_DATE, D.LAST_SYNC, "
			+ "D.IS_ACTIVE, D.ISSUED_BY_CO, D.BRAND_MODEL, D.OPERATING_SYSTEM, D.APP_VERSION, D.SIM_NUMBER, D.AUTH_STATUS "
			+ "from srcode.MFI_DEVICE D where D.DEVICE_ID not in (select DEVICE_ID from srcode.MFI_AGENTS where DEVICE_ID is not null) AND"
			+ " IS_ACTIVE ='A' AND AUTH_STATUS='A' order by DEVICE_ID";

	// Bug :EGALITE-226 end

	public static final String DEV_QUERY_INSERT = "INSERT INTO srcode.MFI_DEVICE (DEVICE_ID, DEVICE_TYPE, UNIQUE_ID, ISSUED_DATE, LAST_SYNC, IS_ACTIVE, ISSUED_BY_CO,"
			+ " BRAND_MODEL, OPERATING_SYSTEM, APP_VERSION, SIM_NUMBER) "
			+ "VALUES (:id, :deviceType, :uniqueId, :issuedDate, :lastSync, :isActive, :issuedByCo, :brandModel, "
			+ ":operatingSystem, :appVersion, :simNumber)";

	public static final String DEV_QUERY_SELECT_BY_PK = "SELECT DEVICE_ID, DEVICE_TYPE, UNIQUE_ID, ISSUED_DATE, LAST_SYNC, "
			+ "IS_ACTIVE, ISSUED_BY_CO, BRAND_MODEL, OPERATING_SYSTEM, APP_VERSION, SIM_NUMBER, AUTH_STATUS  "
			+ "FROM srcode.MFI_DEVICE WHERE DEVICE_ID = :id";

	public static final String DEV_QUERY_UPDATE_BY_AUTH = "UPDATE srcode.MFI_DEVICE SET AUTH_STATUS='A' WHERE DEVICE_ID=:id";

	public static final String DEV_QUERY_DEVICE_AUTO_ID = "SELECT MAX(DEVICE_ID)DEVICE_ID FROM srcode.MFI_DEVICE";

	public static final String DEV_QUERY_UNIQUE_ID_AVAILABLE = "SELECT 1 FROM srcode.MFI_DEVICE WHERE  UPPER(UNIQUE_ID) =  UPPER(:uniqueId)";

	public static final String DEV_QUERY_DEVICE_DETAIL = "SELECT DEVICE_ID, DEVICE_TYPE, UNIQUE_ID, ISSUED_DATE, LAST_SYNC, "
			+ "IS_ACTIVE, ISSUED_BY_CO, BRAND_MODEL, OPERATING_SYSTEM, APP_VERSION, SIM_NUMBER, AUTH_STATUS  "
			+ "FROM srcode.MFI_DEVICE WHERE UNIQUE_ID = :uniqueId";

	public static final String DEV_QUERY_ALLOC_DEVICES = "select D.DEVICE_ID, D.DEVICE_TYPE, D.UNIQUE_ID, D.ISSUED_DATE, D.LAST_SYNC, "
			+ "D.IS_ACTIVE, D.ISSUED_BY_CO, D.BRAND_MODEL, D.OPERATING_SYSTEM, D.APP_VERSION, D.SIM_NUMBER, D.AUTH_STATUS "
			+ "from srcode.MFI_DEVICE D where D.DEVICE_ID not in (select DEVICE_ID from srcode.MFI_AGENTS where AGENT_ID NOT IN (:id) "
			+ "AND DEVICE_ID is not null) AND IS_ACTIVE in ('A','I') AND AUTH_STATUS='A' order by DEVICE_ID ";

	public static final String DEV_QUERY_AUDIT_VERSION = "SELECT MAX(VERSION_NO) FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID=:id "
			+ "AND CHECKER_ID IS NOT NULL";

	public static final String DEV_QUERY_DELETE = "DELETE FROM srcode.MFI_DEVICE WHERE DEVICE_ID = :id";

	public static final String DEV_QUERY_DELETE_AUDIT = "DELETE FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID = :id";

	// For ModifyUniqueId
	public static final String DEV_QUERY_MODIFY_UNIQUE_ID_AVAILABLE = "select TABLE1.Device_id,TABLE1.unique_id "
			+ "from srcode.MFI_DEVICE TABLE1,(select * from srcode.MFI_DEVICE WHERE DEVICE_ID =:id) TABLE2 "
			+ "where TABLE1.unique_id=TABLE2.unique_id and TABLE1.Device_id not in(TABLE2.device_id)";

	public static final String DEV_QUERY_UPDATE_BY_ISSUEDDATE = "UPDATE srcode.MFI_DEVICE SET ISSUED_DATE=now() WHERE DEVICE_ID=:id";

	public static final String DEV_QUERY_UPDATE_BY_DEVICEID = "UPDATE srcode.MFI_DEVICE  SET ISSUED_DATE = null WHERE DEVICE_ID=:id";

	/* Device Script End */

	/* Disbursement Schedule Script Start */

	/*
	 * public static final String DISBSCH_QUERY_SELECT_ALL =
	 * "SELECT LOAN_AC_NO, BRANCH_CODE ,COMPONENT_NAME ,SCHEDULE_ST_DATE ,SCHEDULE_DUE_DATE, "
	 * +
	 * " AMOUNT_TO_DISBR, DTYPE, MANUAL_AMT_DISBR, CUR_DISBR_AMT ,AMT_DISBURSED FROM  IFTB_DISBR_SCHEDULES WHERE LOAN_AC_NO= :loanaccId "
	 * ;
	 */

	public static final String DISBSCH_QUERY_SELECT_ALL = "select * from srcode.MFI_loan_detail_disbr_v WHERE LOAN_AC_NO= :loanaccId ";

	public static final String DISBSCH_QUERY_INSERT = "INSERT INTO srcode.IFTB_DISBR_SCHEDULES (LOAN_AC_NO,SCHEDULE_DUE_DATE,DTYPE,"
			+ "AMOUNT_TO_DISBR) VALUES (:id, :scheduleDueDate, :dType, :amountToDisbr)";

	/* Disbursement Schedule Script End */

	/* Disbursement Txn Script Start */

	/*
	 * public static final String DISBTXN_QUERY_SELECT_ALL =
	 * " SELECT TXN_ID, TXN_NARRATIVE, TXN_AMOUNT FROM IFTB_DISBURSEMENTS";
	 * 
	 * public static final String DISBTXN_QUERY_SELECT_ALL_DISB =
	 * "SELECT D.TXN_ID, D.TXN_NARRATIVE, D.TXN_AMOUNT, T.TXN_TIMESTAMP," +
	 * " T.TXN_TYPE, A.FIRST_NAME, A.LAST_NAME, T.LOAN_AC_NO, T.SYNC_TIME,C.CUSTOMER_NAME, T.DEVICE_ID, "
	 * +
	 * " T.AUTH_STATUS, T.TXN_STATUS, T.TXN_CCY FROM IFTB_DISBURSEMENT D LEFT OUTER JOIN IFTB_TRANSACTIONS T ON "
	 * +
	 * " T.TXN_ID=:id LEFT OUTER JOIN IFTB_CUST_DETAIL C ON C.CUSTOMER_ID=T.CUSTOMER_ID "
	 * +
	 * " LEFT OUTER JOIN AMTB_AGENTS A ON A.AGENT_ID=T.AGENT_ID and D.TXN_ID=:id1 where D.TXN_ID=:id2"
	 * ;
	 */

	public static final String DISBTXN_QUERY_SELECT_ALL = "SELECT MBS_TXN_ID, AGENDA_ID, SEQ_NO, TXN_CODE, CBS_AC_REF_NO,"
			+ " BRANCH_CODE, CUSTOMER_ID, CUSTOMER_FULL_NAME, AGENT_ID, AGENT_NAME, LOCATION_CODE, LOCATION_DESC, "
			+ " AMOUNT_TO_DISBURSE, DISBURSED_AMOUNT, TXN_NARRATIVE, TXN_INIT_TIME, TXN_SYNC_TIME, TXN_STATUS_DESC, "
			+ " TXN_ERR_CODE, TXN_ERR_MESSAGE, GENERATED_SMS, SMS_MOBILE_NO, SMS_CONTENT, GENERATED_REVR, "
			+ " FULL_PART_IND, SYNC_TYPE FROM srcode.MFI_MBS_TXN_LNDISBR_V";//For Tag No : EGA-MN15-000020

	public static final String DISBTXN_QUERY_SELECT_ALL_DISB = "SELECT MBS_TXN_ID,AGENDA_ID, SEQ_NO, TXN_CODE,"
			+ " CBS_AC_REF_NO,BRANCH_CODE, CUSTOMER_ID, CUSTOMER_FULL_NAME, AGENT_ID,AGENT_NAME,LOCATION_CODE, "
			+ " LOCATION_DESC, AMOUNT_TO_DISBURSE, DISBURSED_AMOUNT,TXN_NARRATIVE,TXN_INIT_TIME,TXN_SYNC_TIME,"
			+ " TXN_STATUS_DESC, TXN_ERR_CODE, TXN_ERR_MESSAGE, GENERATED_SMS, SMS_MOBILE_NO, SMS_CONTENT, "
			+ " GENERATED_REVR, FULL_PART_IND, SYNC_TYPE FROM srcode.MFI_MBS_TXN_LNDISBR_V "
			+ " WHERE MBS_TXN_ID = :id "; //For Tag No : EGA-MN15-000020

	public static final String CHILD_QUERY_SELECT_ALL = "select * from srcode.MFI_loan_detail where parent_loan_ac_no = :cbsAcRefNo ";

	/* Disbursement Txn Script End */

	/* Document Script Start */

	public static final String DOC_QUERY_INSERT = "INSERT INTO srcode.IFTB_CUSTOMER_DOCUMENT_DATA ("
			+ "ENROLLMENT_ID,DOCUMENT_ID,DOCUMENT_NAME,DOCUMENT_TAG) "
			+ "values (:id,:documentId,:documentName,:documentTag)";

	public static final String DOC_QUERY_DOCS_FOR_CUSTOMER = "SELECT ENROLLMENT_ID, DOCUMENT_ID, DOCUMENT_NAME, DOCUMENT_TAG, DATA "
			+ " FROM srcode.IFTB_CUSTOMER_DOCUMENT_DATA "
			+ " WHERE ENROLLMENT_ID = :enrollmentId";

	public static final String DOC_QUERY_DOCS_UPDATE = "UPDATE srcode.IFTB_CUSTOMER_DOCUMENT_DATA SET DATA = ? WHERE ENROLLMENT_ID=? AND DOCUMENT_ID=?";

	/* Document Script End */

	/* Enrich Enroll Customer Script Start */

	public static final String EEC_QUERY_UPDATE_ENRCHEDENROLL = "UPDATE srcode.iftb_enriched_enrol SET CUST_ENRICH_HOMEBRANCH=:homeBranch,"
			+ " CUST_ENRICH_CUSTCATEGORY=:custCategory, CUST_ENRICH_REL_OFFICER=:relOfficer WHERE ENROL_CUSTADD_CODE = :id";

	public static final String EEC_QUERY_DELETE_ENRCHEDENROLL = "DELETE FROM srcode.iftb_enriched_enrol WHERE ENROL_CUSTADD_CODE = :id";

	public static final String EEC_QUERY_DELETE_AUDIT_VAL = "DELETE FROM srcode.amtb_audit_detail WHERE TABLE_NAME='IFTB_CUSTOMER_INFO_DATA' and KEY_ID = :id";

	public static final String EEC_QUERY_RESET_ENRCH_STAT = "UPDATE srcode.IFTB_CUSTOMER_INFO_DATA SET ENRICH_STAT=null WHERE ENROLLMENT_ID = :id";

	public static final String EEC_QUERY_SELECT_ALL = "SELECT A.ENROLLMENT_ID,A.FIRST_NAME,A.LAST_NAME,A.MIDDLE_NAME,A.GENDER,A.DOB,"
			+ " A.ADDRESS1,A.ADDRESS2,A.EMAIL_ID,A.CONTACT_NO,A.COUNTRY,A.STATE,A.ZIP_CODE,A.CURRENCY,A.RESIDENCE_TYPE,A.NATIONALITY,"
			+ " A.MARTIAL_STATUS,A.PROFESSION,A.PROFESSION_REMARK,A.ENROLL_DATE, "
			+ " iftb_enriched_enrol.ENROL_CUST_LANG,iftb_enriched_enrol.ENROL_CUST_SEX ,"
			+ " iftb_enriched_enrol.ENROL_CUST_TYPE,iftb_enriched_enrol.CUST_ENRICH_NLTY,iftb_enriched_enrol.CUST_ENRICH_COUNTRY,"
			+ " iftb_enriched_enrol.CUST_ENRICH_SNAME,iftb_enriched_enrol.CUST_ENRICH_HOMEBRANCH,"
			+ " iftb_enriched_enrol.CUST_ENRICH_CUSTCATEGORY,iftb_enriched_enrol.CUST_ENRICH_REL_OFFICER  "
			+ " from srcode.IFTB_CUSTOMER_INFO_DATA A INNER JOIN srcode.iftb_enriched_enrol ON A.ENROLLMENT_ID = iftb_enriched_enrol.ENROL_CUSTADD_CODE "; // iftb_enriched_enrol.srcode.file_data

	public static final String EEC_QUERY_SELECT_BY_PK = "SELECT A.ENROLLMENT_ID,A.FIRST_NAME,A.LAST_NAME,A.MIDDLE_NAME,A.GENDER,A.DOB,"
			+ "  A.ADDRESS1,A.ADDRESS2,A.EMAIL_ID,A.CONTACT_NO,A.COUNTRY,A.STATE,A.ZIP_CODE,"
			+ "  A.CURRENCY,A.RESIDENCE_TYPE,A.NATIONALITY,A.MARTIAL_STATUS,A.PROFESSION,"
			+ " A.PROFESSION_REMARK,A.ENROLL_DATE, iftb_enriched_enrol.ENROL_CUST_LANG,"
			+ " iftb_enriched_enrol.ENROL_CUST_SEX ,iftb_enriched_enrol.ENROL_CUST_TYPE,"
			+ " iftb_enriched_enrol.CUST_ENRICH_NLTY,iftb_enriched_enrol.CUST_ENRICH_COUNTRY,"
			+ " iftb_enriched_enrol.CUST_ENRICH_SNAME,iftb_enriched_enrol.CUST_ENRICH_HOMEBRANCH,"
			+ " iftb_enriched_enrol.CUST_ENRICH_CUSTCATEGORY,iftb_enriched_enrol.CUST_ENRICH_REL_OFFICER from "
			+ " srcode.IFTB_CUSTOMER_INFO_DATA A INNER JOIN srcode.iftb_enriched_enrol ON A.ENROLLMENT_ID = iftb_enriched_enrol.ENROL_CUSTADD_CODE "
			+ " WHERE ENROL_CUSTADD_CODE = :id";

	/* Enrich Enroll Customer Script End */

	/*
	 * ******************************************Enroll Customer Script
	 * Start************************************
	 */

	public static final String ENRCUS_QUERY_INSERT = "INSERT INTO srcode.iftb_enriched_enrol (ENROL_CUSTADD_CODE,"
			+ " CUST_ENRICH_HOMEBRANCH, CUST_ENRICH_CUSTCATEGORY, CUST_ENRICH_REL_OFFICER) "
			+ " VALUES (:id , :homeBranch, :custCategory, :relOfficer )";

	/*
	 * public static final String ENRCUS_QUERY_SELECT_ALL =
	 * "SELECT A.ENROLLMENT_ID,FIRST_NAME,LAST_NAME,MIDDLE_NAME,DOB,GENDER,ADDRESS1,ADDRESS2,CONTACT_NO,EMAIL_ID,COUNTRY,STATE,ZIP_CODE,CURRENCY,"
	 * +
	 * "RESIDENCE_TYPE,NATIONALITY,MARTIAL_STATUS,PROFESSION,PROFESSION_REMARK,ENROLL_DATE,ACCOUNT_TYPE,ACCOUNT_TYPE_REMARK, "
	 * +
	 * "ENRICH_STAT,E.CUST_ENRICH_HOMEBRANCH, E.CUST_ENRICH_CUSTCATEGORY, E.CUST_ENRICH_REL_OFFICER "
	 * +
	 * "FROM IFTB_CUSTOMER_INFO_DATA A LEFT OUTER JOIN IFTB_ENRICHED_ENROL E ON A.ENROLLMENT_ID = E.ENROL_CUSTADD_CODE"
	 * ;
	 */

	public static final String ENRCUS_QUERY_SELECT_ALL = "SELECT ENROLMENT_ID,  WORKFLOW_Q_TYPE, FIRST_NAME, LAST_NAME, MIDDLE_NAME "
			+ " ,DOB ,GENDER ,RESIDENCE_TYPE ,NATIONALITY ,ADDRESS1 ,ADDRESS2 ,ADDRESS3 ,ADDRESS4 ,CITY ,STATE ,ZIP_CODE ,COUNTRY ,EMAIL_ID ,CONTACT_NO"
			+ " ,MARTIAL_STATUS, PROFESSION, PROFESSION_REMARK ,ACCOUNT_CATEGORY ,ACCOUNT_TYPE ,CURRENCY ,IS_ACTIVE ,MODULE_CODE "
			+ " ,TXN_CODE, TXN_INIT_TIME, TXN_SYNC_TIME,AGENT_ID,DEVICE_ID, LOCATION_CODE, TXN_STATUS, TXN_ERR_CODE, TXN_ERR_MESSAGE "
			+ " ,AUTH_STATUS "
			+ " ,GROUP_INDIVIDUAL_TYPE,TEMP_GROUP_ID,IS_KYC_ONLY,CUSTOMER_ID,POC "
			+ " ,IS_SENT_TO_CBS,CBS_RESPONSE_STAT,CBS_RESPONSE_TXN_REF_NO "
			+ " ,ENROLMENT_ID  KYC_ENROLMENT_ID,KYC_IMAGE_CUSTOMER "
			+ " ,KYC_ID_1_IMAGE, KYC_ID_1_TYPE, KYC_ID_1_NUMBER, KYC_ID_1_PROOF_TYPE "
			+ " ,KYC_ID_2_IMAGE, KYC_ID_2_TYPE, KYC_ID_2_NUMBER, KYC_ID_2_PROOF_TYPE "
			+ " ,KYC_ID_3_IMAGE ,KYC_ID_3_TYPE ,KYC_ID_3_NUMBER ,KYC_ID_3_PROOF_TYPE "
			+ " FROM srcode.ibs_cust_enrol_all_info ORDER BY ENROLMENT_ID";

	// Get all
	/*
	 * "SELECT I.ENROLMENT_ID,  I.WORKFLOW_Q_TYPE, I.FIRST_NAME, I.LAST_NAME, I.MIDDLE_NAME "
	 * +
	 * " ,I.DOB ,I.GENDER ,I.RESIDENCE_TYPE ,I.NATIONALITY ,I.ADDRESS1 ,I.ADDRESS2 ,I.CITY ,I.STATE ,I.ZIP_CODE ,I.COUNTRY ,I.EMAIL_ID ,I.CONTACT_NO"
	 * +
	 * " ,I.MARTIAL_STATUS, I.PROFESSION, I.PROFESSION_REMARK ,I.ACCOUNT_CATEGORY ,I.ACCOUNT_TYPE ,I.CURRENCY ,I.IS_ACTIVE ,I.MODULE_CODE "
	 * +
	 * " ,I.TXN_CODE, I.TXN_INIT_TIME, I.TXN_SYNC_TIME, I.AGENT_ID, I.DEVICE_ID, I.LOCATION_CODE, I.TXN_STATUS, I.TXN_ERR_CODE, I.TXN_ERR_MESSAGE "
	 * + " ,AUTH_STATUS " +
	 * " ,K.ENROLMENT_ID  KYC_ENROLMENT_ID,K.KYC_IMAGE_CUSTOMER " +
	 * " ,K.KYC_ID_1_IMAGE, K.KYC_ID_1_TYPE, K.KYC_ID_1_NUMBER, K.KYC_ID_1_PROOF_TYPE "
	 * +
	 * " ,K.KYC_ID_2_IMAGE, K.KYC_ID_2_TYPE, K.KYC_ID_2_NUMBER, K.KYC_ID_2_PROOF_TYPE "
	 * +
	 * " ,K.KYC_ID_3_IMAGE ,K.KYC_ID_3_TYPE ,K.KYC_ID_3_NUMBER ,K.KYC_ID_3_PROOF_TYPE "
	 * + " FROM srcode.MFI_cust_enrol_info I" +
	 * " LEFT OUTER JOIN srcode.MFI_cust_enrol_kyc K ON I.ENROLMENT_ID = K.ENROLMENT_ID"
	 * ;
	 */

	public static final String ENRCUS_QUERY_ENROLL_CUST_CODE_AVAILABLE = "SELECT 1 FROM srcode.iftb_enriched_enrol WHERE  UPPER(ENROL_CUSTADD_CODE) =  UPPER(:id)";
	/*
	 * public static final String QUERY_SELECT_BY_PK =
	 * "SELECT CUSTADD_CODE,CUST_TITLE,CUST_FNAME,CUST_MNAME,CUST_LNAME,CUST_GENDER,CUST_DOB,CUST_ADD1,CUST_ADD2,CUST_ADD3,CUST_PHN_NO,CUST_CITY FROM amtb_enrol_cust WHERE CUSTADD_CODE = :id"
	 * ;
	 */
	/*
	 * public static final String ENRCUS_QUERY_SELECT_BY_PK =
	 * "SELECT A.ENROLLMENT_ID,FIRST_NAME,LAST_NAME,MIDDLE_NAME,GENDER,DOB,ADDRESS1,ADDRESS2,EMAIL_ID,CONTACT_NO,COUNTRY,STATE,ZIP_CODE,CURRENCY,"
	 * +
	 * "RESIDENCE_TYPE,NATIONALITY,MARTIAL_STATUS,PROFESSION,PROFESSION_REMARK,ENROLL_DATE, "
	 * +
	 * "ENRICH_STAT,ACCOUNT_TYPE,ACCOUNT_TYPE_REMARK, E.CUST_ENRICH_HOMEBRANCH, E.CUST_ENRICH_CUSTCATEGORY, E.CUST_ENRICH_REL_OFFICER "
	 * +
	 * "FROM IFTB_CUSTOMER_INFO_DATA A LEFT OUTER JOIN IFTB_ENRICHED_ENROL E ON A.ENROLLMENT_ID = E.ENROL_CUSTADD_CODE "
	 * + "WHERE A.ENROLLMENT_ID = :id";
	 */

	public static final String ENRCUS_QUERY_SELECT_BY_PK = "SELECT ENROLMENT_ID,  WORKFLOW_Q_TYPE, FIRST_NAME, LAST_NAME, MIDDLE_NAME "
			+ " ,DOB ,GENDER ,RESIDENCE_TYPE ,NATIONALITY ,ADDRESS1 ,ADDRESS2 ,ADDRESS3 ,ADDRESS4,CITY ,STATE ,ZIP_CODE ,COUNTRY ,EMAIL_ID ,CONTACT_NO"
			+ " ,MARTIAL_STATUS, PROFESSION, PROFESSION_REMARK ,ACCOUNT_CATEGORY ,ACCOUNT_TYPE ,CURRENCY ,IS_ACTIVE ,MODULE_CODE "
			+ " ,TXN_CODE, TXN_INIT_TIME, TXN_SYNC_TIME,AGENT_ID,DEVICE_ID, LOCATION_CODE, TXN_STATUS, TXN_ERR_CODE, TXN_ERR_MESSAGE "
			+ " ,AUTH_STATUS "
			+ " ,GROUP_INDIVIDUAL_TYPE,TEMP_GROUP_ID,IS_KYC_ONLY,CUSTOMER_ID,POC "
			+ " ,IS_SENT_TO_CBS,CBS_RESPONSE_STAT,CBS_RESPONSE_TXN_REF_NO "
			+ " ,ENROLMENT_ID  KYC_ENROLMENT_ID,KYC_IMAGE_CUSTOMER "
			+ " ,KYC_ID_1_IMAGE, KYC_ID_1_TYPE, KYC_ID_1_NUMBER, KYC_ID_1_PROOF_TYPE "
			+ " ,KYC_ID_2_IMAGE, KYC_ID_2_TYPE, KYC_ID_2_NUMBER, KYC_ID_2_PROOF_TYPE "
			+ " ,KYC_ID_3_IMAGE ,KYC_ID_3_TYPE ,KYC_ID_3_NUMBER ,KYC_ID_3_PROOF_TYPE "
			+ " FROM srcode.ibs_cust_enrol_all_info where ENROLMENT_ID=:id";

	/*
	 * public static final String ENRCUS_MODIFY_GET_ALL_PK =
	 * "SELECT I.ENROLMENT_ID,  " +
	 * "  decode(I.workflow_q_type,'P','Processed','V','In Verify Q','E','In Enrich Q','A','Authorized') WORKFLOW_Q_TYPE, "
	 * + "  I.FIRST_NAME, I.LAST_NAME, I.MIDDLE_NAME " +
	 * " ,I.DOB ,I.GENDER ,I.RESIDENCE_TYPE ,I.NATIONALITY ,I.ADDRESS1 ,I.ADDRESS2,I.ADDRESS3 ,I.ADDRESS4 ,I.CITY ,I.STATE ,I.ZIP_CODE ,I.COUNTRY ,I.EMAIL_ID ,I.CONTACT_NO"
	 * +
	 * " ,I.MARTIAL_STATUS, I.PROFESSION, I.PROFESSION_REMARK ,I.ACCOUNT_CATEGORY ,I.ACCOUNT_TYPE ,I.CURRENCY ,I.IS_ACTIVE ,I.MODULE_CODE "
	 * +
	 * " ,I.TXN_CODE, I.TXN_INIT_TIME, I.TXN_SYNC_TIME, I.AGENT_ID, I.DEVICE_ID, I.LOCATION_CODE, I.TXN_STATUS, I.TXN_ERR_CODE, I.TXN_ERR_MESSAGE "
	 * + " ,AUTH_STATUS " +
	 * " ,GROUP_INDIVIDUAL_TYPE,TEMP_GROUP_ID,IS_KYC_ONLY,CUSTOMER_ID" +
	 * " ,decode(poc,'Y','Yes','N','No') poc " +
	 * " ,IS_SENT_TO_CBS,CBS_RESPONSE_TXN_REF_NO " +
	 * " ,decode(CBS_RESPONSE_STAT,'P','Processed succesfully','E','Processed with Errors','X','No Response from CBS') CBS_RESPONSE_STAT"
	 * + " ,K.ENROLMENT_ID  KYC_ENROLMENT_ID,K.KYC_IMAGE_CUSTOMER " +
	 * " ,K.KYC_ID_1_IMAGE, K.KYC_ID_1_TYPE, K.KYC_ID_1_NUMBER, K.KYC_ID_1_PROOF_TYPE "
	 * +
	 * " ,K.KYC_ID_2_IMAGE, K.KYC_ID_2_TYPE, K.KYC_ID_2_NUMBER, K.KYC_ID_2_PROOF_TYPE "
	 * +
	 * " ,K.KYC_ID_3_IMAGE ,K.KYC_ID_3_TYPE ,K.KYC_ID_3_NUMBER ,K.KYC_ID_3_PROOF_TYPE "
	 * + " FROM srcode.MFI_cust_enrol_info I" +
	 * " LEFT OUTER JOIN srcode.MFI_cust_enrol_kyc K ON I.ENROLMENT_ID = K.ENROLMENT_ID "
	 * + " WHERE I.ENROLMENT_ID = :id";
	 */

	public static final String ENRCUS_MODIFY_GET_ALL_PK = "SELECT I.ENROLMENT_ID,(case I.workflow_q_type when 'P' then 'Processed'"
			+ " when 'V' then 'In Verify Q' when 'E' then 'In Enrich Q'  when 'A' then 'Authorized' end) WORKFLOW_Q_TYPE,"
			+ " I.FIRST_NAME, I.LAST_NAME, I.MIDDLE_NAME ,I.DOB ,I.GENDER ,I.RESIDENCE_TYPE ,I.NATIONALITY ,I.ADDRESS1 ,"
			+ "I.ADDRESS2,I.ADDRESS3 ,I.ADDRESS4 ,I.CITY ,I.STATE ,I.ZIP_CODE ,I.COUNTRY ,I.EMAIL_ID ,I.CONTACT_NO, "
			+ "I.MARTIAL_STATUS, I.PROFESSION, I.PROFESSION_REMARK ,I.ACCOUNT_CATEGORY ,I.ACCOUNT_TYPE ,I.CURRENCY ,"
			+ "I.IS_ACTIVE ,I.MODULE_CODE ,I.TXN_CODE, I.TXN_INIT_TIME, I.TXN_SYNC_TIME, I.AGENT_ID, I.DEVICE_ID,"
			+ " I.LOCATION_CODE, I.TXN_STATUS, I.TXN_ERR_CODE, I.TXN_ERR_MESSAGE ,AUTH_STATUS ,GROUP_INDIVIDUAL_TYPE,"
			+ "TEMP_GROUP_ID,IS_KYC_ONLY,CUSTOMER_ID,(case poc when 'Y' then 'Yes' when 'N' then 'No' end) poc,"
			+ "IS_SENT_TO_CBS,CBS_RESPONSE_TXN_REF_NO,(case CBS_RESPONSE_STAT when 'P' then 'Processed succesfully' "
			+ "when 'E' then 'Processed with Errors' when 'X' then 'No Response from CBS' end ) CBS_RESPONSE_STAT, "
			+ "K.ENROLMENT_ID  KYC_ENROLMENT_ID,K.KYC_IMAGE_CUSTOMER ,K.KYC_ID_1_IMAGE, K.KYC_ID_1_TYPE, K.KYC_ID_1_NUMBER, "
			+ "K.KYC_ID_1_PROOF_TYPE ,K.KYC_ID_2_IMAGE, K.KYC_ID_2_TYPE, K.KYC_ID_2_NUMBER, K.KYC_ID_2_PROOF_TYPE, "
			+ "K.KYC_ID_3_IMAGE ,K.KYC_ID_3_TYPE ,K.KYC_ID_3_NUMBER ,K.KYC_ID_3_PROOF_TYPE"
			+ " FROM srcode.MFI_cust_enrol_info I ,srcode.MFI_cust_enrol_kyc K "
			+ "where I.ENROLMENT_ID = K.ENROLMENT_ID and I.ENROLMENT_ID = :id";

	public static final String ENRCUS_QUERY_UPDATE_ENRCH_STAT = " UPDATE srcode.IFTB_CUSTOMER_INFO_DATA SET enrich_stat='EN' WHERE ENROLMENT_ID = :id";

	public static final String ENRCUS_QUERY_UPDATE_CUSTINFO = "UPDATE srcode.MFI_cust_enrol_info "
			+ " SET  FIRST_NAME=:firstName, LAST_NAME=:lastName ,MIDDLE_NAME=:middleName "
			+ " , DOB =:dob ,GENDER = :gender  ,RESIDENCE_TYPE =:residentialType ,NATIONALITY=:nationality "
			+ " ,ADDRESS1=:address1 ,ADDRESS2=:address2, ADDRESS3=:address3, ADDRESS4=:address4, STATE =:state " // CITY
																													// =:city,
			+ " ,ZIP_CODE=:zipCode ,COUNTRY =:country,EMAIL_ID=:emailId ,CONTACT_NO=:contactNumber"
			+ " ,MARTIAL_STATUS =:martialStatus , PROFESSION=:profession , PROFESSION_REMARK=:professionRemark ,AUTH_STATUS = 'U',WORKFLOW_Q_TYPE = 'V' "
			+ " WHERE ENROLMENT_ID =:id ";

	public static final String ENRCUS_QUERY_UPDATE_BY_AUTH = "UPDATE srcode.MFI_cust_enrol_info SET AUTH_STATUS='A', "
			+ "WORKFLOW_Q_TYPE='A' WHERE ENROLMENT_ID= :id ";

	public static final String ENRCUS_QUERY_UPDATE_ENRCHEDENROLL = "UPDATE  srcode.MFI_cust_enrol_kyc SET "
			+ "  KYC_ID_1_TYPE=:kycId1Type, KYC_ID_1_NUMBER=:kycId1Number ,KYC_ID_1_PROOF_TYPE=:kycId1ProofType "
			+ " ,KYC_ID_2_TYPE=:kycId2Type, KYC_ID_2_NUMBER=:kycId2Number ,KYC_ID_2_PROOF_TYPE=:kycId2ProofType "
			+ " ,KYC_ID_3_TYPE=:kycId3Type, KYC_ID_3_NUMBER=:kycId3Number ,KYC_ID_3_PROOF_TYPE=:kycId3ProofType "
			+ "  WHERE ENROLMENT_ID =:kycId ";

	public static final String ENRCUS_QUERY_DELETE_ENRCHEDENROLL = "DELETE FROM srcode.MFI_cust_enrol_info WHERE ENROLMENT_ID = :id";

	public static final String ENRCUS_QUERY_UPDATE_BY_REJECT = "UPDATE srcode.MFI_cust_enrol_info SET WORKFLOW_Q_TYPE='E', "
			+ "AUTH_STATUS='U' WHERE ENROLMENT_ID= :id ";

	public static final String GET_BIOMATRIC_SELECT_PK = "SELECT RHLF_TMPLTDATA,RHRF_TMPLTDATA,RHMF_TMPLTDATA,RHIF_TMPLTDATA,RHTF_TMPLTDATA,"
			+ "LHLF_TMPLTDATA,LHRF_TMPLTDATA,LHMF_TMPLTDATA,LHIF_TMPLTDATA,LHTF_TMPLTDATA"
			+ ",RHLF_IMAGE_SCAN,RHRF_IMAGE_SCAN,RHMF_IMAGE_SCAN,RHIF_IMAGE_SCAN,RHTF_IMAGE_SCAN"
			+ ",LHLF_IMAGE_SCAN,LHRF_IMAGE_SCAN,LHMF_IMAGE_SCAN,LHIF_IMAGE_SCAN,LHTF_IMAGE_SCAN  "
			+ " FROM srcode.MFI_CUST_ENROL_BIOMETRIC WHERE ENROLMENT_ID= :id ";

	public static final String ENRCUS_GET_CHILD_GROUP = "SELECT ENROLMENT_ID,  WORKFLOW_Q_TYPE, FIRST_NAME, LAST_NAME, MIDDLE_NAME "
			+ " ,DOB ,GENDER ,RESIDENCE_TYPE ,NATIONALITY ,ADDRESS1 ,ADDRESS2 ,ADDRESS3 ,ADDRESS4 ,CITY ,STATE ,ZIP_CODE ,COUNTRY ,EMAIL_ID ,CONTACT_NO"
			+ " ,MARTIAL_STATUS, PROFESSION, PROFESSION_REMARK ,ACCOUNT_CATEGORY ,ACCOUNT_TYPE ,CURRENCY ,IS_ACTIVE ,MODULE_CODE "
			+ " ,TXN_CODE, TXN_INIT_TIME, TXN_SYNC_TIME,AGENT_ID,DEVICE_ID, LOCATION_CODE, TXN_STATUS, TXN_ERR_CODE, TXN_ERR_MESSAGE "
			+ " ,AUTH_STATUS "
			+ " ,GROUP_INDIVIDUAL_TYPE,TEMP_GROUP_ID,IS_KYC_ONLY,CUSTOMER_ID,POC "
			+ " ,IS_SENT_TO_CBS,CBS_RESPONSE_STAT,CBS_RESPONSE_TXN_REF_NO "
			+ " ,ENROLMENT_ID  KYC_ENROLMENT_ID,KYC_IMAGE_CUSTOMER "
			+ " ,KYC_ID_1_IMAGE, KYC_ID_1_TYPE, KYC_ID_1_NUMBER, KYC_ID_1_PROOF_TYPE "
			+ " ,KYC_ID_2_IMAGE, KYC_ID_2_TYPE, KYC_ID_2_NUMBER, KYC_ID_2_PROOF_TYPE "
			+ " ,KYC_ID_3_IMAGE ,KYC_ID_3_TYPE ,KYC_ID_3_NUMBER ,KYC_ID_3_PROOF_TYPE "
			+ "  FROM srcode.ibs_cust_enrol_all_info "
			+ "  where TEMP_GROUP_ID=:tempGroupId and poc='N' ORDER BY ENROLMENT_ID";
	
	public static final String LOV_QUERY_SELECT_BY_KYCID = "SELECT DISPLAY_VALUE FROM srcode.MFI_MBS_LOV_DISPLAY where "
			+ "INTERNAL_VALUE=:value and LOV_ID=:listName"; // Tag no : EGA-MN15-000018

	/* Enroll Customer Script End */

	/* Function Script Start */

	public static final String FUN_QUERY_UPDATE = "UPDATE srcode.MFI_FUNCTION SET BASE_FUNC=:baseFunc, FUNC_DESC=:funcDesc ,FUNC_COMMAND=:funcCommand"
			+ "where FUNC_ID=:id";

	public static final String FUN_QUERY_SELECT_FUNCTION = "SELECT RF.FUNC_ID, RF.BASE_FUNC, "
			+ "RF.FUNC_DESC, RF.FUNC_COMMAND "
			+ "FROM srcode.MFI_FUNCTION RF,srcode.MFI_ROLE_ENTITLEMENT RE WHERE RE.ROLE_ID = :roleId AND "
			+ "RF.FUNC_ID= RE.FUNC_ID";

	public static final String FUN_QUERY_SELECT_ALL = "SELECT FUNC_ID, BASE_FUNC, "
			+ "FUNC_DESC, FUNC_COMMAND FROM srcode.MFI_FUNCTION WHERE SYSTEM='I' ORDER BY BASE_FUNC ASC, FUNC_DESC ASC";

	public static final String GET_ROLE_FOR_IBS = "SELECT FUNC_ID, BASE_FUNC, "
			+ "FUNC_DESC, FUNC_COMMAND FROM srcode.MFI_FUNCTION where system=:roleType ORDER BY BASE_FUNC ASC, FUNC_DESC ASC";

	public static final String FUN_QUERY_INSERT = "INSERT INTO srcode.MFI_FUNCTION (FUNC_ID, BASE_FUNC, FUNC_DESC, FUNC_COMMAND) "
			+ "VALUES (:id, :baseFunc, :funcDesc, :funcCommand)";

	public static final String FUN_QUERY_SELECT_BY_PK = "SELECT FUNC_ID, BASE_FUNC, FUNC_DESC, FUNC_COMMAND "
			+ "FROM srcode.MFI_FUNCTION WHERE FUNC_ID = :id";

	/* Function Script End */

	/* List Value Script Start */

	public static final String LOV_QUERY_SELECT_BY_PK = "SELECT LIST_NAME, LIST_VALUE, DESN FROM "
			+ "srcode.MFI_LIST_VALUE WHERE LIST_NAME = :listName ORDER BY LIST_VALUE, DESN";

	public static final String LOV_QUERY_SELECT_BY_ID = "SELECT DESN FROM srcode.MFI_LIST_VALUE where "
			+ "LIST_VALUE=:value and LIST_NAME=:listName";

	/* List Value Script End */

	/* Loan Enrichment Script Start */

	public static final String TABLE_NAME_ENRICH = "srcode.MFI_loan_detail L ";

	public static final String QUERY_FRAG_SELECT_LOAN = " L.LOAN_AC_NO ,L.BRANCH_CODE, L.CUSTOMER_ID ,L.CREDIT_OFFICER_CODE, L.GROUP_ID ,L.GROUP_CODE,L.LOAN_STATUS, "
			+ " L.SANCTIONED_DATE ,L.LAST_DISBURSED_DATE ,L.DISBR_TYPE ,L.LOAN_AC_CCY ,L.IS_FULLY_DISBURSED ,L.SANCTIONED_PRINCIPAL_AMT , "
			+ " L.DISBURSED_PRINCIPAL_AMT ,L.INTEREST_RATE ,L.INTEREST_ACCRUED ,L.PRINCIPAL_AMT_REPAID ,L.PRINCIPAL_OUTSTANDING ,  "
			+ " L.LAST_REPAYMENT_DATE ,L.RECORD_STAT  ,L.CBS_UPLD_JOB_ID  ,L.SYNC_STATUS  ,L.SYNC_TIME  ,L.IS_ALLOCATED  ";

	/*
	 * public static final String LENC_QUERY_SELECT_ALL = "SELECT " +
	 * QUERY_FRAG_SELECT_LOAN //LoanJdbcDao.QUERY_FRAG_SELECT +
	 * ", E.LOAN_AC_NO, E.AGENT_ID ENRICH_AGENT_ID, A.FIRST_NAME ENRICH_FIRST_NAME "
	 * + " FROM " + TABLE_NAME_ENRICH +
	 * " LEFT OUTER JOIN srcode.MFI_LOAN_ENRICHMENT E ON L.LOAN_AC_NO = E.LOAN_AC_NO "
	 * + " LEFT OUTER JOIN srcode.MFI_AGENTS A ON E.AGENT_ID = A.AGENT_ID" +
	 * " ORDER BY L.LOAN_AC_NO";
	 */

	public static final String LENC_QUERY_SELECT_ALL = "SELECT * from srcode.MFI_LOAN_ENRICHMENT ";

	/*
	 * public static final String LENC_QUERY_SELECT_UNASSIGNED = "SELECT " +
	 * QUERY_FRAG_SELECT_LOAN //LoanJdbcDao.QUERY_FRAG_SELECT + " FROM " +
	 * TABLE_NAME_ENRICH + " WHERE  L.CREDIT_OFFICER_CODE IS NOT NULL" +
	 * " AND L.LOAN_AC_NO NOT IN (SELECT E.LOAN_AC_NO FROM srcode.MFI_LOAN_ENRICHMENT E)"
	 * + " ORDER BY L.LOAN_AC_NO";
	 */

	public static final String LENC_QUERY_SELECT_UNASSIGNED = "SELECT LOAN_AC_NO, AGENT_ID, LOCATION_CODE, ALLOCATION_BY, ALLOCATION_TIME  from srcode.MFI_LOAN_ENRICHMENT "
			// + " WHERE  AGENT_ID IS NULL"
			+ " ORDER BY LOAN_AC_NO";

	public static final String LENC_QUERY_INSERT_AGENTID = "UPDATE srcode.MFI_LOAN_ENRICHMENT SET AGENT_ID=:agentId "
			+ " ,ALLOCATION_BY=:allocateUser, ALLOCATION_TIME=:allocationTime WHERE LOAN_AC_NO = :loanAcNo ";

	public static final String LENC_QUERY_INSERT_ISALLOCATED = "UPDATE srcode.MFI_loan_detail SET IS_ALLOCATED='Y' "
			+ " WHERE LOAN_AC_NO = :loanAcNo ";

	/* Loan Enrichment Script End */

	/* Loan Script Start */

	public static final String LAC_TABLE_NAME = "IFTB_LOAN_DETAILS L ";

	public static final String LAC_QUERY_FRAG_SELECT = "L.LOAN_AC_NO, L.CUSTOMER_ID, L.CUSTOMER_NAME, L.LOCATION_NAME, L.LOCATION_ID, L.NEXT_REPAYMENT_DATE, "
			+ " L.OVERDUE_STATUS, L.LAST_DISBR_DATE, L.OVER_DUE_DATE, L.SANCTIONED_DATE, L.GROUP_FLAG, L.GROUP_NAME, L.LAST_REPAYMENT_DATE, L.DISBURSEMENT_STATUS, "
			+ " L.GROUP_ID,  L.AGENT_ID,L.SYNC_STATUS, L.CREDIT_OFFICER, L.AMOUNT_SANCTIONED, L.AMOUNT_DISBURSED, L.BRANCH_CODE, L.LOAN_AC_CCY";

	public static final String LAC_QUERY_SELECT_ALL = "SELECT "
			+ LAC_QUERY_FRAG_SELECT + " FROM srcode.IFTB_LOAN_DETAILS L "
			+ " ORDER BY LOAN_AC_NO";

	public static final String LAC_CUSTOMISE_QUERY_SELECT_ALL = "select * from srcode.MFI_loan_detail_list_v ORDER BY LOAN_AC_NO";

	public static final String LOAN_QUERY_ALLWHERE = "select * from srcode.MFI_loan_detail_list_v where ";

	public static final String LAC_QUERY_SELECT_BY_PK = "select * from srcode.MFI_loan_detail_v WHERE LOAN_AC_NO = :id";

	public static final String LAC_QUERY_SELECT_LOAN = "SELECT LN.LOAN_AC_NO, LN.SANCTIONED_DATE "
			+ "FROM srcode.IFTB_LOAN_DETAILS LN,IFTB_CUST_DETAIL CS WHERE LN.CUSTOMER_ID = CS.CUSTOMER_ID AND CS.CUSTOMER_ID= :customerId";

	public static final String LAC_QUERY_LOAN_DETAIL = "SELECT A.LOAN_AC_NO,A.CUSTOMER_ID, A.CUSTOMER_NAME,A.LOCATION_NAME,A.LOCATION_ID ,A.NEXT_REPAYMENT_DATE,A.OVERDUE_STATUS,"
			+ " A.LAST_DISBR_DATE,A.OVER_DUE_DATE,A.SANCTIONED_DATE,A.GROUP_FLAG,A.GROUP_NAME,A.LAST_REPAYMENT_DATE,A.DISBURSEMENT_STATUS,A.GROUP_ID,A.AMOUNT_DISBURSED,A.PRINC_OUTSTAND,"
			+ " A.AMOUNT_SANCTIONED,A.LOAN_AC_CCY,A.BRANCH_CODE  FROM srcode.IFTB_LOAN_DETAILS A,srcode.IFTB_LOAN_ENRICHMENT B  WHERE A.LOAN_AC_NO = B.LOAN_AC_NO AND A.SYNC_STATUS IN  (:status,:status2,:status3) LIMIT :batchSize  AND"
			+ " B.AGENT_ID =:agentId ";

	public static final String LAC_QUERY_DISBURSE_SCHDLE = "SELECT "
			+ "LOAN_AC_NO, " + "BRANCH_CODE, " + "COMPONENT_NAME, "
			+ "SCHEDULE_ST_DATE, " + "SCHEDULE_DUE_DATE, "
			+ "AMOUNT_TO_DISBR, " + "DTYPE, " + "MANUAL_AMT_DISBR, "
			+ "CUR_DISBR_AMT, " + "AMT_DISBURSED  "
			+ "FROM srcode.IFVW_MBS_LOAN_DISBURSEMENT  "
			+ "WHERE LOAN_AC_NO =:loanActNo ";

	public static final String LAC_QUERY_SHOULD_CHANGE_STATUS = ""
			+ "SELECT COUNT(*) FROM srcode.iftb_loan_details "
			+ "WHERE LOAN_AC_NO=:loanAccNo " + "AND (FLG_PART_PAYMNT=:flag "
			+ "OR FLG_PART_PAYMNT IS NULL)";
	// + "AND SYNC_STATUS != :status";

	public static final String LAC_QUERY_REPAY_SCHDLE = "SELECT LOAN_AC_NO,BRANCH_CODE,SETTLEMENT_CCY,COMPONENT_NAME,SCHEDULE_ST_DATE,SCHEDULE_DUE_DATE,AMOUNT_DUE,ADJ_AMOUNT,AMOUNT_SETTLED,AMOUNT_OVERDUE,ACCRUED_AMOUNT,LCY_EQUIVALENT"
			+ " FROM  srcode.IFVW_MBS_LOAN_REPAYMENT WHERE LOAN_AC_NO=:id ";

	public static final String LAC_QUERY_REPAY_LIQ = "SELECT LOAN_AC_NO,BRANCH_CODE,VALUE_DATE,EXECUTION_DATE,PAYMENT_STATUS,SETTLE_MODE,SETTLE_CCY"
			+ ",SETTLE_AMOUNT,EVENT_SEQ_NO  FROM srcode.IFTB_CL_LIQ WHERE LOAN_AC_NO=:loanActNo";

	public static final String LAC_QUERY_UPDATE = "UPDATE srcode.IFTB_LOAN_DETAILS SET SYNC_STATUS= :status WHERE LOAN_AC_NO IN (";

	public static final String QUERY_GET_LOAN_PAID_SCH = "SELECT * FROM srcode.MFI_MBS_LOAN_PAID_SCH_V WHERE AGENT_ID=:agentId AND LOCATION_CODE=:locCode and LOAN_AC_NO=:loanAcNo ";

	/* Loan Script End */

	/* Loan Payment Script Start */

	public static final String LPAY_QUERY_FRAG_SELECT = "L.LOAN_AC_NO, L.CUSTOMER_ID, L.CUSTOMER_NAME, L.LOCATION_NAME, L.LOCATION_ID, L.NEXT_REPAYMENT_DATE, "
			+ " L.OVERDUE_STATUS, L.DISBURSEMENT_DATE, L.OVER_DUE_DATE, L.SANCTIONED_DATE, L.GROUP_FLAG, L.GROUP_NAME, L.LAST_REPAYMENT_DATE, L.DISBURSEMENT_STATUS, "
			+ " L.GROUP_ID, L.AGENT_ID, L.SYNC_STATUS, L.CREDIT_OFFICER";

	public static final String LPAY_TABLE_NAME = "IFTB_LOAN_DETAILS L ";

	public static final String LPAY_QUERY_SELECT_BY_PK = "SELECT "
			+ LPAY_QUERY_FRAG_SELECT
			+ "  FROM srcode.IFTB_LOAN_DETAILS L WHERE LOAN_AC_NO = :id";

	/*
	 * public static final String LPAY_QUERY_SELECT_ALL =
	 * "SELECT LOAN_AC_NO,EXECUTION_DATE,SETTLE_CCY,SETTLE_AMOUNT FROM IFTB_CL_LIQ WHERE LOAN_AC_NO=:loanpayId"
	 * ;
	 */

	public static final String LPAY_QUERY_SELECT_ALL = "select * from  srcode.MFI_loan_detail_paid_sch_v WHERE LOAN_AC_NO=:loanpayId";

	/* Loan Payment Script End */

	/* LoanScheduleJdbcDao Script Start */

	public static final String LSCH_QUERY_FRAG_SELECT = "L.LOAN_AC_NO, L.CUSTOMER_ID, L.CUSTOMER_NAME, L.LOCATION_NAME, L.LOCATION_ID, L.NEXT_REPAYMENT_DATE, "
			+ " L.OVERDUE_STATUS, L.DISBURSEMENT_DATE, L.OVER_DUE_DATE, L.SANCTIONED_DATE, L.GROUP_FLAG, L.GROUP_NAME, L.LAST_REPAYMENT_DATE, L.DISBURSEMENT_STATUS, "
			+ " L.GROUP_ID, L.AGENT_ID, L.SYNC_STATUS, L.CREDIT_OFFICER";

	public static final String LSCH_TABLE_NAME = "IFTB_LOAN_DETAILS L ";

	/*
	 * public static final String LSCH_QUERY_SELECT_BY_PK = "SELECT " +
	 * LSCH_QUERY_FRAG_SELECT +
	 * "  FROM IFTB_LOAN_DETAILS L WHERE LOAN_AC_NO = :id";
	 */

	public static final String LSCH_QUERY_SELECT_BY_PK = "select * from srcode.MFI_loan_detail_sch_v WHERE LOAN_AC_NO = :id";

	/*
	 * public static final String LSCH_QUERY_SELECT_ALL =
	 * "SELECT LOAN_AC_NO, BRANCH_CODE, COMPONENT_NAME, SCHEDULE_TYPE, SCHEDULE_ST_DATE, SCHEDULE_DUE_DATE, AMOUNT_DUE, ADJ_AMOUNT, AMOUNT_SETTLED, "
	 * +
	 * " AMOUNT_OVERDUE, ACCRUED_AMOUNT, SETTLEMENT_CCY, LCY_EQUIVALENT FROM  IFTB_CLACCOUNT_SCHEDULES WHERE LOAN_AC_NO=:loanaccId "
	 * ;
	 */
	public static final String LSCH_QUERY_SELECT_ALL = "select * from srcode.MFI_loan_detail_sch_v WHERE LOAN_AC_NO=:loanaccId ";

	/* LoanScheduleJdbcDao Script End */

	/* NewDepositAccJdbcDao Script Start */
	public static final String NEWDEP_SELECT_QUEARY_ALL = "SELECT * FROM  srcode.MFI_mbs_req_dpnewac_v"; // ifvw_new_acc_req

	public static final String NEWDEP_SELECT_QUEARY_ALL_PK = "SELECT * FROM srcode.MFI_mbs_req_dpnewac_v where mbs_txn_id = :id ";
	/* NewDepositAccJdbcDao Script End */

	/* PigmyDepositJdbcDao Script Start */
	public static final String PIMYGDEP_QUERY_SELECT_ALL = "SELECT D.dep_ac_no,D.branch_code,D.customer_id,D.location_id,D.agent_id,D.dep_ccy,D.dep_open_date,D.dep_pay_freq,D.dep_inst_amt,D.dep_inst_amt_due,"
			+ "D.dep_int_rate,D.dep_maturity_amt,D.dep_maturity_date,D.total_inst_paid,D.total_int_accured,D.dep_last_inst_date,D.dep_overdue_status,D.dep_over_due_date,D.dep_over_due_amt,D.redemption_flag,"
			+ "D.redemption_payout_date,D.redemption_amount,D.sync_status,D.sync_time,D.record_stat,D.job_id,";

	public static final String PIMYGDEP_QUERY_SELECT_BY_PK = "dep_ac_no,branch_code,customer_id,location_id,agent_id,dep_ccy,dep_open_date,dep_pay_freq,dep_inst_amt,dep_inst_amt_due,dep_int_rate,dep_maturity_amt,dep_maturity_date,total_inst_paid,total_int_accured,dep_last_inst_date,dep_overdue_status,dep_over_due_date,dep_over_due_amt,redemption_flag,redemption_payout_date,redemption_amount,sync_status,sync_time,record_stat,job_id FROM srcode.IFTB_DEPOSIT_DETAILS WHERE dep_ac_no= :id ";

	public static final String PIMYGDEP_QUERY_PIGMY_DETAIL = "SELECT DEP_AC_NO,BRANCH_CODE,CUSTOMER_ID,LOCATION_ID,AGENT_ID,DEP_CCY,DEP_OPEN_DATE,DEP_PAY_FREQ,DEP_INST_AMT,DEP_INST_AMT_DUE,DEP_INT_RATE,DEP_MATURITY_AMT,DEP_MATURITY_DATE,"
			+ " TOTAL_INST_PAID,TOTAL_INT_ACCURED,DEP_LAST_INST_DATE,DEP_OVERDUE_STATUS,DEP_OVER_DUE_DATE,DEP_OVER_DUE_AMT,REDEMPTION_FLAG,REDEMPTION_PAYOUT_DATE,REDEMPTION_AMOUNT,NEXT_INST_DATE,"
			+ "DEP_TENURE,NO_OF_INST_DUE,TXN_TYPE  FROM srcode.IFVW_MBS_DEPOSIT_INFO WHERE SYNC_STATUS IN  (:status,:status2,:status3) AND AGENT_ID=:agentId LIMIT :batchSize";

	public static final String PIMYGDEP_CUSTOM_SELECT_ALL = PIMYGDEP_QUERY_SELECT_ALL
			+ "C.CUSTOMER_NAME,"
			+ "A.FIRST_NAME  FROM srcode.IFTB_DEPOSIT_DETAILS D, srcode.IFTB_CUST_DETAIL C,  srcode.AMTB_AGENTS A"
			+ " WHERE D.customer_id = C.CUSTOMER_ID(+) "
			+ " AND   D.AGENT_ID =  A.AGENT_ID(+) " + " ORDER BY DEP_AC_NO";

	public static final String PIMYGDEP_CUSTOM_SELECT_BY_PK = PIMYGDEP_QUERY_SELECT_ALL
			+ "C.CUSTOMER_NAME,"
			+ "A.FIRST_NAME  FROM srcode.IFTB_DEPOSIT_DETAILS D, srcode.IFTB_CUST_DETAIL C,  srcode.AMTB_AGENTS A"
			+ " WHERE D.dep_ac_no= :id"
			+ "	AND	  D.customer_id = C.CUSTOMER_ID(+) "
			+ " AND   D.AGENT_ID =  A.AGENT_ID(+) " + " ORDER BY DEP_AC_NO";

	public static final String PIMYGDEP_SELECT_VIEW_ALL = "SELECT * FROM srcode.MFI_deposit_detail_list_v";

	public static final String PIMYGDEP_SELECT_VIEW_BY_PK = "SELECT * FROM srcode.MFI_deposit_detail_v WHERE DEP_AC_NO=:id";

	public static final String DEPOSIT_QUERY_SELECT_BY_PK = "SELECT * FROM srcode.MFI_deposit_detail_v WHERE DEP_AC_NO=:id";
	/* PigmyDepositJdbcDao Script End */

	/* DepositActivityJdbcDao Script Start */

	public static final String DEPOSIT_ACTIVITY_BSCH_QUERY_SELECT_ALL = "SELECT * FROM srcode.MFI_deposit_activity_v WHERE DEP_AC_NO=:id";

	/* DepositActivityJdbcDao Script ends */

	/* PreeDepositJdbcDao Script Start */
	public static final String PREDEP_SELECT_QUEARY_ALL = "SELECT * FROM srcode.ifvw_req_dep_prepayment";

	public static final String PREDEP_SELECT_QUEARY_ALL_PK = "SELECT * FROM srcode.ifvw_req_dep_prepayment where REQ_ID=:id";

	/* PreeDepositJdbcDao Script End */

	/* RedemptionReqJdbcDao Script Start */
	public static final String REDEMPTREQ_SELECT_QUEARY_ALL = "SELECT * FROM srcode.MFI_mbs_req_dpredemption_v";

	public static final String REDEMPTREQ_SELECT_QUEARY_ALL_PK = "SELECT * FROM srcode.MFI_mbs_req_dpredemption_v where mbs_txn_id = :id";

	/* RedemptionReqJdbcDao Script End */

	/* ReferenceCodeDetailJdbcDao Script Start */
	public static final String REFCODEDET_QUERY_FRAG_SELECT = "L.REF_MASTER_CODE, L.CODE_DESC, L.PURPOSE, "
			+ "  L.IS_VALID, L.AUTH_STATUS ";

	public static final String REFCODEDET_TABLE_NAME = "srcode.MFI_REF_CODE_MASTER L ";

	public static final String REFCODEDET_QUERY_SELECT_BY_PK = "SELECT "
			+ REFCODEDET_QUERY_FRAG_SELECT
			+ "  FROM srcode.MFI_REF_CODE_MASTER L WHERE REF_MASTER_CODE = :id";

	public static final String REFCODEDET_QUERY_SELECT_ALL = "SELECT REF_MASTER_CODE,REF_DETAIL_CODE,DETAIL_CODE_DESC,TRANS_VALUE_EGA,TRANS_VALUE_INT,IS_VALID,CODE_SR_NO FROM srcode.MFI_REF_CODE_DETAIL WHERE REF_MASTER_CODE=:refCodeDetailId";

	public static final String REFCODEDET_QUERY_UPDATE_ROWEDIT = "UPDATE srcode.MFI_REF_CODE_DETAIL SET  "
			+ "DETAIL_CODE_DESC=:detailCodeDesc, TRANS_VALUE_EGA=:transValueEga, "
			+ "TRANS_VALUE_INT=:transValueInt, IS_VALID=:isValidText, CODE_SR_NO=:codeSrNo WHERE REF_MASTER_CODE = :refMasterCode ";

	public static final String REFCODEDET_QUERY_INSERT = "INSERT INTO srcode.MFI_REF_CODE_DETAIL (REF_MASTER_CODE,REF_DETAIL_CODE,DETAIL_CODE_DESC,TRANS_VALUE_EGA,TRANS_VALUE_INT,IS_VALID,CODE_SR_NO) "
			+ "VALUES (:id, :refDetailCode, :detailCodeDesc, :transValueEga, :transValueInt, :validRef, :codeSrNo)";

	/* ReferenceCodeDetailJdbcDao Script End */

	/* ReferenceCodeJdbcDao Script Start */
	public static final String REFCODE_QUERY_FRAG_SELECT = "L.REF_MASTER_CODE, L.CODE_DESC, L.PURPOSE, "
			+ "  L.IS_VALID, L.AUTH_STATUS ";

	public static final String REFCODE_QUERY_SELECT_ALL = "SELECT "
			+ REFCODE_QUERY_FRAG_SELECT + " FROM srcode.MFI_REF_CODE_MASTER L "
			+ " ORDER BY REF_MASTER_CODE";

	public static final String REFCODE_QUERY_SELECT_BY_PK = "SELECT REF_MASTER_CODE, CODE_DESC, PURPOSE, IS_VALID, "
			+ " AUTH_STATUS FROM srcode.MFI_REF_CODE_MASTER WHERE REF_MASTER_CODE = :id";

	public static final String REFCODE_QUERY_UPDATE_BY_AUTH = "UPDATE srcode.MFI_REF_CODE_MASTER SET AUTH_STATUS='A' WHERE REF_MASTER_CODE=:id";

	public static final String REFCODE_QUERY_INSERT = "INSERT INTO srcode.MFI_REF_CODE_MASTER (REF_MASTER_CODE,CODE_DESC,PURPOSE,IS_VALID) "
			+ "VALUES (:id, :codeDesc, :purpose, :validRef)";

	public static final String REFCODE_QUERY_UPDATE = "UPDATE srcode.MFI_REF_CODE_MASTER SET REF_MASTER_CODE=:id, "
			+ "CODE_DESC=:codeDesc, PURPOSE=:purpose, IS_VALID=:validRef, AUTH_STATUS=:authStatus where REF_MASTER_CODE=:id";

	/* ReferenceCodeJdbcDao Script End */

	/* RepaymentTxnJdbcDao Script Start */
	/*
	 * public static final String REPTXN_QUERY_SELECT_ALL =
	 * "SELECT TXN_ID, TXN_NARRATIVE, TXN_AMOUNT, REPAYMENT_INST FROM"
	 * +"IFTB_REPAYMENTS";
	 * 
	 * public static final String REPTXN_QUERY_SELECT_ALL_REPAY =
	 * "SELECT R.TXN_ID, R.TXN_NARRATIVE, R.TXN_AMOUNT, R.REPAYMENT_INST," +
	 * " T.TXN_TIMESTAMP, T.TXN_TYPE, A.FIRST_NAME, A.LAST_NAME, T.LOAN_AC_NO, T.SYNC_TIME, C.CUSTOMER_NAME,"
	 * +
	 * " T.DEVICE_ID, T.AUTH_STATUS ,T.TXN_STATUS, T.TXN_CCY FROM IFTB_REPAYMENT R LEFT OUTER JOIN IFTB_TRANSACTIONS T "
	 * +
	 * " ON T.TXN_ID=:id LEFT OUTER JOIN IFTB_CUST_DETAIL C ON C.CUSTOMER_ID=T.CUSTOMER_ID LEFT OUTER JOIN "
	 * +
	 * " AMTB_AGENTS A ON A.AGENT_ID=T.AGENT_ID and R.TXN_ID=:id1 where R.TXN_ID=:id2"
	 * ;
	 */
	public static final String REPTXN_QUERY_SELECT_ALL = "SELECT MBS_TXN_ID, AGENDA_ID, SEQ_NO, TXN_CODE, CBS_AC_REF_NO,BRANCH_CODE, "
			+ " CUSTOMER_ID,CUSTOMER_FULL_NAME,AGENT_ID,AGENT_NAME,LOCATION_CODE,LOCATION_DESC,REPAYMENT_AMOUNT_DUE,SETTLED_AMOUNT,TXN_NARRATIVE, "
			+ " TXN_INIT_TIME,TXN_SYNC_TIME,TXN_STATUS_DESC, GENERATED_SMS, SMS_MOBILE_NO, SMS_CONTENT, GENERATED_REVR, FULL_PART_IND, SYNC_TYPE FROM srcode.MFI_MBS_TXN_LNREPAY_V WHERE MBS_TXN_ID = :id";//For Tag No : EGA-MN15-000020 Starts

	public static final String REPTXN_QUERY_SELECT_ALL_REPAY = "SELECT MBS_TXN_ID, AGENDA_ID, SEQ_NO, TXN_CODE, CBS_AC_REF_NO,BRANCH_CODE, "
			+ " CUSTOMER_ID,CUSTOMER_FULL_NAME,AGENT_ID,AGENT_NAME,LOCATION_CODE,LOCATION_DESC,REPAYMENT_AMOUNT_DUE,SETTLED_AMOUNT,TXN_NARRATIVE, "
			+ " TXN_INIT_TIME,TXN_SYNC_TIME,TXN_STATUS_DESC,TXN_ERR_CODE,TXN_ERR_MESSAGE, GENERATED_SMS, SMS_MOBILE_NO, SMS_CONTENT, GENERATED_REVR, FULL_PART_IND, SYNC_TYPE FROM srcode.MFI_MBS_TXN_LNREPAY_V WHERE MBS_TXN_ID = :id";//For Tag No : EGA-MN15-000020 Starts

	public static final String CHILDREPAY_QUERY_SELECT_ALL = "select * from srcode.MFI_loan_detail where parent_loan_ac_no = :cbsAcRefNo ";

	/* RepaymentTxnJdbcDao Script End */

	/* PrePaymentJdbcDao Script Start */
	public static final String PREPAY_QUERY_SELECT_ALL = "SELECT MBS_TXN_ID, AGENDA_ID, SEQ_NO, TXN_CODE, CBS_AC_REF_NO,BRANCH_CODE, "
			+ " CUSTOMER_ID,CUSTOMER_FULL_NAME,AGENT_ID,AGENT_NAME,LOCATION_CODE,LOCATION_DESC,AMOUNT_TO_BE_PREPAID,PAID_AMOUNT,TXN_NARRATIVE, "
			+ " TXN_INIT_TIME,TXN_SYNC_TIME,TXN_STATUS_DESC,TXN_ERR_CODE,TXN_ERR_MESSAGE,GENERATED_SMS, SMS_MOBILE_NO, SMS_CONTENT, GENERATED_REVR, "
			+ " FULL_PART_IND, SYNC_TYPE FROM srcode.MFI_MBS_TXN_LNPREPAY_V WHERE MBS_TXN_ID = :id";// For Tag No : EGA-MN15-000020

	public static final String PREPAY_QUERY_SELECT_ALLTXN = "SELECT MBS_TXN_ID, AGENDA_ID, SEQ_NO, TXN_CODE, CBS_AC_REF_NO,BRANCH_CODE, "
			+ " CUSTOMER_ID,CUSTOMER_FULL_NAME,AGENT_ID,AGENT_NAME,LOCATION_CODE,LOCATION_DESC,AMOUNT_TO_BE_PREPAID,PAID_AMOUNT,TXN_NARRATIVE, "
			+ " TXN_INIT_TIME,TXN_SYNC_TIME,TXN_STATUS_DESC,TXN_ERR_CODE,TXN_ERR_MESSAGE,GENERATED_SMS, SMS_MOBILE_NO, SMS_CONTENT, GENERATED_REVR, "
			+ " FULL_PART_IND, SYNC_TYPE FROM srcode.MFI_MBS_TXN_LNPREPAY_V WHERE MBS_TXN_ID = :id"; //For Tag No : EGA-MN15-000020
	/* PrePaymentJdbcDao Script Start */

	/* RoleJdbcDao Script Start */

	public static final String ROLE_QUERY_UPDATE = "UPDATE srcode.MFI_ROLES SET ROLE_NAME=:roleName, ROLE_DESC=:roleDesc, "
			+ "AUTH_STATUS=:authStatus, ROLE_STATUS=:roleStatus, ROLE_IBS_MBS=:roleType where ROLE_ID=:id";

	public static final String ROLE_QUERY_SELECT_ALL = "SELECT ROLE_ID, ROLE_NAME, ROLE_DESC, AUTH_STATUS, ROLE_STATUS, ROLE_IBS_MBS "
			+ "FROM srcode.MFI_ROLES  WHERE ROLE_ID!='ROL00000' AND ROLE_IBS_MBS='I' ORDER BY ROLE_ID";// NOT
																										// ACCESS
																										// SUPER
																										// ROLE
	public static final String ROLE_QUERY_INSERT = "INSERT INTO srcode.MFI_ROLES (ROLE_ID, ROLE_NAME, ROLE_DESC, AUTH_STATUS, ROLE_STATUS, ROLE_IBS_MBS) "
			+ "VALUES (:id, :roleName, :roleDesc, :authStatus, :roleStatus, :roleType)";

	public static final String ROLE_QUERY_SELECT_BY_PK = "SELECT ROLE_ID, ROLE_NAME, ROLE_DESC, AUTH_STATUS, ROLE_STATUS, ROLE_IBS_MBS "
			+ "FROM srcode.MFI_ROLES WHERE ROLE_ID = :id ORDER BY  ROLE_ID";

	public static final String ROLE_QUERY_INSERT_ROLE_ENTITLEMENTS = "INSERT INTO srcode.MFI_ROLE_ENTITLEMENT (ROLE_ID, FUNC_ID) "
			+ "VALUES (:roleId, :functionId)";

	public static final String ROLE_QUERY_DELETE_ROLE_ENTITLEMENTS = "DELETE FROM srcode.MFI_ROLE_ENTITLEMENT WHERE ROLE_ID=:roleId";

	public static final String ROLE_QUERY_UPDATE_BY_AUTH = "UPDATE srcode.MFI_ROLES SET AUTH_STATUS='A' WHERE ROLE_ID=:id";

	public static final String ROLE_QUERY_ROLE_AUTO_ID = "SELECT MAX(ROLE_ID)ROLE_ID FROM srcode.MFI_ROLES";

	public static final String ROLE_QUERY_DELETE = "UPDATE srcode.MFI_ROLES SET AUTH_STATUS=(select LIST_VALUE FROM srcode.MFI_LIST_VALUE "
			+ "WHERE DESN='Inactive' AND LIST_NAME='deviceStatus' and STATUS='Y') WHERE ROLE_ID=:id";

	public static final String ROLE_QUERY_SELECT_USER_ROLES = "SELECT AR.ROLE_ID, AR.ROLE_NAME , AR.ROLE_DESC, AR.AUTH_STATUS, AR.ROLE_STATUS, AR.ROLE_IBS_MBS"
			+ " FROM srcode.MFI_ROLES AR, srcode.MFI_USER_ROLES AUR "
			+ " WHERE AUR.ROLE_ID=AR.ROLE_ID AND AUR.USER_ID= :userId";

	public static final String ROLE_QUERY_ROLE_NAME_AVAILABLE = "SELECT 1 FROM srcode.MFI_ROLES WHERE  UPPER(ROLE_NAME) =  UPPER(:roleName)";

	public static final String ROLE_QUERY_ROLE_NAME_COUNT = "SELECT COUNT(ROLE_NAME) FROM srcode.MFI_ROLES WHERE UPPER(ROLE_NAME) = UPPER(:rname)";

	// EGA-MN15-000001 -->point:2 MBS role are being displayed in the IBS user
	// maintenance .This should not be allowed.

	public static final String ROLE_QUERY_AUTHORIZED_ROLES = "SELECT ROLE_ID, ROLE_NAME, ROLE_DESC, AUTH_STATUS, ROLE_STATUS, ROLE_IBS_MBS "
			+ "FROM srcode.MFI_ROLES WHERE AUTH_STATUS='A' AND ROLE_STATUS='A' AND ROLE_IBS_MBS='I' AND ROLE_ID!='ROL00000' ORDER BY ROLE_ID ";// NOT
	// ACCESS
	// SUPER
	// ROLE
	// EGA-MN15-000001 -->point:2 end:

	public static final String ROLE_QUERY_AUDIT_VERSION = "SELECT MAX(VERSION_NO) FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID=:id AND CHECKER_ID IS NOT NULL";

	public static final String ROLE_QUERY_DELETE_AUDIT = "DELETE FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID = :id";

	public static final String ROLE_QUERY_HARD_DELETE = "DELETE FROM srcode.MFI_ROLES WHERE ROLE_ID = :id";

	public static final String ROLE_QUERY_DELETE_ROLE_ENTITLEMENT = "DELETE FROM  srcode.MFI_ROLE_ENTITLEMENT WHERE ROLE_ID = :id";

	// For ModifyUniqueId
	public static final String ROLE_QUERY_ROLE_STATUS_TO_INACTIVE = "select 1 from srcode.MFI_USERS WHERE USER_ID IN (select USER_ID  from srcode.MFI_USER_ROLES "
			+ "WHERE ROLE_ID = :roleId ) and  user_status not in ('D','I')";

	public static final String ROLE_QUERY_AUTHORIZED_ROLES_MBS = "SELECT ROLE_ID, ROLE_NAME, ROLE_DESC, AUTH_STATUS, ROLE_STATUS, ROLE_IBS_MBS "
			+ "FROM srcode.MFI_ROLES WHERE AUTH_STATUS='A' AND ROLE_STATUS='A' AND ROLE_IBS_MBS='M' ORDER BY ROLE_ID ";

	public static final String ROLE_QUERY_SELECT_USER_ROLES_FOR_MBS = "SELECT AR.ROLE_ID, AR.ROLE_NAME , AR.ROLE_DESC, AR.AUTH_STATUS, AR.ROLE_STATUS, AR.ROLE_IBS_MBS"
			+ " FROM srcode.MFI_ROLES AR, srcode.MFI_AGENT_ROLES AUR "
			+ " WHERE AUR.ROLE_ID=AR.ROLE_ID AND AUR.AGENT_ID= :userId";

	public static final String ROLE_QUERY_ROLE_ENTITLE = "SELECT 1 FROM srcode.MFI_ROLE_ENTITLEMENT WHERE ROLE_ID=:roleId and FUNC_ID=:functionId";

	/* RoleJdbcDao Script End */

	/* SystemParameterJdbcDao Script Start */

	public static final String SYSPARAM_QUERY_SELECT_BY_PK = "SELECT PARAM_NAME, PARAM_TEXT,PARAM_TYPE, PARAM_VALUE, EDITABLE, COMPONENTS FROM srcode.MFI_SYS_PARAMETERS where PARAM_NAME = :paramName";

	public static final String SYSPARAM_QUERY_SELECT_ALL = "SELECT PARAM_NAME,PARAM_TEXT,PARAM_TYPE,PARAM_VALUE,EDITABLE,COMPONENTS FROM srcode.MFI_SYS_PARAMETERS ORDER BY PARAM_NAME";

	public static final String SYSPARAM_QUERY_UPDATE = "UPDATE srcode.MFI_SYS_PARAMETERS SET PARAM_VALUE = :paramValue "
			+ " where PARAM_NAME= :paramName";

	public static final String SYSPARAM_QUERY_SELECT_PARAM_TYPE = "SELECT PARAM_TYPE FROM srcode.MFI_SYS_PARAMETERS WHERE PARAM_NAME = :paramName";

	public static final String SYSPARAM_QUERY_SELECT_PARAMVALUE = "SELECT PARAM_VALUE FROM srcode.MFI_SYS_PARAMETERS WHERE PARAM_NAME = :paramName";

	public static final String SYSPARAM_QUERY_SELECT_CHECKINUSER = "SELECT PARAM_VALUE FROM srcode.MFI_SYS_PARAMETERS WHERE PARAM_NAME='CONSOLE_CHECKEDIN_USER'";

	/* SystemParameterJdbcDao Script End */

	/* TransactionJdbcDao Script Start */

	public static final String TRANS_QUERY_SELECT_BY_PK = "SELECT TXN_ID, SESSION_ID, STATUS FROM srcode.IFTB_TRANSACTION_STATUS "
			+ "WHERE TXN_ID = :id AND STATUS ='RECEIVED' ";

	public static final String TRANS_QUERY_INSERT = "INSERT INTO srcode.IFTB_TRANSACTION_STATUS (TXN_ID, SESSION_ID, STATUS) "
			+ "VALUES (:txnId, :sessionId, 'PENDING')";

	public static final String TRANS_QUERY_INSERT_TRANS = "INSERT INTO srcode.IFTB_TRANSACTIONS (TXN_ID, TXN_TIMESTAMP, TXN_TYPE, "
			+ "AGENT_ID,LOAN_AC_NO,CUSTOMER_ID,DEVICE_ID,AUTH_STATUS,SYNC_TIME,TXN_STATUS,TXN_AMOUNT,TXN_CCY,BRANCH_CODE)"
			+ " VALUES (:txnId,:txnTimestamp, :txnType, :agentId, :loanAcNo, :customerId, :deviceId, :authStatus, :syncTime, "
			+ ":txnStatus ,:txnAmount,:txnCcy,:branchCode)";

	public static final String TRANS_QUERY_INSERT_REPAY = " INSERT INTO srcode.IFTB_REPAYMENT (TXN_ID, TXN_NARRATIVE, TXN_AMOUNT,"
			+ "REPAYMENT_INST,TXN_CCY) VALUES (:txnId,:txnNarrative, :txnAmount, :repaymentInst,:txnCcy)";

	public static final String TRANS_QUERY_INSERT_DISBURSE = " INSERT INTO srcode.IFTB_DISBURSEMENT (TXN_ID, TXN_NARRATIVE,TXN_AMOUNT,TXN_CCY)"
			+ "VALUES (:txnId,:txnNarrative, :txnAmount,:txnCcy)";

	public static final String TRANS_QUERY_UPDATE_TXNSTATUS = "UPDATE srcode.IFTB_TRANSACTION_STATUS SET STATUS=:status1 WHERE TXN_ID=:id AND STATUS=:status ";

	public static final String TRANS_QUERY_UPDATE_SCH_REPAY_TXN_AMOUNT = "UPDATE srcode.IFTB_CLAC_SCH_SETTLEMENT "
			+ "SET    AMOUNT_SETTLED= nvl(AMOUNT_SETTLED,0) + :txnAmount "
			+ "WHERE  LOAN_AC_NO=:id "
			+ "AND    BRANCH_CODE=:txnBranchCode "
			+ "AND    SETTLEMENT_CCY=:txnCcy "
			// +"AND    COMPONENT_NAME=:txnComponentName "
			+ "AND    SCHEDULE_ST_DATE = TO_DATE (:txnSchStDate, 'yyyy-mm-dd') "
			+ "AND    SCHEDULE_DUE_DATE = TO_DATE (:txnSchDueDate, 'yyyy-mm-dd')";

	// Nirmal kanna S Added
	public static final String TRANS_QUERY_COUNT_SCH_REPAY_TXN_AMOUNT = "SELECT COUNT(*) FROM srcode.IFTB_CLAC_SCH_SETTLEMENT "
			+ "WHERE  LOAN_AC_NO=:id "
			+ "AND    BRANCH_CODE=:txnBranchCode "
			+ "AND    SETTLEMENT_CCY=:txnCcy "
			// +"AND    COMPONENT_NAME=:txnComponentName "
			+ "AND    SCHEDULE_ST_DATE = TO_DATE (:txnSchStDate, 'yyyy-mm-dd') "
			+ "AND    SCHEDULE_DUE_DATE = TO_DATE (:txnSchDueDate, 'yyyy-mm-dd')";
	/* nambiAK Vikash */
	// public static final String QUERY_UPDATE_SCH_DISB_TXN_AMOUNT =
	// "UPDATE IFTB_DISB_SETTLEMENT SET AMT_SETTLED=:txnAmount WHERE LOAN_AC_NO=:id AND BRANCH_CODE=:branchCode";

	/**
	 * Shabu - Start Bug: 300
	 * */
	public static final String TRANS_QUERY_UPDATE_SCH_DISB_TXN_AMOUNT = "UPDATE srcode.IFTB_DISB_SETTLEMENT "
			+ "SET    AMT_SETTLED= nvl(AMT_SETTLED,0) + :txnAmount "
			+ "WHERE  LOAN_AC_NO=:id "
			+ "AND    BRANCH_CODE=:txnBranchCode "
			// +"AND    COMPONENT_NAME=:txnComponentName "
			+ "AND    SCHEDULE_ST_DATE = TO_DATE (:txnSchStDate, 'yyyy-mm-dd') "
			+ "AND    SCHEDULE_DUE_DATE = TO_DATE (:txnSchDueDate, 'yyyy-mm-dd')";

	// Nirmal kanna S Added
	public static final String TRANS_QUERY_COUNT_SCH_DISB_TXN_AMOUNT = "SELECT COUNT(*) FROM srcode.IFTB_DISB_SETTLEMENT "
			+ "WHERE  LOAN_AC_NO=:id "
			+ "AND    BRANCH_CODE=:txnBranchCode "
			// +"AND    COMPONENT_NAME=:txnComponentName "
			+ "AND    SCHEDULE_ST_DATE = TO_DATE (:txnSchStDate, 'yyyy-mm-dd') "
			+ "AND    SCHEDULE_DUE_DATE = TO_DATE (:txnSchDueDate, 'yyyy-mm-dd')";

	public static final String TRANS_QUERY_PARTIAL_LOAN_PAYMNT = "SELECT COUNT(*) FROM srcode.IFTB_CLAC_SCH_SETTLEMENT "
			+ "WHERE LOAN_AC_NO=:id "
			+ "AND  BRANCH_CODE=:txnBranchCode "
			+ "AND  SETTLEMENT_CCY=:txnCcy "
			// +"AND  COMPONENT_NAME=:txnComponentName  "
			+ "AND  SCHEDULE_ST_DATE = TO_DATE (:txnSchStDate, 'yyyy-mm-dd')  "
			+ "AND  SCHEDULE_DUE_DATE = TO_DATE (:txnSchDueDate, 'yyyy-mm-dd')  "
			+ "AND  AMOUNT_DUE > AMOUNT_SETTLED";

	/*
	 * public static final String QUERY_UPDATE_LOAN_STATUS
	 * ="UPDATE IFTB_LOAN_DETAILS  " +" SET SYNC_STATUS =:syncStatus,   "
	 * +"SYNC_TIME=:syncTime   " +"WHERE  LOAN_AC_NO=:loanAccNo";
	 */

	public static final String TRANS_QUERY_UPDATE_PART_APYMNT_FLG = "UPDATE srcode.IFTB_LOAN_DETAILS  "
			+ " SET FLG_PART_PAYMNT =:flag " + "WHERE  LOAN_AC_NO=:loanAccNo ";
	/* TransactionJdbcDao Script End */

	/* UserJdbcDao Script Start */
	// Bug:EGALITE-203 start
	/*
	 * public static final String USER_QUERY_INSERT =
	 * "INSERT INTO srcode.MFI_USERS (USER_ID, FIRST_NAME, LAST_NAME, BRANCH_CODE,"
	 * +
	 * " PASSWORD,USER_TYPE,USER_STATUS,START_DATE,END_DATE,AUTH_STATUS, NO_OF_FAILED_LOGINS,CBS_CO_CODE) VALUES "
	 * +
	 * " (:id, :firstName, :lastName,:branchCode, :password, :userType, 'F', :startDate,"
	 * + " :endDate, :authStatus, 0, :cbsCoCode)";
	 */

	public static final String USER_QUERY_INSERT = "INSERT INTO srcode.MFI_USERS (USER_ID, FIRST_NAME, LAST_NAME, BRANCH_CODE,"
			+ " PASSWORD,USER_TYPE,USER_STATUS,START_DATE,END_DATE,AUTH_STATUS, NO_OF_FAILED_LOGINS,CBS_CO_CODE) VALUES "
			+ " (:id, :firstName, :lastName,:branchCode, :password, :userType, :userStatus, :startDate,"
			+ " :endDate, :authStatus, 0, :cbsCoCode)";
	// Bug:EGALITE-203 end
	public static final String USER_QUERY_SELECT_ALL = "SELECT USER_ID, FIRST_NAME, LAST_NAME, BRANCH_CODE,"
			+ " PASSWORD, USER_TYPE, USER_STATUS, START_DATE, END_DATE, AUTH_STATUS, LAST_LOGIN_DATE, CBS_CO_CODE FROM srcode.MFI_USERS WHERE USER_STATUS IN ('A','I','L','F') "
			+ "AND USER_ID!='SU' ORDER BY USER_ID";

	public static final String USER_QUERY_SELECT_BY_PK = "SELECT USER_ID, FIRST_NAME, LAST_NAME, BRANCH_CODE,"
			+ " PASSWORD, USER_TYPE, USER_STATUS, START_DATE, END_DATE, AUTH_STATUS,LAST_LOGIN_DATE, CBS_CO_CODE FROM srcode.MFI_USERS WHERE USER_ID = :id";

	public static final String USER_QUERY_USER_ENTITLEMENTS = "SELECT DISTINCT FUNC_COMMAND ENTITLEMENT FROM "
			+ "srcode.MFI_FUNCTION WHERE FUNC_ID IN (SELECT FUNC_ID FROM srcode.MFI_ROLE_ENTITLEMENT WHERE ROLE_ID IN "
			+ "(SELECT ROLE_ID FROM srcode.MFI_USER_ROLES WHERE USER_ID = :id))"; // ///
																					// User
																					// Entitlement

	public static final String USER_QUERY_USER_ID_AVAILABLE = "SELECT 1 FROM srcode.MFI_USERS WHERE upper(USER_ID) = upper(:id)";

	public static final String USER_QUERY_UPDATE_BY_AUTH = "UPDATE srcode.MFI_USERS SET AUTH_STATUS = 'A' WHERE USER_ID = :id";

	public static final String USER_QUERY_UPDATE = "UPDATE srcode.MFI_USERS SET FIRST_NAME = :firstName, LAST_NAME = :lastName, BRANCH_CODE = :branchCode,"
			+ " USER_TYPE = :userType, USER_STATUS = :userStatus, START_DATE = :startDate,"
			+ " END_DATE = :endDate, AUTH_STATUS = :authStatus, CBS_CO_CODE = :cbsCoCode where USER_ID=:id";

	public static final String USER_QUERY_INSERT_ROLES_USERS = "INSERT INTO srcode.MFI_USER_ROLES (USER_ID, ROLE_ID) VALUES (:userId, :roleId)";

	public static final String USER_QUERY_DELETE_ROLES_USERS = "DELETE FROM srcode.MFI_USER_ROLES WHERE USER_ID= :userId";

	public static final String USER_QUERY_AUDIT_VERSION = "SELECT MAX(VERSION_NO) FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID=:id ";

	public static final String USER_QUERY_DELETE = "DELETE FROM srcode.MFI_USERS WHERE USER_ID = :id";

	public static final String USER_QUERY_DELETE_AUDIT = "DELETE FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID = :id";

	public static final String USER_QUERY_CREDIT_OFFICERS = "SELECT USER_ID, FIRST_NAME, LAST_NAME, BRANCH_CODE, USER_TYPE, "
			+ " PASSWORD, USER_STATUS, USER_TYPE_IDENTIFIER START_DATE, END_DATE, AUTH_STATUS, LAST_LOGIN_DATE, CBS_CO_CODE FROM srcode.MFI_USERS "
			+ " WHERE USER_STATUS IN ('A') AND USER_TYPE IN ('1') AND AUTH_STATUS = 'A' AND USER_ID NOT IN('SU') ORDER BY USER_ID";

	/* EGA-MN15-000001 START --Point :1 */
	public static final String USER_QUERY_CBSCOCODE_AVAILABLE = "SELECT 1 FROM srcode.MFI_USERS WHERE upper(CBS_CO_CODE) = upper(:id)";
	/* EGA-MN15-000001 END --Point :1 */

	public static final String USER_QUERY_CBSCOCODE_LOV = "SELECT DL_VALUE, DL_DESC "
			+ "FROM srcode.MFI_CBS_DROP_LIST WHERE DL_VALUE NOT IN(SELECT CBS_CO_CODE AS DL_VALUE FROM srcode.MFI_USERS WHERE CBS_CO_CODE IS NOT NULL) "
			+ "AND BRANCH_CODE='000' and DL_TYPE='CO' AND  AUTH_STATUS = 'A' AND  IS_ACTIVE = 'A'";

	public static final String QRY_CBS_CREDIT_OFFICER = "SELECT DL_VALUE, DL_DESC "
			+ "FROM srcode.MFI_CBS_DROP_LIST WHERE BRANCH_CODE='000' and DL_TYPE='CO' AND  AUTH_STATUS = 'A' AND  IS_ACTIVE = 'A'";

	public static final String QRY_CBS_BRANCH_CODE = "SELECT DL_VALUE, DL_DESC "
			+ "FROM srcode.MFI_CBS_DROP_LIST WHERE BRANCH_CODE='000' and DL_TYPE='BR' AND  AUTH_STATUS = 'A' AND  IS_ACTIVE = 'A'";

	public static final String USER_QUERY_BRANCHCODE_LOV = "SELECT DL_VALUE, DL_DESC "
			+ "FROM srcode.MFI_CBS_DROP_LIST WHERE DL_VALUE NOT IN(SELECT CBS_CO_CODE AS DL_VALUE FROM srcode.MFI_USERS WHERE CBS_CO_CODE IS NOT NULL) "
			+ "AND BRANCH_CODE='000' and DL_TYPE='CO' AND  AUTH_STATUS = 'A' AND  IS_ACTIVE = 'A'";

	// public static final String QUERY_PASSWORD_POLICY = "";

	public static final String USER_QUERY_UPDATE_INVALID_LOGIN_COUNT = "UPDATE srcode.MFI_USERS SET NO_OF_FAILED_LOGINS = NO_OF_FAILED_LOGINS + 1 WHERE USER_ID = :id";

	public static final String USER_QUERY_LOCK_USER = "UPDATE srcode.MFI_USERS SET USER_STATUS = 'L' WHERE USER_ID=:id AND NO_OF_FAILED_LOGINS = :maxFailedLoginCount";

	public static final String USER_QUERY_UNLOCK_USER = "UPDATE srcode.MFI_USERS SET USER_STATUS='A', NO_OF_FAILED_LOGINS = 0 WHERE USER_ID=:id";

	public static final String USER_QUERY_UPDATE_LOGIN_TIME = "UPDATE srcode.MFI_USERS SET LAST_LOGIN_DATE=:lastloggedTime, NO_OF_FAILED_LOGINS = 0 WHERE USER_ID=:userName";

	public static final String USER_QUERY_PASSWORD_USER = "SELECT PASSWORD FROM srcode.MFI_USERS WHERE USER_ID=:id";

	public static final String USER_QUERY_RESET_USER = "UPDATE srcode.MFI_USERS SET PASSWORD=:pswd, AUTH_STATUS = 'U' WHERE USER_ID=:id";

	public static final String USER_QUERY_PSWDCHG_USER = "UPDATE srcode.MFI_USERS SET PASSWORD=:pswd WHERE USER_ID=:id";

	public static final String USER_QUERY_FTIME_USER_RESET = "UPDATE srcode.MFI_USERS SET PASSWORD=:pswd, USER_STATUS='A' WHERE USER_ID=:id";

	public static final String USER_QUERY_DELETE_USER = "DELETE FROM srcode.MFI_USERS WHERE USER_ID = :id";

	public static final String USER_QUERY_DELETE_USER_ROLES = "DELETE FROM srcode.MFI_USER_ROLES WHERE USER_ID = :id";

	public static final String USER_QUERY_NOOFFAILED_LOGINS = "SELECT NO_OF_FAILED_LOGINS FROM srcode.MFI_USERS WHERE USER_ID = :id";

	public static final String USER_QUERY_USERROLE = "SELECT ROLE_ID FROM srcode.MFI_USER_ROLES WHERE USER_ID = :id"; // For
																														// role
																														// entitlement

	public static final String USER_QUERY_AUTH_USERROLE = "SELECT AUTH_STATUS FROM srcode.MFI_ROLES WHERE ROLE_ID in (:roleId)";

	public static final String USER_QUERY_ROLE_ACTIVE = "SELECT ROLE_STATUS FROM srcode.MFI_ROLES WHERE ROLE_ID in (:roleId)";

	public static final String USER_QUERY_INSERT_AUTH = "INSERT INTO srcode.MFI_AUDIT_DETAIL  (TABLE_NAME, KEY_ID, VERSION_NO, MAKER_ID, "
			+ " MAKER_DT,OBJECT_XML) VALUES (:tableName, :keyId, :versionNo, :makerId, now(), :objectXML)";

	public static final String USER_QUERY_SELECT_MAX_VERSION = "SELECT MAX(VERSION_NO) FROM srcode.MFI_AUDIT_DETAIL WHERE "
			+ "TABLE_NAME = :tableName AND KEY_ID = :keyId";

	public static final String USER_QUERY_USERSESSION_COUNT = "SELECT COUNT(*) FROM srcode.MFI_CURRENT_USER WHERE USER_ID=:id AND IS_ACTIVE='A'";

	public static final String USER_QUERY_INSERT_USERSESSION = "INSERT INTO srcode.MFI_CURRENT_USER (USER_ID, START_TIME, IS_ACTIVE) "
			+ " VALUES (:id, now(), :active)";

	public static final String USER_QUERY_DELETE_USERSESSION = "DELETE FROM srcode.MFI_CURRENT_USER WHERE USER_ID=:id";

	public static final String USER_QUERY_UPDATE_USERSESSION = "UPDATE srcode.MFI_CURRENT_USER SET END_TIME=now(), IS_ACTIVE='I' WHERE USER_ID=:id";

	public static final String USER_tableName = "srcode.MFI_USERS";

	public static final String USER_QUERY_USER_AUTHORIZE = "SELECT AUTH_STATUS FROM srcode.MFI_USERS WHERE USER_ID = :id";

	public static final String USER_QUERY_DELETE_ALL_USERSESSION = "DELETE FROM srcode.MFI_CURRENT_USER";

	/* UserJdbcDao Script End */

	/* ************** * UserFunctionViewMap ************************ */

	public static final String Load_ViewMap_FromDB = "select FUNC_COMMAND COMMANDID, VIEW_NAME VIEWID from srcode.MFI_function";

	/* UserFunctionViewMap Ends */

	/* Location Module * ************************** */
	public static final String LOCATION_QUERY_SELECT_ALL = "SELECT LOCATION_CODE, LOCATION_DESC, CBS_LOCATION_CODE, CBS_BRANCH_CODE, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, "
			+ " CONTACT_NUMBER, AUTH_STATUS, IS_ACTIVE, ZIP_CODE, CITY, STATE, COUNTRY FROM srcode.MFI_LOCATIONS WHERE IS_ACTIVE "
			+ " in ('A','I') ORDER BY LOCATION_CODE";

	public static final String LOCATION_QUERY_SELECT_BY_PK = "SELECT LOCATION_CODE, LOCATION_DESC, CBS_LOCATION_CODE, CBS_BRANCH_CODE, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, "
			+ " CONTACT_NUMBER, AUTH_STATUS, IS_ACTIVE, ZIP_CODE, CITY, STATE, COUNTRY FROM srcode.MFI_LOCATIONS WHERE LOCATION_CODE = :id";

	public static final String LOCATION_QUERY_COUNTRY_CODES = "SELECT COUNTRY_CODE, DESCRIPTION, ISO_NUM_COUNTRY_CODE FROM srcode.MFI_COUNTRY_CODE ORDER BY DESCRIPTION ASC";

	public static final String LOCATION_QUERY_AUTO_AGENCY_CODE = "SELECT MAX(LOCATION_CODE)LOCATION_CODE FROM srcode.MFI_LOCATIONS WHERE LOCATION_CODE LIKE('LCN%')";

	public static final String LOCATION_INSERT_QUERY_INSERT = "INSERT INTO srcode.MFI_LOCATIONS (LOCATION_CODE,LOCATION_DESC,CBS_LOCATION_CODE,"
			+ "CBS_BRANCH_CODE,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,CONTACT_NUMBER,IS_ACTIVE,ZIP_CODE,CITY,STATE,COUNTRY) "
			+ "VALUES (:id, :locationDesc, :cbsLocationCode, :cbsBranchCode, :address1, :address2, :address3, :address4, :contactNumber, :isActive, :zipCode, :city, :state, "
			+ ":country)";

	public static final String LOCATION_QUERY_UPDATE_BY_AUTH = "UPDATE srcode.MFI_LOCATIONS SET AUTH_STATUS='A' WHERE LOCATION_CODE=:id";

	public static final String QUERY_LOCATION_STATUS_TO_INACTIVE = "select count(LOCATION_CODE) FROM srcode.MFI_AGENTS WHERE UPPER(LOCATION_CODE)=UPPER(:locationId)";

	public static final String LOCATION_QUERY_UPDATE = "UPDATE srcode.MFI_LOCATIONS SET LOCATION_CODE=:id, "
			+ "LOCATION_DESC=:locationDesc, CBS_LOCATION_CODE=:cbsLocationCode, CBS_BRANCH_CODE=:cbsBranchCode, ADDRESS1=:address1, "
			+ "ADDRESS2=:address2, ADDRESS3=:address3, ADDRESS4=:address4, CONTACT_NUMBER=:contactNumber, "
			+ "AUTH_STATUS=:authStatus, IS_ACTIVE=:isActive, ZIP_CODE=:zipCode, CITY=:city, STATE=:state, "
			+ "COUNTRY=:country where LOCATION_CODE=:id";

	public static final String LOCATION_QUERY_DELETE = "DELETE FROM srcode.MFI_LOCATIONS WHERE LOCATION_CODE = :id";

	public static final String LOCATION_QUERY_DELETE_AUDIT = "DELETE FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID = :id";

	public static final String LOCATION_QUERY_AUTHORIZED = "SELECT LOCATION_CODE, LOCATION_DESC, CBS_LOCATION_CODE, CBS_BRANCH_CODE, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, "
			+ " CONTACT_NUMBER, AUTH_STATUS, IS_ACTIVE, ZIP_CODE, CITY, STATE, COUNTRY FROM srcode.MFI_LOCATIONS WHERE IS_ACTIVE IN ('A') AND AUTH_STATUS='A' "
			+ " ORDER BY LOCATION_CODE";
	// EGALITE-289 START

	public static final String AGENT_LOCATION_QUERY_AUTHORIZED = "SELECT LOCATION_CODE, LOCATION_DESC, CBS_LOCATION_CODE, CBS_BRANCH_CODE,"
			+ " ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, CONTACT_NUMBER, AUTH_STATUS, IS_ACTIVE, ZIP_CODE, CITY, STATE,"
			+ " COUNTRY FROM srcode.MFI_LOCATIONS WHERE LOCATION_CODE NOT IN (SELECT LOCATION_CODE FROM srcode.MFI_AGENTS WHERE LOCATION_CODE IS NOT NULL)"
			+ " AND IS_ACTIVE ='A' AND AUTH_STATUS='A' ORDER BY LOCATION_CODE";

	public static final String LOC_QUERY_CBSCOCODE_AVAILABLE = "SELECT 1 FROM srcode.MFI_LOCATIONS WHERE upper(CBS_LOCATION_CODE) = upper(:id)";

	public static final String LOC_QUERY_CBSCOCODE_LOV = "SELECT DL_VALUE, DL_DESC "
			+ "FROM srcode.MFI_CBS_DROP_LIST WHERE DL_VALUE NOT IN(SELECT CBS_LOCATION_CODE AS DL_VALUE FROM srcode.MFI_LOCATIONS WHERE CBS_LOCATION_CODE IS NOT NULL) "
			+ "AND BRANCH_CODE='000' and DL_TYPE='CO' AND  AUTH_STATUS = 'A' AND  IS_ACTIVE = 'A'";

	/*
	 * public static final String LOC_QUERY_CBSLOCATION_CODE =
	 * "SELECT DL_VALUE, DL_DESC " +
	 * "FROM srcode.MFI_CBS_DROP_LIST WHERE DL_VALUE NOT IN(SELECT CBS_LOCATION_CODE AS DL_VALUE FROM srcode.MFI_LOCATIONS WHERE CBS_LOCATION_CODE IS NOT NULL) "
	 * +
	 * "AND BRANCH_CODE='000' and DL_TYPE='LC' AND  AUTH_STATUS = 'A' AND  IS_ACTIVE = 'A'"
	 * ;
	 */

	public static final String LOC_QUERY_CBSLOCATION_CODE = "SELECT DL_VALUE, DL_DESC FROM srcode.MFI_CBS_DROP_LIST "
			+ " WHERE BRANCH_CODE='000' and DL_TYPE='LC' AND  AUTH_STATUS = 'A' AND  IS_ACTIVE = 'A'";

	public static final String LOC_QUERY_CBSLCN_CODE = "SELECT DL_VALUE, DL_DESC FROM srcode.MFI_CBS_DROP_LIST "
			+ " WHERE BRANCH_CODE='000' AND DL_TYPE='LC' AND AUTH_STATUS = 'A' AND IS_ACTIVE = 'A'"; /*AND DL_VALUE NOT IN "
			+ " (SELECT CBS_LOCATION_CODE FROM srcode.MFI_LOCATIONS WHERE CBS_LOCATION_CODE IS NOT NULL)";*/ //For Tag No: EGA-MN15-000003

	public static final String LOC_QUERY_CBSLCN_CODE_UPDATE = "SELECT DL_VALUE, DL_DESC FROM srcode.MFI_CBS_DROP_LIST "
			+ " WHERE BRANCH_CODE='000' AND DL_TYPE='LC' AND AUTH_STATUS = 'A' AND IS_ACTIVE = 'A'and "
			+ " DL_VALUE !=(SELECT CBS_LOCATION_CODE FROM srcode.MFI_LOCATIONS WHERE LOCATION_CODE =:id) "
			+ " order by DL_VALUE";
	
	public static final String IBS_LOCATION_DROP_DOWN = "SELECT LOCATION_CODE, LOCATION_DESC "
			+ " FROM srcode.MFI_LOCATIONS WHERE LOCATION_CODE NOT IN"
			+ " (SELECT IBS_LOCATION_CODE AS IBS_LOCATION_CODE FROM srcode.MFI_ROUTE_CODES WHERE IBS_LOCATION_CODE IS NOT NULL)";

	// public static final String AGENT_LOCATION_CBSLOCCODE_AVAILABLE =
	// "SELECT 1 FROM srcode.MFI_LOCATIONS WHERE upper(CBS_LOCATION_CODE) = upper(:id)";

	// EGALITE-289 END
	
	/*For Tag No: EGA-MN15-000003 Start*/
	public static final String LOCATION_DISTRICT_CODES = "SELECT CODE_TYPE, CODE_VALUE, DESCRIPTION, ISO_EQUIVALENT_CODE FROM srcode.MFI_STATE_CITY_DISTRICT_CODE WHERE CODE_TYPE='DT' ORDER BY DESCRIPTION ASC";
	public static final String LOCATION_QUERY_CITY_CODES = "SELECT CODE_TYPE, CODE_VALUE, DESCRIPTION, ISO_EQUIVALENT_CODE FROM srcode.MFI_STATE_CITY_DISTRICT_CODE WHERE CODE_TYPE='CT' ORDER BY DESCRIPTION ASC";
	public static final String LOCATION_QUERY_STATE_CODES = "SELECT CODE_TYPE, CODE_VALUE, DESCRIPTION, ISO_EQUIVALENT_CODE FROM srcode.MFI_STATE_CITY_DISTRICT_CODE WHERE CODE_TYPE='ST' ORDER BY DESCRIPTION ASC";
	public static final String LOCATION_CODE_AVAILABLE = "SELECT 1 FROM SRCODE.MFI_LOCATIONS WHERE  UPPER(CBS_LOCATION_CODE) =  UPPER(:locationCode)";
	/*For Tag No: EGA-MN15-000003 End*/

	/* Location Module Ends* ************************** */

	/* CBS Sync ****************** */

	/********* loan module Query Start **********/

	public static final String CBS_QUERY_LOAN_DETAILS = "SELECT * FROM srcode.CBS_LOAN_DETAIL";

	public static final String STG_INSERT_QUERY_LOAN_DETAILS = "INSERT INTO srcode.STG_LOAN_DETAIL (LOAN_AC_NO, BRANCH_CODE,PARENT_LOAN_AC_NO, CUSTOMER_ID, "
			+ " PARENT_CUST_ID, IS_PARENT_LOAN, IS_GROUP_LOAN, CBS_GROUP_ID, CBS_LOAN_SHORT_CODE, CREDIT_OFFICER_CODE, LOAN_STATUS, CBS_LCR_CODE, CBS_LCR_TYPE,CBS_AGENT_CODE, SANCTIONED_DATE, LAST_DISBURSED_DATE, DISBR_TYPE,  "
			+ " LOAN_AC_CCY, IS_FULLY_DISBURSED, SANCTIONED_PRINCIPAL_AMT, DISBURSED_PRINCIPAL_AMT, INTEREST_RATE, INTEREST_ACCRUED, PRINCIPAL_AMT_REPAID, "
			+ " PRINCIPAL_OUTSTANDING, LAST_REPAYMENT_DATE, RECORD_STAT, CBS_UPLD_JOB_ID, IBS_INTERNAL_ERR, IBS_ERROR_DESCRIPTION)  VALUES (:loanAcNo, :branchCode,:prntLoanAcNo, :customerId,"
			+ " :prntCustId,:isprntLoan,:isgroupLoan,:cbsGroupId,:cbsLoanShortCode,:creditOfficeCode,:loanStatus,:cbsLcrCode,:cbsLcrType,:cbsAgentCode,:sanctionDate,"
			+ " :lastDisbursedDate, :disbursType, :loanAcCcy, :isFullyDisbursed, :sanctionedPrincipalAmt, :disbursedPrincipalAmt, :interestRate, :interestAccured, :principalAmtRepaid, :principalOutStanding,"
			+ " :lastRepaymentDate, :recordStat, :cbsUpldJobId, :ibsInternalErr, :ibsErrorDesc)";

	public static final String CBS_QUERY_LOAN_DISBURSEMENT = "SELECT * FROM srcode.CBS_LOAN_DISBURSEMENTS";

	public static final String STG_INSERT_QUERY_LOAN_DISBURSEMENT = "INSERT INTO srcode.STG_LOAN_DISBURSEMENTS (LOAN_AC_NO, BRANCH_CODE,PARENT_LOAN_AC_NO,CUSTOMER_ID,PARENT_CUST_ID,IS_PARENT_LOAN,IS_GROUP_LOAN,"
			+ "DISBR_TYPE, SCH_ST_DATE, SCH_END_DATE, CBS_GROUP_ID, COMPONENT_NAME,COMPONENT_CCY_CODE, COMPONENT_LCY_CODE, AMT_TO_DISBR, AMT_TO_DISBR_LCY,  CBS_UPLD_JOB_ID, IBS_INTERNAL_ERR, IBS_ERROR_DESCRIPTION)  VALUES (:loanAcNo, :branchCode, :prntLoanAcNo,"
			+ ":customerId,:prntCustId,:isprntLoan,:isgroupLoan,:disbrType,:schStDate,:schEndDate,:cbsGroupId,:componentName,"
			+ " :componentCcyCode, :componentLcyCode, :amtToDisbr, :amtToDisbrLcy, :cbsUploadJobId,:ibsInternalErr,:ibsErrDesc)";

	public static final String CBS_QUERY_LOAN_PAID_SCH = "SELECT * FROM srcode.CBS_LOAN_PAID_SCH ";

	public static final String STG_INSERT_QUERY_LOAN_PAID_SCH = "INSERT INTO srcode.STG_LOAN_PAID_SCH (LOAN_AC_NO, BRANCH_CODE,PARENT_LOAN_AC_NO,CUSTOMER_ID,PARENT_CUST_ID,IS_PARENT_LOAN,IS_GROUP_LOAN,CBS_GROUP_ID, SCH_DUE_DATE, "
			+ "SCH_PAID_DATE, SETTLEMENT_CCY_CODE, AMT_SETTLED,  FULL_PARTIAL_IND, CBS_UPLD_JOB_ID,IBS_INTERNAL_ERR,IBS_ERROR_DESCRIPTION)  VALUES (:loanAcNo, :branchCode,:prntLoanAcNo,:customerId,:prntCustId,:isprntLoan,:isgroupLoan,:cbsGroupId, :schDueDate, :schPaidDate, :settlementCcyCode,:amtSettled,"
			+ " :fullPartialInd, :cbsUpldJobId,:ibsInternalErr,:ibsErrDesc)";

	public static final String CBS_QUERY_LOAN_SCH = "SELECT * FROM srcode.CBS_LOAN_SCHEDULES";

	public static final String STG_INSERT_QUERY_LOAN_SCH = "INSERT INTO srcode.STG_LOAN_SCHEDULES (LOAN_AC_NO, BRANCH_CODE,PARENT_LOAN_AC_NO,CUSTOMER_ID,PARENT_CUST_ID,IS_PARENT_LOAN,IS_GROUP_LOAN,IS_FUTURE_SCH, "
			+ "SCH_TYPE, SCH_ST_DATE, SCH_END_DATE, CBS_GROUP_ID, COMPONENT_NAME, COMPONENT_CCY_CODE, COMPONENT_LCY_CODE, AMT_DUE, AMT_DUE_LCY,  CBS_UPLD_JOB_ID, IBS_INTERNAL_ERR,IBS_ERROR_DESCRIPTION)  VALUES (:loanAcNo, :branchCode,:prntLoanAcNo,"
			+ ":customerId,:prntCustId,:isprntLoan,:isgroupLoan,:isFutureSch, :schType, :schStDate,:schEndDate,"
			+ ":cbsGroupId, :componentName, :componentCcyCode, :componentLcyCode, :amtDue, :amtDueLcy, :cbsUploadJobId, :ibsInternalErr,:ibsErrDesc)";

	public static final String CBS_QUERY_LOAN_SYNC_TIME = "SELECT TODAY FROM srcode.STVW_BRANCH_DATES WHERE BRANCH_CODE=:branchCode";

	public static final String STG_QUERY_DELETE_LOAN_DETAILS = "DELETE FROM srcode.STG_LOAN_DETAIL";

	public static final String STG_QUERY_DELETE_LOAN_DISBR = "DELETE FROM srcode.STG_LOAN_DISBURSEMENTS";

	public static final String STG_QUERY_DELETE_LOAN_SCH = "DELETE FROM srcode.STG_LOAN_SCHEDULES";

	public static final String STG_QUERY_DELETE_LOAN_PAID_SCH = "DELETE FROM srcode.STG_LOAN_PAID_SCH";

	public static final String STG_QUERY_DELETE_LOAN_DETAILS_FOR_JOB = "DELETE FROM srcode.STG_LOAN_DETAIL WHERE CBS_UPLD_JOB_ID=:jobId";

	public static final String STG_QUERY_DELETE_LOAN_DISBR_FOR_JOB = "DELETE FROM srcode.STG_LOAN_DISBURSEMENTS WHERE CBS_UPLD_JOB_ID=:jobId";

	public static final String STG_QUERY_DELETE_LOAN_SCH_FOR_JOB = "DELETE FROM srcode.STG_LOAN_SCHEDULES WHERE CBS_UPLD_JOB_ID=:jobId";

	public static final String STG_QUERY_DELETE_LOAN_PAID_SCH_FOR_JOB = "DELETE FROM srcode.STG_LOAN_PAID_SCH WHERE CBS_UPLD_JOB_ID=:jobId";

	public static final String MFI_UPDATE_LOAN_SYNC_TIME = "UPDATE srcode.MFI_CBS_SYNC SET LOAN_SYNC_TIME =:loanSyncTime";

	/********* loan module Query end **********/

	/********* branch module Query Start **********/

	public static final String CBS_QUERY_BRANCH = "SELECT BRANCH_CODE, PARENT_BRN_CODE, BRANCH_NAME, BRANCH_ADD1, BRANCH_ADD2, BRANCH_ADD3, BRANCH_ADD4,"
			+ " ZIP_CODE, CITY, STATE, COUNTRY, BRANCH_DATE_TODAY, BRANCH_EOD_STAT, BRANCH_LCY, RECORD_STAT FROM srcode.CBS_BRANCH_DETAIL ";

	public static final String STG_DELETE_BRANCH = "DELETE FROM srcode.STG_BRANCH_DETAIL";
	public static final String STG_DELETE_BRANCH_FOR_JOB = "DELETE FROM srcode.STG_BRANCH_DETAIL WHERE CBS_UPLD_JOB_ID=:jobId";

	public static final String STG_DELETE_BRANCH_FOR_ID = "DELETE FROM srcode.STG_BRANCH_DETAIL WHERE BRANCH_CODE=:branchCode";

	public static final String STG_INSERT_BRANCH = "INSERT INTO srcode.STG_BRANCH_DETAIL(BRANCH_CODE, PARENT_BRN_CODE,BRANCH_NAME, BRANCH_ADD1, "
			+ "BRANCH_ADD2, BRANCH_ADD3, BRANCH_ADD4, ZIP_CODE, CITY, STATE, COUNTRY, BRANCH_DATE_TODAY, BRANCH_EOD_STAT, BRANCH_LCY, "
			+ "RECORD_STAT, CBS_UPLD_JOB_ID, IBS_INTERNAL_ERR, IBS_ERROR_DESCRIPTION) VALUES (:branchCode, :parentBranchCode, :branchName, :branchAdd1, :branchAdd2, :branchAdd3, "
			+ ":branchAdd4, :zipCode, :city, :state, :country, :branchDateToday, :branchEodStat, :branchLcy, :recordStat, :cbsUploadJobId,:ibsInternalErr,:ibsErrDesc)";

	/********* branch module Query Start **********/

	/********* branch module Query end **********/

	/********* CBS Customer sync Query start **********/

	public static final String CBS_QUERY_CUSTOMER = "SELECT CUSTOMER_ID, PARENT_CUST_ID,"
			+ "IS_PARENT_CUST,CUSTOMER_FULL_NAME, CUSTOMER_SHORT_NAME, CUSTOMER_CATEGORY, GENDER, DOB, CUSTOMER_SINCE "
			+ ", ADDRESS_LINE1, ADDRESS_LINE2, ADDRESS_LINE3, ADDRESS_LINE4, ZIP_CODE, CITY, STATE, "
			+ "COUNTRY, NATIONALITY, CBS_LCR_CODE,CBS_LCR_TYPE,CBS_AGENT_CODE,CBS_GROUP_CODE, LOCAL_BRANCH_CODE,  "
			+ "PREFERRED_LANGUAGE "
			+ ", EMAIL_ADDRESS, SMS_FROM_IBS,SMS_FROM_MBS,COLLECT_KYC, MOBILE_NUMBER, CREDIT_OFFICER, RECORD_STAT FROM srcode.CBS_CUSTOMER_DETAIL ";

	public static final String STG_DELETE_CUSTOMER = "DELETE FROM srcode.STG_CUSTOMER_DETAIL ";

	public static final String STG_DELETE_CUSTOMER_FOR_JOB = "DELETE FROM srcode.STG_CUSTOMER_DETAIL WHERE CBS_UPLD_JOB_ID=:jobId";

	public static final String STG_INSERT_CUSTOMER = "INSERT INTO srcode.STG_CUSTOMER_DETAIL(CUSTOMER_ID, PARENT_CUST_ID,"
			+ "IS_PARENT_CUST,CUSTOMER_FULL_NAME, CUSTOMER_SHORT_NAME, CUSTOMER_CATEGORY, GENDER, DOB, CUSTOMER_SINCE "
			+ ", ADDRESS_LINE1, ADDRESS_LINE2, ADDRESS_LINE3, ADDRESS_LINE4, ZIP_CODE, CITY, STATE, "
			+ "COUNTRY, NATIONALITY, CBS_LCR_CODE,CBS_LCR_TYPE,CBS_AGENT_CODE,CBS_GROUP_CODE, LOCAL_BRANCH_CODE,  "
			+ "PREFERRED_LANGUAGE "
			+ ", EMAIL_ADDRESS, SMS_FROM_IBS,SMS_FROM_MBS,COLLECT_KYC, MOBILE_NUMBER, CREDIT_OFFICER, RECORD_STAT, CBS_UPLD_JOB_ID, IBS_INTERNAL_ERR, IBS_ERROR_DESCRIPTION) VALUES ("
			+ ":custId, :parentCustId,:isParentCust,:custFullName, :custShortName, :custCatgr, :gender, :dob, :custSince, "
			+ " :add1, :add2, "
			+ ":add3, :add4, :zipCode, :city, :state, :country, :nationality, :cbsLcrCode,:cbsLcrType,:cbsAgentCode,"
			+ ":cbsGroupCode, :locBranchCode, :prefLang, "
			+ ":emailAdd, :smsFromIbs,:smsFromMbs,:collectKyc, :mobNum, :credOfficer, :recordStat, :cbsUploadJobId,:ibsInternalErr,:ibsErrDesc"
			+ ")";

	public static final String QUERY_INSERT_CUST_BIO_INFO = "INSERT INTO srcode.MFI_CUST_ENROL_BIOMETRIC(ENROLMENT_ID ,RHLF_TMPLTDATA,RHRF_TMPLTDATA, RHMF_TMPLTDATA, RHIF_TMPLTDATA ,"
			+ " RHTF_TMPLTDATA ,LHLF_TMPLTDATA, LHRF_TMPLTDATA , LHMF_TMPLTDATA , LHIF_TMPLTDATA, LHTF_TMPLTDATA,"
			+ "RHLF_IMAGE_SCAN,RHRF_IMAGE_SCAN,RHMF_IMAGE_SCAN,RHIF_IMAGE_SCAN,RHTF_IMAGE_SCAN,"
			+ "LHLF_IMAGE_SCAN,LHRF_IMAGE_SCAN,LHMF_IMAGE_SCAN,LHIF_IMAGE_SCAN,LHTF_IMAGE_SCAN) VALUES(:enrolmentId,:rhlfTmpltData,:rhrfTmpltData,:rhmfTmpltData,"
			+ ":rhifTmpltData,:rhtfTmpltData,:lhlfTmpltData,:lhrfTmpltData,:lhmfTmpltData,:lhifTmpltData,:lhtfTmpltData,"
			+ ":rhlfScanData,:rhrfScanData,:rhmfScanData,:rhifScanData,:rhtfScanData,"
			+ ":lhlfScanData,:lhrfScanData,:lhmfScanData,:lhifScanData,:lhtfScanData)";

	/********* CBS Customer sync Query end **********/

	/********* CBS Currency sync Query start **********/

	public static final String CBS_QUERY_CCY = "SELECT CCY_CODE, CCY_NAME, ISO_CCY_CODE, ISO_ALT_CCODE, COUNTRY, CCY_ROUND_RULE, CCY_DECIMAL, RECORD_STAT"
			+ " FROM srcode.CBS_CCY_CODES ";

	public static final String STG_DELETE_CCY = "DELETE FROM srcode.STG_CCY_CODES";
	public static final String STG_DELETE_CCY_FOR_JOB = "DELETE FROM srcode.STG_CCY_CODES WHERE CBS_UPLD_JOB_ID=:jobId";

	public static final String STG_DELETE_CCY_FOR_CODE = "DELETE FROM srcode.STG_CCY_CODES WHERE CCY_CODE=:ccyCode";

	public static final String STG_INSERT_CCY = "INSERT INTO srcode.STG_CCY_CODES (CCY_CODE, CCY_NAME, ISO_CCY_CODE, ISO_ALT_CCODE, COUNTRY, CCY_ROUND_RULE, CCY_DECIMAL, RECORD_STAT, CBS_UPLD_JOB_ID, IBS_INTERNAL_ERR, IBS_ERROR_DESCRIPTION) VALUES("
			+ ":ccyCode, :ccyName, :isoCcyCode, :isoAltCcode, :country, :ccyRoundRule, :ccyDecimal, :recordStat, :cbsUploadJobId, :ibsInternalErr, :ibsErrDesc) ";

	/********* CBS Currency sync Query end **********/

	/********* CBS Fx Rates sync Query start **********/

	public static final String CBS_QUERY_FX_RATES = "SELECT BRN_CODE, CCY1, CCY2, RECORD_STAT, MID_RATE, BUY_RATE, SALE_RATE"
			+ " FROM srcode.CBS_FX_RATES ";

	public static final String STG_DELETE_FX_RATES = "DELETE FROM srcode.STG_FX_RATES";
	public static final String STG_DELETE_FX_RATES_FOR_JOB = "DELETE FROM srcode.STG_FX_RATES WHERE CBS_UPLD_JOB_ID=:jobId";

	public static final String STG_INSERT_FX_RATES = "INSERT INTO srcode.STG_FX_RATES (BRN_CODE, CCY1, CCY2, RECORD_STAT, MID_RATE, BUY_RATE, SALE_RATE, CBS_UPLD_JOB_ID,IBS_INTERNAL_ERR,IBS_ERROR_DESCRIPTION) VALUES("
			+ ":brnCode, :ccy1, :ccy2, :recordStat, :midRate, :buyRate, :saleRate, :cbsUploadJobId,:ibsInternalErr,:ibsErrDesc) ";

	/********* CBS Fx Rates sync Query end **********/

	/********* CBS Txn sync Query start **********/
	public static final String QUERY_UPDATE_REQ_STATUS = "UPDATE srcode.MFI_CBS_TXN_OUT SET IS_SENT_TO_CBS =:isSentToCbs,CBS_SENT_TIME = now() WHERE srcode.MFI_OUT_SEQNO = :mfiOutSeqno";

	public static final String QUERY_UPDATE_RES_STATUS = "UPDATE srcode.MFI_CBS_TXN_OUT SET CBS_RESPONSE_STAT =:cbsResStat,CBS_RESPONSE_TXN_REF_NO =:cbsResTxnRefNo"
			+ " ,CBS_ERROR_CODE =:cbsErrorCode, CBS_ERROR_DESC =:cbsErrorDesc, CBS_RESPOND_TIME =now() WHERE srcode.MFI_OUT_SEQNO = :mfiOutSeqno";

	public static final String QUERY_GET_UNPROCESSED_RECORD = "SELECT * FROM  srcode.MFI_CBS_TXN_OUT_V ";

	public static final String QUERY_GET_TXN_OUT_SEQ_NO = "SELECT MFI_OUT_SEQNO FROM srcode.MFI_CBS_TXN_OUT WHERE MBS_TXN_REF_NO =:mbsTxnRefNo ";

	/********* CBS Txn sync Query end **********/

	/********* CBS Customer Acc Query start **********/
	public static final String CBS_QUERY_SELECT_CUST_ACC = "SELECT CUSTOMER_ID,CUST_AC_NO,BRANCH_CODE,ACCOUNT_TYPE,AC_DESC,"
			+ "AC_CCY,ACY_CURR_BAL,ACY_AVAIL_BAL,AC_STAT_NO_DR,AC_STAT_NO_CR,AC_STAT_BLOCK,AC_STAT_STOP_PAY,AC_STAT_DORMANT,"
			+ "CBS_LCR_CODE,CBS_LCR_TYPE,CBS_AGENT_CODE,JOINT_AC_INDICATOR,RECORD_STAT,CREDIT_OFFICER "
			+ " FROM srcode.CBS_CUSTOMER_ACCOUNTS";

	public static final String CBS_QUERY_INSERT_CUST_ACC = "INSERT INTO srcode.STG_CUSTOMER_ACCOUNTS(CUSTOMER_ID,CUST_AC_NO,BRANCH_CODE,ACCOUNT_TYPE,AC_DESC,"
			+ "AC_CCY,ACY_CURR_BAL,ACY_AVAIL_BAL,AC_STAT_NO_DR,AC_STAT_NO_CR,AC_STAT_BLOCK,AC_STAT_STOP_PAY,AC_STAT_DORMANT,CBS_LCR_CODE,CBS_LCR_TYPE,"
			+ "CBS_AGENT_CODE,JOINT_AC_INDICATOR,RECORD_STAT,CREDIT_OFFICER,CBS_UPLD_JOB_ID,IBS_INTERNAL_ERR,IBS_ERROR_DESCRIPTION) VALUES"
			+ "(:customerId,:custAcNo,:branchCode,:accountType,:acDesc,:acCcy,:acyCurrBal,:acyAvailBal,:acStatNoDr,"
			+ ":acStatNoCr,:acStatBlock,:acStatStopPay,:acStatDorMant,:cbsLcrCode,:cbsLcrType,:cbsAgentCode,:jointAcIndiCator,:recordStat,:creditOficer,"
			+ ":cbsUploadJobId,:ibsInternalErr,:ibsInternalDesc)";

	// public static final String CBS_QUERY_DELETE_CUST_ACC =
	// "DELETE STG_CUSTOMER_ACCOUNTS WHERE CUSTOMER_ID=:custId"
	// +
	// " AND CUST_AC_NO=:accNo AND BRANCH_CODE=:branchCode AND ACCOUNT_TYPE=:accType";

	public static final String CBS_QUERY_DELETE_CUST_ACC = "DELETE FROM srcode.STG_CUSTOMER_ACCOUNTS";

	public static final String CBS_QUERY_DELETE_CUST_ACC_FOR_JOB = "DELETE FROM srcode.STG_CUSTOMER_ACCOUNTS WHERE CBS_UPLD_JOB_ID=:jobId";

	/********* CBS Customer Acc Query start **********/

	/* CBS Sync End *************** */

	/* ************************************* CBS FX Rates Start *************** */

	public static final String FXRATE_QUERY_ALL = "SELECT * FROM srcode.CBS_FX_RATES";

	public static final String FXRATE_QUERY_MIDRATE = "select " + " mid_rate "
			+ " from srcode.CBS_FX_RATES where ccy1=:ccy1 and ccy2 = :ccy2 ";

	public static final String FXRATE_QUERY_RATES = "select" + " *"
			+ " from srcode.CBS_FX_RATES where ccy1=:ccy1 and ccy2 = :ccy2 ";

	public static final String FXRATE_QUERY_CCY1RATES = "select distinct CCY1 From srcode.CBS_FX_RATES";

	public static final String FXRATE_QUERY_CCY2RATES = "select distinct CCY2 From srcode.CBS_FX_RATES";
	/*
	 * CBS FX Rates End /
	 * 
	 * /* CBS SYNC DEPOSIT START
	 */

	public static final String QUERY_INSERT_DEPOST = "insert into srcode.STG_DEPOSIT_DETAIL (DEP_AC_NO,BRANCH_CODE,CUSTOMER_ID,CREDIT_OFFICER_ID,"
			+ "DEP_STATUS,AC_CCY,OPEN_DATE,MATURITY_DATE,CBS_LCR_CODE,CBS_LCR_TYPE,CBS_AGENT_CODE,SCH_INSTALLMENT_AMT,"
			+ "PAY_FREQ_TYPE,PAY_FREQ,TENURE_TYPE,TENURE,INT_RATE,"
			+ "PRINCIPAL_MATURITY_AMOUNT,INTEREST_ACCRUED_TILL_DATE,INSTALLMENT_PAID_TILL_DATE,TOTAL_INSTALLMENT_AMT_DUE,"
			+ "REDEMPTION_FLAG,REDEMPTION_PAYOUT_DATE,REDEMPTION_AMOUNT,RECORD_STAT,CBS_UPLD_JOB_ID) values("
			+ ":depoAccNo,:branchCode,:customerId,:creditOfficerId,:depoStatus,:currency,:openingDate,:maturityDate,:cbsLcrCode,:cbsLcrType,"
			+ ":cbsAgentCode,:schInstalAmt,:payFrqType,"
			+ ":payFreq,:tenureType,:tenure,:intrRate,:princMaturityAmt,:intrAccuredTillDate,:instalPaidTillDate,:totInstAmtDue,"
			+ ":redemptionFlag,:redemptionPayoutDate,:redemptionAmt,:recStatus,:cbsUploadJobId"
			+ ")";

	public static final String QUERY_INSERT_DEPOST_ACTIVITY = "insert into srcode.stg_deposit_activity(DEP_AC_NO,BRANCH_CODE,TXN_TYPE,TXN_TYPE_ST_DATE,"
			+ "TXN_TYPE_END_DATE,TXN_TYPE_DUE_DATE,TXN_CCY_CODE,TXN_LCY_CODE,TXN_AMT_DUE,TXN_AMT_DUE_LCY,TXN_AMT_SETTLED,"
			+ "TXN_AMT_SETTLED_LCY,CBS_UPLD_JOB_ID) values(:depoAccNo,:branchCode,:txnType,:txnTypeStartDate,:txnTypeEndDate,"
			+ ":txnTypeDueDate,:txnCcyCode,:txnLocCcyCode,:txnAmtDue,:txnAmtDueLocCcy,:txnAmtSettled,:txnAmtSettledLocCcy,:cbsUploadJobId)";

	public static final String QUERY_DELETE_DEPOSIT = "delete FROM srcode.STG_DEPOSIT_DETAIL";

	public static final String QUERY_DELETE_DEPOSIT_ACTIVITY = "delete FROM srcode.stg_deposit_activity ";

	public static final String QUERY_DELETE_DEPOSIT_FOR_JOB = "delete FROM srcode.STG_DEPOSIT_DETAIL WHERE CBS_UPLD_JOB_ID=:jobId";

	public static final String QUERY_DELETE_DEPOSIT_ACTIVITY_FOR_JOB = "delete FROM srcode.stg_deposit_activity WHERE CBS_UPLD_JOB_ID=:jobId";

	/* CBS SYNC DEPOSIT END */

	/*
	 * ***************************** Route Codes Start
	 * ***************************************
	 */

	public static final String ROUTE_QUERY_SELECT_ALL = "SELECT route_code, cbs_route_code, ibs_location_code, route_code_desc, cbs_branch_code, contact_number, "
			+ " on_sunday, on_monday, on_tuesday, on_wednesday, on_thursday, on_friday, on_saturday, frm_address_line_1, frm_address_line_2, frm_address_line_3, "
			+ " frm_address_line_4, frm_zip_code, frm_city, frm_state, frm_country, to_address_line_1, to_address_line_2, to_address_line_3, to_address_line_4, to_zip_code, "
			+ " to_city, to_state, to_country, is_active, auth_status FROM srcode.MFI_route_codes WHERE IS_ACTIVE "
			+ " in ('A','I') ORDER BY route_code";

	public static final String ROUTE_QUERY_INSERT = "INSERT INTO srcode.MFI_route_codes (route_code,cbs_route_code,ibs_location_code,route_code_desc,cbs_branch_code,contact_number,"
			+ "on_sunday,on_monday,on_tuesday,on_wednesday,on_thursday,on_friday,on_saturday,frm_address_line_1,frm_address_line_2,frm_address_line_3,"
			+ "frm_address_line_4,frm_zip_code,frm_city,frm_state,frm_country,to_address_line_1,to_address_line_2,to_address_line_3,to_address_line_4,to_zip_code,"
			+ "to_city,to_state,to_country,is_active,AUTH_STATUS) "
			+ "VALUES (:id, :cbsRouteCode, :ibsLocationCode, :routeCodeDesc, :cbsBranchCode, :contactNumber, :onSundayStr, :onMondayStr, :onTuesdayStr, :onWednesdayStr, :onThursdayStr, :onFridayStr, :onSaturdayStr, "
			+ ":frmAddressLine1, :frmAddressLine2, :frmAddressLine3, :frmAddressLine4, :frmZipCode, :frmCity, :frmState, :frmCountry, :toAddressLine1, :toAddressLine2, :toAddressLine3,"
			+ " :toAddressLine4, :toZipCode, :toCity, :toState, :toCountry, :isActive,'U')";

	public static final String ROUTE_QUERY_UPDATE_BY_AUTH = "UPDATE srcode.MFI_route_codes SET AUTH_STATUS='A' WHERE route_code=:id";

	public static final String ROUTE_QUERY_AUTHORIZED = "SELECT route_code, cbs_route_code, ibs_location_code, route_code_desc, cbs_branch_code, contact_number, "
			+ " on_sunday, on_monday, on_tuesday, on_wednesday, on_thursday, on_friday, on_saturday, frm_address_line_1, frm_address_line_2, frm_address_line_3, "
			+ " frm_address_line_4, frm_zip_code, frm_city, frm_state, frm_country, to_address_line_1, to_address_line_2, to_address_line_3, to_address_line_4, to_zip_code, "
			+ " to_city, to_state, to_country, is_active, auth_status FROM srcode.MFI_route_codes WHERE IS_ACTIVE IN ('A') AND AUTH_STATUS='A' "
			+ " ORDER BY route_code";

	public static final String ROUTE_QUERY_UPDATE = "UPDATE srcode.MFI_route_codes SET route_code=:id, "
			+ "cbs_route_code=:cbsRouteCode, ibs_location_code=:ibsLocationCode, route_code_desc=:routeCodeDesc, cbs_branch_code=:cbsBranchCode, contact_number=:contactNumber, "
			+ "on_sunday=:onSundayStr, on_monday=:onMondayStr, on_tuesday=:onTuesdayStr, on_wednesday=:onWednesdayStr, on_thursday=:onThursdayStr, on_friday=:onFridayStr, on_saturday=:onSaturdayStr, "
			+ "frm_address_line_1=:frmAddressLine1, frm_address_line_2=:frmAddressLine2, frm_address_line_3=:frmAddressLine3, frm_address_line_4=:frmAddressLine4, frm_zip_code=:frmZipCode, frm_city=:frmCity, frm_state=:frmState, "
			+ "frm_country=:frmCountry, to_address_line_1=:toAddressLine1, to_address_line_2=:toAddressLine2, to_address_line_3=:toAddressLine3, to_address_line_4=:toAddressLine4, to_zip_code=:toZipCode, to_city=:toCity, to_state=:toState, to_country=:toCountry, is_active=:isActive, auth_status=:authStatus where route_code=:id";

	public static final String ROUTE_SELECT_BY_PK = "SELECT route_code, cbs_route_code, ibs_location_code, route_code_desc, cbs_branch_code, contact_number, "
			+ " on_sunday, on_monday, on_tuesday, on_wednesday, on_thursday, on_friday, on_saturday, frm_address_line_1, frm_address_line_2, frm_address_line_3, "
			+ " frm_address_line_4, frm_zip_code, frm_city, frm_state, frm_country, to_address_line_1, to_address_line_2, to_address_line_3, to_address_line_4, to_zip_code, "
			+ " to_city, to_state, to_country, is_active, auth_status FROM srcode.MFI_route_codes WHERE route_code = :id";

	public static final String ROUTE_QUERY_AUDIT_VERSION = "SELECT MAX(VERSION_NO) FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID=:id AND CHECKER_ID IS NOT NULL";

	public static final String ROUTE_QUERY_DELETE = "DELETE FROM srcode.MFI_route_codes WHERE route_code = :id";

	public static final String ROUTE_QUERY_DELETE_AUDIT = "DELETE FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID = :id";

	public static final String LOCATION_QUERY_AUTO_ROUTE_CODE = "SELECT MAX(ROUTE_CODE)ROUTE_CODE FROM srcode.MFI_route_codes";

	public static final String ROUTE_QUERY_CBSROUTECODE_LOV = "SELECT DL_VALUE, DL_DESC FROM srcode.MFI_CBS_DROP_LIST "
			+ " WHERE DL_VALUE NOT IN (SELECT CBS_ROUTE_CODE AS DL_VALUE FROM srcode.MFI_ROUTE_CODES "
			+ " WHERE CBS_ROUTE_CODE IS NOT NULL) "
			+ " AND BRANCH_CODE='000' and DL_TYPE='RC' AND  AUTH_STATUS = 'A' AND  IS_ACTIVE = 'A'";

	/* For Tag No: EGA-MN15-000002 Start */
	public static final String ROUTE_QUERY_DISTRICT_CODES = "SELECT CODE_TYPE, CODE_VALUE, DESCRIPTION, ISO_EQUIVALENT_CODE FROM srcode.MFI_STATE_CITY_DISTRICT_CODE WHERE CODE_TYPE='DT' ORDER BY DESCRIPTION ASC";
	public static final String ROUTE_QUERY_CITY_CODES = "SELECT CODE_TYPE, CODE_VALUE, DESCRIPTION, ISO_EQUIVALENT_CODE FROM srcode.MFI_STATE_CITY_DISTRICT_CODE WHERE CODE_TYPE='CT' ORDER BY DESCRIPTION ASC";
	public static final String ROUTE_QUERY_STATE_CODES = "SELECT CODE_TYPE, CODE_VALUE, DESCRIPTION, ISO_EQUIVALENT_CODE FROM srcode.MFI_STATE_CITY_DISTRICT_CODE WHERE CODE_TYPE='ST' ORDER BY DESCRIPTION ASC";
	public static final String QUERY_ROUTE_CODE_AVAILABLE = "SELECT 1 FROM SRCODE.MFI_ROUTE_CODES WHERE  UPPER(CBS_ROUTE_CODE) =  UPPER(:routeCode)";
	/* For Tag No: EGA-MN15-000002 End */
	/*
	 * ***************************** Route Codes Ends
	 * ***************************************
	 */

	/* Agent Message start */

	public static final String AGENTMSG_QUERY_SELECT_ALL = "SELECT AGENT_ID,MSG_ID, MESSAGE,MSG_STATUS  FROM srcode.MFI_AGENT_MSG";

	public static final String AGENTMSG_QUERY_SELECT_BY_PK = "SELECT  AGENT_ID, MSG_ID,MESSAGE,MSG_STATUS FROM srcode.MFI_AGENT_MSG WHERE MSG_ID = :id";

	public static final String AGENTMSG_QUERY_INSERT_AGENTID = "UPDATE srcode.MFI_AGENT_MSG SET  MSG_ID=:id "
			+ " ,MESSAGE=:message, MSG_STATUS=:msgstatus WHERE AGENT_ID = :agentId ";

	public static final String AGENTMSG_QUERY_AUTO_ID = "SELECT MAX(ID)ID FROM srcode.MFI_AGENT_MSG";

	/* Agent Message End */

	/*
	 * Validate Agent Id for MBS transactions - START
	 */

	public static final String QUERY_AGENT_FOR_TRANS = "select count(*) from "
			+ "srcode.MFI_agents " + "where " + "agent_id=:agentId and "
			+ "device_id=:deviceId and " + "location_code=:locCode and "
			+ "reg_status=:regStatus and " + "auth_status=:authStatus and "
			+ "is_active=:activeStatus";

	/*
	 * Validate Agent Id for MBS transactions - END
	 */

	/*
	 * ****************** Group Codes Start
	 * ****************************************
	 */

	public static final String GRCODE_QUERY_SELECT_ALL = "select * from srcode.MFI_group_codes";

	public static final String GRCODE_QUERY_AUTO_GROUP_CODE = "SELECT MAX(GROUP_ID)GROUP_ID FROM srcode.MFI_GROUP_CODES WHERE GROUP_ID LIKE('GRP%')";

	public static final String GRCODE_QUERY_INSERT = "INSERT INTO srcode.MFI_GROUP_CODES (GROUP_ID,CBS_BRANCH_CODE,CBS_GROUP_ID,"
			+ "GROUP_NAME,CBS_CO_ID,IBS_CO_ID,CONTACT_NUMBER,IS_ACTIVE,AUTH_STATUS) "
			+ "VALUES (:id, :cbsBranchCode, :cbsGroupId, :groupName, :cbsCoId, :ibsCoId, :contactNumber, :isActive,'U')";

	public static final String GRCODE_SELECT_BY_PK = "SELECT GROUP_ID, CBS_BRANCH_CODE, CBS_GROUP_ID, GROUP_NAME, CBS_CO_ID, IBS_CO_ID, CONTACT_NUMBER,IS_ACTIVE,AUTH_STATUS"
			+ " FROM srcode.MFI_GROUP_CODES WHERE GROUP_ID = :id";

	public static final String GRCODE_QUERY_AUDIT_VERSION = "SELECT MAX(VERSION_NO) FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID=:id AND CHECKER_ID IS NOT NULL";

	public static final String GRCODE_QUERY_DELETE = "DELETE FROM srcode.MFI_GROUP_CODES WHERE GROUP_ID = :id";

	public static final String GRCODE_QUERY_DELETE_AUDIT = "DELETE FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID = :id";

	public static final String GRCODE_QUERY_UPDATE_BY_AUTH = "UPDATE srcode.MFI_GROUP_CODES SET AUTH_STATUS='A' WHERE GROUP_ID=:id";

	public static final String GRCODE_QUERY_AUTHORIZED = "SELECT GROUP_ID, CBS_BRANCH_CODE, CBS_GROUP_ID, GROUP_NAME, CBS_CO_ID, IBS_CO_ID, "
			+ " CONTACT_NUMBER, IS_ACTIVE, AUTH_STATUS FROM srcode.MFI_GROUP_CODES WHERE IS_ACTIVE IN ('A') AND AUTH_STATUS='A' "
			+ " ORDER BY GROUP_ID";

	public static final String GRCODE_QUERY_UPDATE = "UPDATE srcode.MFI_GROUP_CODES SET GROUP_ID=:id, "
			+ "CBS_BRANCH_CODE=:cbsBranchCode, CBS_GROUP_ID=:cbsGroupId, GROUP_NAME=:groupName, CBS_CO_ID=:cbsCoId, "
			+ "IBS_CO_ID=:ibsCoId, CONTACT_NUMBER=:contactNumber, "
			+ " IS_ACTIVE=:isActive, AUTH_STATUS=:authStatus where GROUP_ID=:id";

	/* Group code end */

	/*
	 * ***************************** Center Codes Start
	 * ***************************************
	 */

	public static final String CENTER_QUERY_INSERT = "INSERT INTO srcode.MFI_center_codes (center_code,cbs_center_code,ibs_location_code,center_code_desc,cbs_branch_code,contact_number,"
			+ "on_sunday,on_monday,on_tuesday,on_wednesday,on_thursday,on_friday,on_saturday,address_line_1,address_line_2,address_line_3,"
			+ "address_line_4,zip_code,city,state,country,is_active,AUTH_STATUS) "
			+ "VALUES (:id, :cbsCenterCode, :ibsLocationCode, :centerCodeDesc, :cbsBranchCode, :contactNumber, :onSundayStr, :onMondayStr, :onTuesdayStr, :onWednesdayStr, :onThursdayStr, :onFridayStr, :onSaturdayStr, "
			+ ":addressLine1, :addressLine2, :addressLine3, :addressLine4, :zipCode, :city, :state, :country, :isActive, 'U')";

	public static final String CENTER_QUERY_SELECT_ALL = "SELECT center_code, cbs_center_code, ibs_location_code, center_code_desc, cbs_branch_code, contact_number, "
			+ " on_sunday, on_monday, on_tuesday, on_wednesday, on_thursday, on_friday, on_saturday, address_line_1, address_line_2, address_line_3, "
			+ " address_line_4, zip_code, city, state, country, is_active, auth_status FROM srcode.MFI_center_codes WHERE IS_ACTIVE "
			+ " in ('A','I') ORDER BY center_code";

	public static final String CENTER_SELECT_BY_PK = "SELECT center_code, cbs_center_code, ibs_location_code, center_code_desc, cbs_branch_code, contact_number, "
			+ " on_sunday, on_monday, on_tuesday, on_wednesday, on_thursday, on_friday, on_saturday, address_line_1, address_line_2, address_line_3, "
			+ " address_line_4, zip_code, city, state, country, is_active, auth_status FROM srcode.MFI_center_codes WHERE center_code = :id";

	public static final String CENTER_QUERY_AUTHORIZED = "SELECT center_code, cbs_center_code, ibs_location_code, center_code_desc, cbs_branch_code, contact_number, "
			+ " on_sunday, on_monday, on_tuesday, on_wednesday, on_thursday, on_friday, on_saturday, address_line_1, address_line_2, address_line_3, "
			+ " address_line_4, zip_code, city, state, country, is_active, auth_status FROM srcode.MFI_center_codes WHERE IS_ACTIVE IN ('A') AND AUTH_STATUS='A' "
			+ " ORDER BY route_code";

	public static final String CENTER_QUERY_UPDATE = "UPDATE srcode.MFI_center_codes SET center_code=:id, "
			+ "cbs_center_code=:cbsCenterCode, ibs_location_code=:ibsLocationCode, center_code_desc=:centerCodeDesc, cbs_branch_code=:cbsBranchCode, contact_number=:contactNumber, "
			+ "on_sunday=:onSundayStr, on_monday=:onMondayStr, on_tuesday=:onTuesdayStr, on_wednesday=:onWednesdayStr, on_thursday=:onThursdayStr, on_friday=:onFridayStr, on_saturday=:onSaturdayStr, "
			+ "address_line_1=:addressLine1, address_line_2=:addressLine2, address_line_3=:addressLine3, address_line_4=:addressLine4, zip_code=:zipCode, city=:city, state=:state, country=:country, is_active=:isActive, auth_status=:authStatus where center_code=:id";

	public static final String CENTER_QUERY_UPDATE_BY_AUTH = "UPDATE srcode.MFI_center_codes SET AUTH_STATUS='A' WHERE CENTER_CODE=:id";

	public static final String CENTER_QUERY_AUDIT_VERSION = "SELECT MAX(VERSION_NO) FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID=:id AND CHECKER_ID IS NOT NULL";

	public static final String CENTER_QUERY_DELETE = "DELETE FROM srcode.MFI_center_codes WHERE center_code = :id";

	public static final String CENTER_QUERY_DELETE_AUDIT = "DELETE FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID = :id";

	public static final String LOCATION_QUERY_AUTO_CENTER_CODE = "SELECT MAX(CENTER_CODE)CENTER_CODE FROM srcode.MFI_CENTER_CODES";

	/*
	 * public static final String CENTER_QUERY_CBSROUTECODE_LOV =
	 * "SELECT DL_VALUE, DL_DESC " +
	 * "FROM srcode.MFI_CBS_DROP_LIST WHERE DL_VALUE NOT IN(SELECT CBS_CENTER_CODE AS DL_VALUE FROM srcode.MFI_CENTER_CODES WHERE CBS_CENTER_CODE IS NOT NULL) "
	 * +
	 * "AND BRANCH_CODE='000' and DL_TYPE='CO' AND  AUTH_STATUS = 'A' AND  IS_ACTIVE = 'A'"
	 * ;
	 */

	public static final String CENTER_QUERY_CBSROUTECODE_LOV = "SELECT DL_VALUE, DL_DESC "
			+ " FROM srcode.MFI_CBS_DROP_LIST WHERE BRANCH_CODE='000' and DL_TYPE='CC' AND  AUTH_STATUS = 'A' AND  IS_ACTIVE = 'A'";

	public static final String CENTER_QUERY_CBSROUTECODE_UPDATE = "SELECT DL_VALUE, DL_DESC "
			+ " FROM srcode.MFI_CBS_DROP_LIST WHERE BRANCH_CODE='000' and DL_TYPE='CC' AND  AUTH_STATUS = 'A' AND  IS_ACTIVE = 'A'"
			+ " and DL_VALUE !=(SELECT cbs_center_code FROM srcode.MFI_center_codes WHERE center_code = :id ) "
			+ " order by DL_VALUE";

	public static final String CENTER_QUERY_CBS_ROUTE_CODE_LOV = "SELECT DL_VALUE, DL_DESC FROM srcode.MFI_CBS_DROP_LIST "
			+ "	WHERE BRANCH_CODE='000' and DL_TYPE='RC' AND AUTH_STATUS = 'A' AND IS_ACTIVE = 'A'"
			+ "	and dl_value not in (select CBS_CENTER_CODE from srcode.mfi_center_codes where CBS_CENTER_CODE is not null)";

	/** Logic Changed > Changes for Asomi Nirmal kanna S */

	public static final String CENTERIBS_LOCATION_DROP_DOWN = "SELECT LOCATION_CODE, LOCATION_DESC "
			+ "FROM srcode.MFI_LOCATIONS WHERE LOCATION_CODE NOT IN "
			+ "(SELECT IBS_LOCATION_CODE AS IBS_LOCATION_CODE FROM srcode.MFI_CENTER_CODES WHERE IBS_LOCATION_CODE IS NOT NULL)";
	
	/*For Tag No: EGA-MN15-000004 Start*/
	public static final String CENTER_DISTRICT_CODES = "SELECT CODE_TYPE, CODE_VALUE, DESCRIPTION, ISO_EQUIVALENT_CODE FROM srcode.MFI_STATE_CITY_DISTRICT_CODE WHERE CODE_TYPE='DT' ORDER BY DESCRIPTION ASC";
	public static final String CENTER_QUERY_CITY_CODES = "SELECT CODE_TYPE, CODE_VALUE, DESCRIPTION, ISO_EQUIVALENT_CODE FROM srcode.MFI_STATE_CITY_DISTRICT_CODE WHERE CODE_TYPE='CT' ORDER BY DESCRIPTION ASC";
	public static final String CENTER_QUERY_STATE_CODES = "SELECT CODE_TYPE, CODE_VALUE, DESCRIPTION, ISO_EQUIVALENT_CODE FROM srcode.MFI_STATE_CITY_DISTRICT_CODE WHERE CODE_TYPE='ST' ORDER BY DESCRIPTION ASC";
	public static final String CENTER_CODE_AVAILABLE = "SELECT 1 FROM SRCODE.MFI_CENTER_CODES WHERE  UPPER(CBS_CENTER_CODE) =  UPPER(:centerCode)";
	/*For Tag No: EGA-MN15-000004 End*/

	/* Center Codes End */

	/************** Customer Enroll Start **************/
	public static final String CUS_MBS_SYNC_CUS_ACC = "SELECT * FROM srcode.MFI_CUST_ACC_ALL_INFO_V WHERE AGENT_ID=:agentId AND LOCATION_CODE=:locCode";

	public static final String CBS_UNPROCESSED_ENROLL_CUST = "SELECT * FROM srcode.CBS_CUST_ENROL_ALL_INFO WHERE WORKFLOW_Q_TYPE=:queType AND AUTH_STATUS=:authStatus LIMIT :batchSize";

	public static final String CBS_UPDATE_ENROLL_CUST_REQ = "UPDATE srcode.MFI_CUST_ENROL_INFO SET IS_SENT_TO_CBS =:isSentToCbs,TXN_INIT_TIME = now() WHERE ENROLMENT_ID = :enrolmentId";

	public static final String CBS_UPDATE_ENROLL_CUST_RES = "UPDATE srcode.MFI_CUST_ENROL_INFO SET CBS_RESPONSE_STAT=:cbsResStat,"
			+ " CBS_RESPONSE_TXN_REF_NO=:cbsResTxnRefNo,TXN_ERR_CODE =:cbsTxnErrorCode, TXN_ERR_MESSAGE =:cbsTxnErrorDesc, "
			+ "TXN_SYNC_TIME =now(), IS_SENT_TO_CBS=:isSentToCbs  WHERE ENROLMENT_ID = :enrolId";

	/************** Customer Enroll end **************/

	/*
	 * ***************************** ReqDpPrepay Start
	 * ***************************************
	 */

	public static final String DPPREPAYREQ_SELECT_QUEARY_ALL = "select * from srcode.MFI_mbs_req_dpprepay_v";

	public static final String DPPREPAYREQ_SELECT_QUEARY_ALL_PK = "select * from srcode.MFI_mbs_req_dpprepay_v where MBS_TXN_ID= :id";

	/* ReqDpPrepay End */

	/*
	 * ****************** SMS Config Start
	 * ****************************************
	 */

	public static final String SMSCONFIG_QUERY_SELECT_ALL = "select * from srcode.MFI_sms_config";

	public static final String SMSCONFIG_QUERY_INSERT = "INSERT INTO srcode.MFI_SMS_CONFIG (TXN_CODE,SEND_SMS_FROM_MBS,SMS_TEMPLATE_MBS,"
			+ "SEND_SMS_FROM_IBS,SMS_TEMPLATE_IBS,IS_ACTIVE,AUTH_STATUS) "
			+ "VALUES (:id, :sendSmsFromMbsStr, :smsTemplateMbs, :sendSmsFromIbsStr, :smsTemplateIbs, :isActive,'U')";

	public static final String SMSCONFIG_SELECT_BY_PK = "SELECT TXN_CODE, SEND_SMS_FROM_MBS, SMS_TEMPLATE_MBS, SEND_SMS_FROM_IBS, SMS_TEMPLATE_IBS, IS_ACTIVE,AUTH_STATUS"
			+ " FROM srcode.MFI_SMS_CONFIG WHERE TXN_CODE = :id";

	public static final String TXNCODE_QUERY_SELECT_ALL = "select TXN_CODE,TXN_DESC from srcode.MFI_TXN_CODES";
	public static final String QUERY_SELECT_TXN_DESC = "select TXN_CODE from srcode.MFI_TXN_CODES";
	public static final String TXNCODE_QUERY_TXNCODE_AVAILABLE = "SELECT 1 FROM srcode.MFI_SMS_CONFIG WHERE  UPPER(TXN_CODE) = UPPER(:txnCode)";

	public static final String TXNCODE_QUERY_SELECT_TXNS = "select TXN_CODE,TXN_DESC from srcode.MFI_TXN_CODES WHERE MODULE_CODE ='TI'";

	public static final String SMSCONFIG_QUERY_AUTHORIZED = "SELECT TXN_CODE, SEND_SMS_FROM_MBS, SMS_TEMPLATE_MBS, SEND_SMS_FROM_IBS, SMS_TEMPLATE_IBS, IS_ACTIVE, "
			+ "AUTH_STATUS FROM srcode.MFI_SMS_CONFIG WHERE IS_ACTIVE IN ('A') AND AUTH_STATUS='A' "
			+ " ORDER BY TXN_CODE";
	public static final String SMSCONFIG_QUERY_UPDATE_BY_AUTH = "UPDATE srcode.MFI_SMS_CONFIG SET AUTH_STATUS='A' WHERE TXN_CODE=:id";

	public static final String SMSCONFIG_QUERY_AUDIT_VERSION = "SELECT MAX(VERSION_NO) FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID=:id AND CHECKER_ID IS NOT NULL";

	public static final String SMSCONFIG_QUERY_DELETE = "DELETE FROM srcode.MFI_SMS_CONFIG WHERE TXN_CODE = :id";

	public static final String SMSCONFIG_QUERY_DELETE_AUDIT = "DELETE FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID = :id";

	public static final String SMSCONFIG_QUERY_UPDATE = "UPDATE srcode.MFI_SMS_CONFIG SET TXN_CODE=:id, "
			+ "SEND_SMS_FROM_MBS=:sendSmsFromMbsStr, SMS_TEMPLATE_MBS=:smsTemplateMbs, SEND_SMS_FROM_IBS=:sendSmsFromIbsStr, SMS_TEMPLATE_IBS=:smsTemplateIbs, "
			+ " IS_ACTIVE=:isActive, AUTH_STATUS=:authStatus where TXN_CODE=:id";

	public static final String MBS_SYNC_QUERY_SELECT_SMS_TEMPLATE = "SELECT TXN_CODE, TXT_SMS, DYNAMIC_FIELDS FROM srcode.MFI_MBS_SMS_INFO";
	/* SMS Config End */

	/* Lov Start */

	public static final String QUERY_LOV_LIST = "SELECT LOV_ID, INTERNAL_VALUE, DISPLAY_VALUE, ORDER_BY"
			+ " FROM srcode.MFI_MBS_LOV_DISPLAY WHERE IS_ACTIVE =:isActive AND AUTH_STATUS =:authStatus";

	/* Lov End */

	/* ****************** CASA **************************************** */

	public static final String CASA_QUERY_SELECT_ALL = "select * from srcode.MFI_cust_ac_detail_list_v order by CUST_AC_NO";

	public static final String CASA_QUERY_SELECT_BY_PK = "select * from srcode.MFI_cust_ac_detail_v where CUST_AC_NO=:id";

	public static final String CASA_ENRICH_QUERY_SELECT_ALL = "select * from  srcode.MFI_cust_ac_enrichment order by CUST_AC_NO";

	public static final String CASA_ENRICH_QUERY_INSERT_AGENTID = "UPDATE srcode.MFI_cust_ac_enrichment SET AGENT_ID=:agentId "
			+ " ,ALLOCATION_BY=:allocateUser, ALLOCATION_TIME=:allocationTime WHERE CUST_AC_NO = :custAcNo ";

	public static final String CASA_ENRICH_QUERY_INSERT_ISALLOCATED = "UPDATE srcode.MFI_customer_accounts SET IS_ALLOCATED='Y' "
			+ " WHERE CUST_AC_NO = :custAcNo ";

	public static final String CASA_ENRICH_QUERY_SELECT_UNASSIGNED = "SELECT CUST_AC_NO, AGENT_ID, LOCATION_CODE, ALLOCATION_BY, ALLOCATION_TIME  from srcode.MFI_cust_ac_enrichment "
			+ " ORDER BY CUST_AC_NO";

	/* CASA End */

	/*
	 * ****************** SMS Template Start
	 * ****************************************
	 */

	public static final String SMSTEMPLATE_QUERY_SELECT_ALL = "select * from srcode.MFI_sms_template";

	public static final String SMSTEMPLATE_QUERY_INSERT = "INSERT INTO srcode.MFI_SMS_TEMPLATE (TEMPLATE_ID,TXT_SMS,DYNAMIC_FIELDS,"
			+ "DESCRIPTION) "
			+ "VALUES (:id, :txtSms, :dynaFields, :description)";
	/*
	 * public static final String SMSTEMPLATE_QUERY_SELECT_ALL =
	 * "select TEMPLATE_ID,TXT_SMS,DYNAMIC_FIELDS from srcode.MFI_sms_template";
	 * public static final String SMSTEMPLATE_QUERY_INSERT =
	 * "INSERT INTO srcode.MFI_SMS_TEMPLATE (TEMPLATE_ID,TXT_SMS,DYNAMIC_FIELDS) "
	 * + "VALUES (:id, :txtSms, :dynaFields)";
	 */
	public static final String SMSTEMPLATE__AUTO_ID = "SELECT MAX(TEMPLATE_ID)TEMPLATE_ID FROM srcode.MFI_SMS_TEMPLATE";

	public static final String SMSTEMPLATE_SELECT_BY_PK = "SELECT * FROM srcode.MFI_SMS_TEMPLATE WHERE TEMPLATE_ID = :id";

	public static final String SMSTEMPLATE_QUERY_AUDIT_VERSION = "SELECT MAX(VERSION_NO) FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID=:id AND CHECKER_ID IS NOT NULL";

	public static final String SMSTEMPLATE_QUERY_DELETE = "DELETE FROM srcode.MFI_SMS_TEMPLATE WHERE TEMPLATE_ID = :id";

	public static final String SMSTEMPLATE_QUERY_DELETE_AUDIT = "DELETE FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID = :id";

	public static final String SMSTEMPLATE_QUERY_UPDATE = "UPDATE srcode.MFI_SMS_TEMPLATE SET TEMPLATE_ID=:id, "
			+ "TXT_SMS=:txtSms, DYNAMIC_FIELDS=:dynaFields, DESCRIPTION=:description "
			+ "where TEMPLATE_ID=:id";

	/* SMS Template End */

	/* Script Start for CBS Transaction Out */

	public static final String CBSTXNOUT_QUERY_SELECT = "SELECT MFI_OUT_SEQNO,MBS_TXN_REF_NO,CBS_AC_REF_NO,CUSTOMER_ID,"
			+ "CBS_BRANCH_CODE,MODULE_CODE,TXN_CODE,TXN_IDENTIFIER,SYNC_TYPE,IS_REQ_OR_TXN,IS_SENT_TO_CBS,LOG_TIME,"
			+ "CBS_SENT_TIME,CBS_RESPONSE_STAT,CBS_RESPONSE_TXN_REF_NO,CBS_RESPOND_TIME,CBS_ERROR_CODE,CBS_ERROR_DESC,"
			+ "IBS_AGENDA_ID,IBS_AGENDA_SEQ_NO,"
			/*
			 * +
			 * "AGN_AMT_DUE_CCY,AGN_AMT_DUE,AGN_AMT_SETTLED_CCY,AGN_AMT_SETTLED,"
			 */
			+ "FULL_PARTIAL_IND,"
			/* + "CBS_AGENT_ID,CBS_LCR_CODE,CBS_LCR_TYPE," */
			+ "MBS_TXN_NARRATIVE,REQ_DEP_NO_INST,REQ_RED_REQ_DT,"
			+ "REQ_RED_FULL_PART_IND,REQ_MATURITY_DATE,REQ_INT_RATE,REQ_DP_TENURE_TYPE,REQ_DP_FREQUENCY_TYPE,REQ_DP_FREQUENCY,"
			+ "REQ_DP_TENURE FROM srcode.mfi_cbs_txn_out_info WHERE MFI_OUT_SEQNO=:id";

	public static final String CBSTXNOUT_QUERY_SELECT_ALL = "SELECT MFI_OUT_SEQNO,MBS_TXN_REF_NO,CBS_AC_REF_NO,CUSTOMER_ID,"
			+ "CBS_BRANCH_CODE,MODULE_CODE,TXN_CODE,TXN_IDENTIFIER,SYNC_TYPE,IS_REQ_OR_TXN,IS_SENT_TO_CBS,LOG_TIME,"
			+ "CBS_SENT_TIME,CBS_RESPONSE_STAT,CBS_RESPONSE_TXN_REF_NO,CBS_RESPOND_TIME,CBS_ERROR_CODE,CBS_ERROR_DESC,"
			+ "IBS_AGENDA_ID,IBS_AGENDA_SEQ_NO,"
			/*
			 * +
			 * "AGN_AMT_DUE_CCY,AGN_AMT_DUE,AGN_AMT_SETTLED_CCY,AGN_AMT_SETTLED,"
			 */
			+ "FULL_PARTIAL_IND,"
			/* + "CBS_AGENT_ID,CBS_LCR_CODE,CBS_LCR_TYPE," */
			+ "MBS_TXN_NARRATIVE,REQ_DEP_NO_INST,REQ_RED_REQ_DT,REQ_RED_FULL_PART_IND,"
			+ "REQ_MATURITY_DATE,REQ_INT_RATE,REQ_DP_TENURE_TYPE,REQ_DP_FREQUENCY_TYPE,REQ_DP_FREQUENCY,REQ_DP_TENURE "
			+ "FROM srcode.mfi_cbs_txn_out_info";

	/* Script End for CBS Transaction Out */

	/*
	 * ****************** MBS LOV Details
	 * ****************************************
	 */

	public static final String LOV_QUERY_SELECT_ALL = "select * from srcode.MFI_MBS_LOV_DISPLAY  order by DISP_ID";

	public static final String LOV_QUERY_SELECT_PK = "select * from srcode.MFI_MBS_LOV_DISPLAY where DISP_ID= :id";

	public static final String BASE_QUERY_SELECT_ALL = "select * from  srcode.MFI_MBS_LOV_BASE";

	public static final String BASE_QUERY_SELECT_PK = "select * from  srcode.MFI_MBS_LOV_BASE where LOV_ID=:id";

	public static final String BASE_QUERY_DELETE = "DELETE FROM srcode.MFI_MBS_LOV_BASE WHERE LOV_ID = :id";

	public static final String BASE_QUERY_SELECT_INSERT = "INSERT INTO srcode.MFI_MBS_LOV_BASE (LOV_ID,LOV_DESC,IS_ACTIVE) "
			+ "VALUES (:id, :lovDesc, :isActive)";

	public static final String BASE_LOVID_AVAILABLE = "SELECT 1 FROM srcode.MFI_MBS_LOV_BASE WHERE UPPER(LOV_ID) = UPPER(:id)";

	public static final String BASE_QUERY_AUDIT_VERSION = "SELECT MAX(VERSION_NO) FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID=:id AND CHECKER_ID IS NOT NULL";

	public static final String BASE_QUERY_DELETE_AUDIT = "DELETE FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID = :id";

	public static final String BASE_QUERY_HARD_DELETE = "DELETE FROM srcode.MFI_MBS_LOV_BASE WHERE LOV_ID = :id";

	public static final String BASE_QUERY_DELETE_LOV_DISPLAY = "DELETE FROM  srcode.MFI_MBS_LOV_DISPLAY WHERE LOV_ID = :id";

	public static final String QUERY_BASE_STATUS_TO_INACTIVE = "select count(LOV_ID) FROM srcode.MFI_MBS_LOV_BASE WHERE UPPER(LOV_ID)=UPPER(:id)";

	public static final String BASE_QUERY_UPDATE = "UPDATE srcode.MFI_MBS_LOV_BASE SET LOV_ID=:id, "
			+ "LOV_DESC=:lovDesc, IS_ACTIVE=:isActive where LOV_ID=:id";

	public static final String MAX_INTERMNAL_VALUE = "select max(internal_value) from srcode.MFI_MBS_LOV_DISPLAY where LOV_ID=:lovId";

	public static final String LOV_QUERY_INSERT = "INSERT INTO srcode.MFI_MBS_LOV_DISPLAY (DISP_ID,LOV_ID,LOV_DESC,INTERNAL_VALUE,"
			+ "DISPLAY_VALUE,ORDER_BY,IS_ACTIVE,AUTH_STATUS) "
			+ "VALUES (:id, :lovId, :lovDesc, :intrValue, :displayValue, :orderBy,:isActive,'U')";

	public static final String DISPLAY_QUERY_STATUS_TO_INACTIVE = "select count(DISP_ID) FROM srcode.MFI_MBS_LOV_DISPLAY "
			+ " WHERE UPPER(DISP_ID)=UPPER(:id)";

	public static final String LOV_QUERY_UPDATE = "UPDATE srcode.MFI_MBS_LOV_DISPLAY SET DISP_ID=:id, "
			+ "LOV_ID=:lovId, LOV_DESC=:lovDesc, INTERNAL_VALUE=:intrValue, DISPLAY_VALUE=:displayValue, "
			+ "ORDER_BY=:orderBy, "
			+ "AUTH_STATUS=:authStatus, IS_ACTIVE=:isActive "
			+ " where DISP_ID=:id";

	public static final String LOV_DISPLAY_QUERY_DELETE = "DELETE FROM srcode.MFI_MBS_LOV_DISPLAY WHERE DISP_ID = :id";

	public static final String DISPLAY_QUERY_LOV_AUTO_ID = "SELECT MAX(DISP_ID)DISP_ID FROM srcode.MFI_MBS_LOV_DISPLAY";

	public static final String DISPLAY_QUERY_LOV_AUTO_FUN_ID = "{call srcode.fn_get_sys_id_code(?, ?, ?)}";

	public static final String LOV_DISPLAY_QUERY_AUDIT_VERSION = "SELECT MAX(VERSION_NO) FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID=:id AND CHECKER_ID IS NOT NULL";

	public static final String LOV_DISPLAY_QUERY_DELETE_AUDIT = "DELETE FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID = :id";

	public static final String GET_LOV_DISPLAY = "select * from srcode.MFI_MBS_LOV_DISPLAY where LOV_ID= :lovId";

	/* MBS LOV Details End */

	/*
	 * ****************** External Device
	 * ****************************************
	 */

	public static final String EXT_DEV_QUERY_INSERT = "INSERT INTO srcode.MFI_EXTERNAL_DEVICE (EXTERNAL_DEVICEID, MAC_ID, MANUFACTURER, ISSUED_DATE, ISSUED_BY_CO,"
			+ " MODEL_NO, IS_ACTIVE, LICENCE_FILE ,LICENCE_FILE_NAME ) "
			+ "VALUES (:id, :macId, :manufacturer, :issuedDate, :issuedByCo, "
			+ ":modelNo, :isActive, :licenceFile ,:licenceFileName)";

	public static final String EXT_DEV_QUERY_SELECT_ALL = "SELECT *  FROM srcode.MFI_EXTERNAL_DEVICE WHERE IS_ACTIVE "
			+ "in ('A','I') ORDER BY EXTERNAL_DEVICEID";

	public static final String EXT_DEV_QUERY_UPDATE = "UPDATE srcode.MFI_EXTERNAL_DEVICE SET MAC_ID=:macId, MANUFACTURER=:manufacturer, "
			+ "ISSUED_DATE=:issuedDate, ISSUED_BY_CO=:issuedByCo, MODEL_NO=:modelNo, AUTH_STATUS=:authStatus, IS_ACTIVE=:isActive, LICENCE_FILE=:licenceFile, LICENCE_FILE_NAME=:licenceFileName "
			+ "where  EXTERNAL_DEVICEID=:id";

	public static final String EXT_DEV_QUERY_DELETE = "DELETE FROM srcode.MFI_EXTERNAL_DEVICE WHERE EXTERNAL_DEVICEID = :id";

	public static final String EXT_DEV_QUERY_SELECT_BY_PK = "SELECT * "
			+ " FROM srcode.MFI_EXTERNAL_DEVICE WHERE EXTERNAL_DEVICEID = :id";

	public static final String EXT_DEV_QUERY_UPDATE_BY_AUTH = "UPDATE srcode.MFI_EXTERNAL_DEVICE SET AUTH_STATUS='A' "
			+ "WHERE EXTERNAL_DEVICEID=:id";

	public static final String EXT_DEV_QUERY_DEVICE_ID_ALLOC = "select D.EXTERNAL_DEVICEID, D.MAC_ID, D.MANUFACTURER, D.ISSUED_DATE, "
			+ "D.ISSUED_BY_CO, D.MODEL_NO, D.AUTH_STATUS, D.IS_ACTIVE, D.LICENCE_FILE ,D.LICENCE_FILE_NAME  "
			+ " from srcode.MFI_EXTERNAL_DEVICE D where "
			// +
			// " D.EXTERNAL_DEVICEID not in (select EXTERNAL_DEVICEID from srcode.MFI_AGENTS where EXTERNAL_DEVICEID is not null) AND"
			+ " IS_ACTIVE in ('A','I') AND AUTH_STATUS='A' order by EXTERNAL_DEVICEID";

	public static final String EXT_DEV_QUERY_ALLOC_DEVICES = "select D.EXTERNAL_DEVICEID, D.MAC_ID, D.MANUFACTURER, D.ISSUED_DATE, "
			+ "D.ISSUED_BY_CO, D.MODEL_NO, D.IS_ACTIVE, D.AUTH_STATUS, D.LICENCE_FILE ,D.LICENCE_FILE_NAME"
			+ "from srcode.MFI_EXTERNAL_DEVICE D where D.EXTERNAL_DEVICEID not in (select EXTERNAL_DEVICEID from srcode.MFI_AGENTS where AGENT_ID NOT IN (:id) "
			+ "AND EXTERNAL_DEVICEID is not null) AND IS_ACTIVE in ('A','I') AND AUTH_STATUS='A' order by EXTERNAL_DEVICEID ";

	public static final String EXT_DEV_QUERY_DEVICE_AUTO_ID = "SELECT MAX(EXTERNAL_DEVICEID)EXTERNAL_DEVICEID FROM "
			+ "srcode.MFI_EXTERNAL_DEVICE";

	public static final String EXT_DEV_QUERY_UNIQUE_ID_AVAILABLE = "SELECT 1 FROM srcode.MFI_EXTERNAL_DEVICE WHERE "
			+ "UPPER(MAC_ID) =  UPPER(:macId)";

	public static final String EXT_DEV_QUERY_MODIFY_UNIQUE_ID_AVAILABLE = "select TABLE1.EXTERNAL_DEVICEID,TABLE1.MAC_ID "
			+ " from srcode.MFI_EXTERNAL_DEVICE TABLE1,(select * from srcode.MFI_EXTERNAL_DEVICE WHERE EXTERNAL_DEVICEID =:id) TABLE2 "
			+ " where TABLE1.MAC_ID=TABLE2.MAC_ID and TABLE1.EXTERNAL_DEVICEID not in(TABLE2.EXTERNAL_DEVICEID)";

	public static final String EXT_DEV_QUERY_DEVICE_DETAIL = "SELECT EXTERNAL_DEVICEID, MAC_ID, MANUFACTURER, ISSUED_DATE, "
			+ " ISSUED_BY_CO, MODEL_NO, AUTH_STATUS, IS_ACTIVE, LICENCE_FILE, LICENCE_FILE_NAME  "
			+ " FROM srcode.MFI_EXTERNAL_DEVICE WHERE MAC_ID = :macId";

	public static final String EXT_DEV_QUERY_AUDIT_VERSION = "SELECT MAX(VERSION_NO) FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID=:id AND CHECKER_ID IS NOT NULL";

	// public static final String EXT_DEV_QUERY_DELETE =
	// "DELETE FROM srcode.MFI_DEVICE WHERE DEVICE_ID = :id";

	public static final String EXT_DEV_QUERY_DELETE_AUDIT = "DELETE FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID = :id";

	public static final String EXT_DEV_QUERY_SELECT_MAC_ID = "SELECT MAC_ID FROM srcode.MFI_AGENT_EXTERNAL_DEVICE_V WHERE AGENT_ID = :agentId";

	/**** External Device End ******/

	/* RoleMbsJdbcDao Script Start */
	public static final String ROLEMBS_QUERY_UPDATE = "UPDATE srcode.MFI_ROLES SET ROLE_NAME=:roleName, ROLE_DESC=:roleDesc, AUTH_STATUS=:authStatus, ROLE_STATUS=:roleStatus, ROLE_IBS_MBS=:roleType where ROLE_ID=:id";

	public static final String ROLEMBS_QUERY_SELECT_ALL = "SELECT ROLE_ID, ROLE_NAME, ROLE_DESC, AUTH_STATUS, ROLE_STATUS, "
			+ "ROLE_IBS_MBS FROM srcode.MFI_ROLES  WHERE ROLE_ID!='ROL00000' AND ROLE_IBS_MBS='M' ORDER BY ROLE_ID";
	// NOT ACCESS SUPER ROLE

	public static final String ROLEMBS_QUERY_INSERT = "INSERT INTO srcode.MFI_ROLES (ROLE_ID, ROLE_NAME, ROLE_DESC, AUTH_STATUS, ROLE_STATUS, ROLE_IBS_MBS) "
			+ "VALUES (:id, :roleName, :roleDesc, :authStatus, :roleStatus, :roleType)";

	public static final String ROLEMBS_QUERY_SELECT_BY_PK = "SELECT ROLE_ID, ROLE_NAME, ROLE_DESC, AUTH_STATUS, ROLE_STATUS, ROLE_IBS_MBS "
			+ "FROM srcode.MFI_ROLES WHERE ROLE_ID = :id ORDER BY  ROLE_ID";

	public static final String ROLEMBS_QUERY_INSERT_ROLE_ENTITLEMENTS = "INSERT INTO srcode.MFI_ROLE_ENTITLEMENT (ROLE_ID, FUNC_ID) "
			+ "VALUES (:roleId, :functionId)";

	public static final String ROLEMBS_QUERY_DELETE_ROLE_ENTITLEMENTS = "DELETE FROM srcode.MFI_ROLE_ENTITLEMENT WHERE ROLE_ID=:roleId";

	public static final String ROLEMBS_QUERY_UPDATE_BY_AUTH = "UPDATE srcode.MFI_ROLES SET AUTH_STATUS='A' WHERE ROLE_ID=:id";

	public static final String ROLEMBS_QUERY_ROLE_AUTO_ID = "SELECT MAX(ROLE_ID)ROLE_ID FROM srcode.MFI_ROLES";

	public static final String ROLEMBS_QUERY_DELETE = "UPDATE srcode.MFI_ROLES SET AUTH_STATUS=(select LIST_VALUE FROM srcode.MFI_LIST_VALUE "
			+ "WHERE DESN='Inactive' AND LIST_NAME='deviceStatus' and STATUS='Y') WHERE ROLE_ID=:id";

	public static final String ROLEMBS_QUERY_SELECT_USER_ROLES = "SELECT AR.ROLE_ID, AR.ROLE_NAME , AR.ROLE_DESC, AR.AUTH_STATUS, AR.ROLE_STATUS, AR.ROLE_IBS_MBS"
			+ " FROM srcode.MFI_ROLES AR, srcode.MFI_USER_ROLES AUR "
			+ " WHERE AUR.ROLE_ID=AR.ROLE_ID AND AUR.USER_ID= :userId";

	public static final String ROLEMBS_QUERY_ROLE_NAME_AVAILABLE = "SELECT 1 FROM srcode.MFI_ROLES WHERE  UPPER(ROLE_NAME) =  UPPER(:roleName)";

	public static final String ROLEMBS_QUERY_ROLE_NAME_COUNT = "SELECT COUNT(ROLE_NAME) FROM srcode.MFI_ROLES WHERE UPPER(ROLE_NAME) = UPPER(:rname)";

	public static final String ROLEMBS_QUERY_AUTHORIZED_ROLES = "SELECT ROLE_ID, ROLE_NAME, ROLE_DESC, AUTH_STATUS, ROLE_STATUS, ROLE_IBS_MBS "
			+ "FROM srcode.MFI_ROLES WHERE AUTH_STATUS='A' AND ROLE_STATUS='A' AND ROLE_ID!='ROL00000' AND ROLE_IBS_MBS='M' ORDER BY ROLE_ID ";// NOT
																																				// ACCESS
																																				// SUPER
																																				// ROLE

	public static final String ROLEMBS_QUERY_AUDIT_VERSION = "SELECT MAX(VERSION_NO) FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID=:id AND CHECKER_ID IS NOT NULL";

	public static final String ROLEMBS_QUERY_DELETE_AUDIT = "DELETE FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID = :id";

	public static final String ROLEMBS_QUERY_HARD_DELETE = "DELETE FROM srcode.MFI_ROLES WHERE ROLE_ID = :id";

	public static final String ROLEMBS_QUERY_DELETE_ROLE_ENTITLEMENT = "DELETE FROM  srcode.MFI_ROLE_ENTITLEMENT WHERE ROLE_ID = :id";

	// For ModifyUniqueId
	public static final String ROLEMBS_QUERY_ROLE_STATUS_TO_INACTIVE = "select 1 from srcode.MFI_AGENTS WHERE AGENT_ID IN (select AGENT_ID  from srcode.MFI_AGENT_ROLES "
			+ "WHERE AGENT_ID = :agentId )";
	public static final String ROLEMBS_QUERY_AUTHORIZED_ROLES_MBS = "SELECT ROLE_ID, ROLE_NAME, ROLE_DESC, AUTH_STATUS, ROLE_STATUS, ROLE_IBS_MBS "
			+ "FROM srcode.MFI_ROLES WHERE AUTH_STATUS='A' AND ROLE_STATUS='A' AND ROLE_IBS_MBS='M' ORDER BY ROLE_ID ";
	public static final String ROLEMBS_QUERY_SELECT_USER_ROLES_FOR_MBS = "SELECT AR.ROLE_ID, AR.ROLE_NAME , AR.ROLE_DESC, AR.AUTH_STATUS, AR.ROLE_STATUS, AR.ROLE_IBS_MBS"
			+ " FROM srcode.MFI_ROLES AR, srcode.MFI_AGENT_ROLES AUR "
			+ " WHERE AUR.ROLE_ID=AR.ROLE_ID AND AUR.AGENT_ID= :userId";

	public static final String ROLE_MBS_QUERY_INSERT_ROLE_ENTITLEMENTS = "INSERT INTO srcode.MFI_ROLE_ENTITLEMENT (ROLE_ID, FUNC_ID) "
			+ "VALUES (:roleId, :funcId)";

	/* RoleJdbcDao Script End */

	/* FunctionMBS Script Start */

	public static final String FUN_MBS_QUERY_UPDATE = "UPDATE srcode.MFI_FUNCTION SET BASE_FUNC=:baseFunc, FUNC_DESC=:funcDesc ,FUNC_COMMAND=:funcCommand"
			+ "where FUNC_ID=:id";

	public static final String FUN_MBS_QUERY_SELECT_FUNCTION = "SELECT RF.FUNC_ID, RF.BASE_FUNC, "
			+ "RF.FUNC_DESC, RF.FUNC_COMMAND "
			+ "FROM srcode.MFI_FUNCTION RF,srcode.MFI_ROLE_ENTITLEMENT RE WHERE RE.ROLE_ID = :roleId AND "
			+ "RF.FUNC_ID= RE.FUNC_ID";

	public static final String FUN_MBS_QUERY_SELECT_ALL = "SELECT FUNC_ID, BASE_FUNC, "
			+ "FUNC_DESC, FUNC_COMMAND FROM srcode.MFI_FUNCTION WHERE SYSTEM='M' ORDER BY BASE_FUNC ASC, FUNC_DESC ASC";

	public static final String GET_MBS_ROLE_FOR_IBS = "SELECT FUNC_ID, BASE_FUNC, "
			+ "FUNC_DESC, FUNC_COMMAND FROM srcode.MFI_FUNCTION where system=:roleType ORDER BY BASE_FUNC ASC, FUNC_DESC ASC";

	public static final String FUN_MBS_QUERY_INSERT = "INSERT INTO srcode.MFI_FUNCTION (FUNC_ID, BASE_FUNC, FUNC_DESC, FUNC_COMMAND) "
			+ "VALUES (:id, :baseFunc, :funcDesc, :funcCommand)";

	public static final String FUN_MBS_QUERY_SELECT_BY_PK = "SELECT FUNC_ID, BASE_FUNC, FUNC_DESC, FUNC_COMMAND "
			+ "FROM srcode.MFI_FUNCTION WHERE FUNC_ID = :id";

	public static final String FUN_LIST_MBS_QUERY_SELECT_ALL = "SELECT FUNC_ID, BASE_FUNC, "
			+ "FUNC_DESC, FUNC_COMMAND FROM srcode.MFI_FUNCTION WHERE SYSTEM='M' ORDER BY BASE_FUNC ASC, FUNC_DESC ASC";

	/* Function Script End */

	/************************** IbsResetAgendaDao Script Start *************************************/
	// RESET_OPTION
	/*
	 * public static final String IREAGD_QUERY_SELECT_ALL =
	 * "SELECT RESET_GEN_ID, " +
	 * " decode(reset_option,'1','Reset Agenda for Agent','2','Reset All Agenda','3','Close Pending Agenda for Agent','4','Close All Pending Agenda') RESET_OPTION "
	 * + " , AGENT_ID, " +
	 * " RESET_REMARKS, IS_ACTIVE, AUTH_STAT, INIT_BY_USER_ID, " +
	 * " VERIFY_BY_USER_ID, RESET_INIT_DATETIME, RESET_AUTH_DATETIME" +
	 * " FROM srcode.MFI_IBS_RESET_AGENDA  " + " ORDER BY RESET_GEN_ID";
	 */
	public static final String IREAGD_QUERY_SELECT_ALL = "SELECT RESET_GEN_ID, (case reset_option  when '1' then 'Reset Agenda"
			+ " for Agent' when '2' then 'Reset All Agenda'	when '3' then 'Close Pending Agenda for Agent' "
			+ " when '4' then 'Close All Pending Agenda' end ) RESET_OPTION, AGENT_ID,RESET_REMARKS,IS_ACTIVE, AUTH_STAT, "
			+ " INIT_BY_USER_ID, VERIFY_BY_USER_ID, RESET_INIT_DATETIME, RESET_AUTH_DATETIME,(case process_stat when 'P' then 'Pending' "
			+ " when 'C' then 'Completed' when 'E' then 'Error' end) PROCESS_STAT "
			+ "	FROM srcode.MFI_IBS_RESET_AGENDA  ORDER BY RESET_GEN_ID";// /*
																			// EGA-MN15-000007
																			// PROCESS_STAT
																			// column
																			// Added*/

	public static final String IREAGD_QUERY_INSERT = "INSERT INTO srcode.MFI_IBS_RESET_AGENDA (RESET_GEN_ID, RESET_OPTION, AGENT_ID,"
			+ " RESET_REMARKS, IS_ACTIVE, INIT_BY_USER_ID, VERIFY_BY_USER_ID, RESET_INIT_DATETIME, RESET_AUTH_DATETIME,AUTH_STAT,PROCESS_STAT)"
			+ "  VALUES (:id,:resetOption,:agentId,:resetRemarks,:isActive,:initByUserId,:verifyByUserId,:resetInitDateTime,:resetAuthDateTime,'U','P')";

	/*
	 * public static final String IREAGD_QUERY_SELECT_BY_PK =
	 * "SELECT RESET_GEN_ID, " +
	 * " decode(reset_option,'1','Reset Agenda for Agent','2','Reset All Agenda','3','Close Pending Agenda for Agent','4','Close All Pending Agenda') RESET_OPTION "
	 * + " , AGENT_ID, " +
	 * " RESET_REMARKS, IS_ACTIVE, AUTH_STAT, INIT_BY_USER_ID, " +
	 * " VERIFY_BY_USER_ID, RESET_INIT_DATETIME, RESET_AUTH_DATETIME" +
	 * " FROM srcode.MFI_IBS_RESET_AGENDA WHERE RESET_GEN_ID = :id";
	 */

	public static final String IREAGD_QUERY_SELECT_BY_PK = "SELECT RESET_GEN_ID,"
			+ " (case reset_option when '1' then 'Reset Agenda for Agent' when '2' then 'Reset All Agenda' "
			+ " when '3' then 'Close Pending Agenda for Agent' when '4' then 'Close All Pending Agenda' end ) RESET_OPTION,"
			+ "	AGENT_ID, RESET_REMARKS, IS_ACTIVE, AUTH_STAT, INIT_BY_USER_ID, VERIFY_BY_USER_ID, RESET_INIT_DATETIME,"
			+ " RESET_AUTH_DATETIME,(case process_stat when 'P' then 'Pending' when 'C' then 'Completed' when 'E' then 'Error' end)"
			+ " PROCESS_STAT FROM srcode.MFI_IBS_RESET_AGENDA WHERE RESET_GEN_ID = :id";/*
																						 * EGA
																						 * -
																						 * MN15
																						 * -
																						 * 000007
																						 * PROCESS_STAT
																						 * column
																						 * Added
																						 */

	public static final String IREAGD_QUERY_SELECT_MODIFY_PK = "SELECT RESET_GEN_ID, "
			+ "  RESET_OPTION "
			+ " , AGENT_ID, "
			+ " RESET_REMARKS, IS_ACTIVE, AUTH_STAT, INIT_BY_USER_ID, "
			+ " VERIFY_BY_USER_ID, RESET_INIT_DATETIME, RESET_AUTH_DATETIME,(case process_stat when 'P' then 'Pending' when 'C' then 'Completed' when 'E' then 'Error' end)"
			+ "PROCESS_STAT FROM srcode.MFI_IBS_RESET_AGENDA WHERE RESET_GEN_ID = :id";/*
																						 * EGA
																						 * -
																						 * MN15
																						 * -
																						 * 000007
																						 * PROCESS_STAT
																						 * column
																						 * Added
																						 */

	public static final String IREAGD_QUERY_UPDATE = "UPDATE srcode.MFI_IBS_RESET_AGENDA SET RESET_GEN_ID=:id, "
			+ "RESET_OPTION=:resetOption, AGENT_ID=:agentId, RESET_REMARKS=:resetRemarks,  "
			+ "INIT_BY_USER_ID=:initByUserId, VERIFY_BY_USER_ID=:verifyByUserId, "
			+ "RESET_INIT_DATETIME=:resetInitDateTime, RESET_AUTH_DATETIME=:resetAuthDateTime, "
			+ "AUTH_STAT=:authStatus, IS_ACTIVE=:isActive "
			+ " where RESET_GEN_ID=:id";

	// public static final String REAGD_QUERY_UPDATE_BY_AUTH =
	// "UPDATE srcode.MFI_IBS_RESET_AGENDA SET AUTH_STAT='A' WHERE RESET_GEN_ID=:id";

	public static final String REAGD_QUERY_UPDATE_BY_AUTH = "UPDATE srcode.MFI_IBS_RESET_AGENDA SET AUTH_STAT='A', "
			+ " VERIFY_BY_USER_ID=:verifyByUserId, RESET_AUTH_DATETIME=:resetAuthDateTime"
			+ " WHERE RESET_GEN_ID=:id";

	public static final String REAGD_QUERY_AUDIT_VERSION = "SELECT MAX(VERSION_NO) FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID=:id AND CHECKER_ID IS NOT NULL";

	public static final String REAGD_QUERY_DELETE = "DELETE FROM srcode.MFI_IBS_RESET_AGENDA WHERE RESET_GEN_ID = :id";

	public static final String REAGD_QUERY_DELETE_AUDIT = "DELETE FROM srcode.MFI_AUDIT_DETAIL WHERE KEY_ID = :id";

	/*** IbsResetAgendaDao Script End **/
	/**
	 * Cust Enrol Info-Start
	 */

	public static final String QUERY_INSERT_CUST_INFO = "INSERT INTO srcode.MFI_CUST_ENROL_INFO(ENROLMENT_ID,WORKFLOW_Q_TYPE,FIRST_NAME,"
			+ "LAST_NAME,MIDDLE_NAME,DOB,GENDER,RESIDENCE_TYPE,NATIONALITY,ADDRESS1,ADDRESS2,ADDRESS3,ADDRESS4,CITY,STATE,ZIP_CODE,COUNTRY,"
			+ "EMAIL_ID,CONTACT_NO,MARTIAL_STATUS,PROFESSION,PROFESSION_REMARK,ACCOUNT_CATEGORY,ACCOUNT_TYPE,CURRENCY,"
			+ "IS_ACTIVE,MODULE_CODE,TXN_CODE,TXN_INIT_TIME,TXN_SYNC_TIME,AGENT_ID,DEVICE_ID,LOCATION_CODE,TXN_STATUS,"
			+ "TXN_ERR_CODE,TXN_ERR_MESSAGE,AUTH_STATUS,TEMP_GROUP_ID,IS_KYC_ONLY,CUSTOMER_ID,GROUP_INDIVIDUAL_TYPE,POC,IS_SENT_TO_CBS) VALUES(:enrolmentId,:workFlowQueType,:firstName,:lastName,:middleName,"
			+ ":dob,:gender,:residenceType,:nationality,:address1,:address2,:address3,:address4,:city,:state,:zipCode,:country,:email,:contactNo,"
			+ ":maritalStatus,:profession,:professionRemark,:accountCategory,:accType,:accCurrency,:isActive,:moduleCode,:txnCode,"
			+ ":txnInitTime,:txnSyncTime,:agentId,:deviceId,:locCode,:txnStatus,:txnErrorCode,:txnErrorMsg,:authStatus,:tmpGrpId,:isKycOnly,:customerId,:groupIndlType,:poc,:isSentToCbs)";

	public static final String QUERY_INSERT_CUST_DOC_INFO = "INSERT INTO srcode.MFI_CUST_ENROL_KYC(ENROLMENT_ID,KYC_IMAGE_CUSTOMER,"
			+ "KYC_ID_1_IMAGE,KYC_ID_1_TYPE,KYC_ID_1_NUMBER,KYC_ID_1_PROOF_TYPE,KYC_ID_2_IMAGE,KYC_ID_2_TYPE,KYC_ID_2_NUMBER,"
			+ "KYC_ID_2_PROOF_TYPE,KYC_ID_3_IMAGE,KYC_ID_3_TYPE,KYC_ID_3_NUMBER,KYC_ID_3_PROOF_TYPE) VALUES(:enrolmentId,"
			+ ":kycCustImage,:kycIdImage1,:kycIdType1,:kycIdNo1,:kycIdProofType1,:kycIdImage2,:kycIdType2,:kycIdNo2,"
			+ ":kycIdProofType2,:kycIdImage3,:kycIdType3,:kycIdNo3,:kycIdProofType3)";
	/**
	 * Cust Enrol Info-End
	 */
	/**
	 * Deposit Details-Start
	 */
	public static final String QUERY_GET_ALL_FOR_AGENT = "SELECT DEP_AC_NO, BRANCH_CODE, CUSTOMER_ID,  "
			+ "CUSTOMER_FULL_NAME, AC_CCY, OPEN_DATE, MATURITY_DATE, SCH_INSTALLMENT_AMT, PAY_FREQ_TYPE, "
			+ "PAY_FREQ, TENURE_TYPE,  TENURE,INT_RATE,  PRINCIPAL_MATURITY_AMOUNT, "
			+ "INTEREST_ACCRUED_TILL_DATE,INSTALLMENT_PAID_TILL_DATE, TOTAL_INSTALLMENT_AMT_DUE, "
			+ "REDEMPTION_FLAG, REDEMPTION_PAYOUT_DATE,  REDEMPTION_AMOUNT,"
			+ "LOCATION_CODE,AGENT_ID,CREDIT_OFFICER_CODE FROM srcode.MFI_deposit_all_info "
			+ "where AGENT_ID=:agentId and LOCATION_CODE=:locCode";

	/**
	 * Deposit Details-End
	 */
	/**
	 * Loan Details-Start
	 */
	public static final String QUERY_GET_ALL_LOAN_FOR_AGENT = "SELECT LOAN_AC_NO, BRANCH_CODE,  CUSTOMER_ID,  "
			+ "CUSTOMER_FULL_NAME,  PARENT_CUST_ID,IS_PARENT_LOAN,IS_GROUP_LOAN,PARENT_LOAN_AC_NO,GROUP_ID,LOC_CODE,"
			+ "CREDIT_OFFICER_CODE,SANCTIONED_DATE,LAST_DISBURSED_DATE,DISBR_TYPE,LOAN_AC_CCY,IS_FULLY_DISBURSED,SANCTIONED_PRINCIPAL_AMT,"
			+ "DISBURSED_PRINCIPAL_AMT,INTEREST_RATE,INTEREST_ACCRUED,PRINCIPAL_AMT_REPAID,PRINCIPAL_OUTSTANDING,LAST_REPAYMENT_DATE,AGENT_ID"
			+ " FROM  srcode.MFI_loan_all_info where AGENT_ID=:agentId and LOC_CODE=:locCode";
	/**
	 * Loan Details-End
	 */

	/**
	 * Txn- PL/SQL Func-Start
	 */
	public static final String TRAN_INSERT_REC_PROC = "srcode.create_txn_receiver";

	public static final String TRAN_UPDATE_REC_PROC = "srcode.fn_update_ibs_info";

	public static final String FN_ID_GENERATOR = "srcode.fn_get_sys_id_code";

	public static final String FN_APP_DATETIME = "srcode.fn_get_app_datetime";

	public static final String FN_DAILY_JOB = "srcode.fn_daily_job";

	public static final String FN_RESET_DATA = "srcode.fn_reset_groups";

	// EGA-MN15-000017 Start
	public static final String FN_VALIDATE_AGENT = "srcode.fn_check_agt";
	// EGA-MN15-000017 End

	/**
	 * Txn- PL/SQL Func-End
	 */

	/**
	 * Agent Cash Position-Start
	 */
	public static final String QUERY_GET_AGENT_CASH_RECORDS = "SELECT ENTRY_SEQ_NO,CASH_TXN_ID,CASH_TXN_SEQ_NO,TXN_SOURCE,TXN_DATETIME,"
			+ "TXN_CODE,AGENT_ID,DEVICE_ID,AGENDA_ID,AGN_SEQ_NO,TXN_CCY_CODE,DR_CR_IND,CASH_AMOUNT,SYNC_STATUS,SYNC_TIME,"
			+ "AUTH_STAT,IS_REVERSAL,IS_DELETED FROM srcode.MFI_AGENT_CASH_RECORD WHERE AGENT_ID=:agentId AND DEVICE_ID=:deviceId "
			+ "AND SYNC_STATUS=:syncStatus AND AUTH_STAT=:authStatus LIMIT :batchSize";

	public static final String QUERY_UPDATE_AGENT_CASH_RECORD = "UPDATE srcode.MFI_AGENT_CASH_RECORD SET SYNC_STATUS=:syncStatus,"
			+ " SYNC_TIME=now() WHERE ENTRY_SEQ_NO IN(";
	/**
	 * Agent Cash Position-End
	 */

	/**
	 * Sys param value Query start
	 */
	public static final String SYSTEM_PARAM_VALUE = "SELECT PARAM_VALUE FROM srcode.MFI_SYS_PARAMETERS WHERE PARAM_NAME=:paramName";
	/**
	 * Sys param value Query end
	 */

	/************************** Add Manual Agenda Settle Script Start *************************************/

	public static final String MAS_QUERY_SELECT_ALL_FROM_MASTER = "SELECT  AGENDA_ID, "
	         + " SEQ_NO ,CBS_AC_REF_NO, CUSTOMER_ID, AGENT_ID, DEVICE_ID, LOCATION_CODE, AGN_CMP_NAME, "
	         + " AGN_CMP_ST_DATE, AGN_CMP_END_DT, AGN_CCY_CODE, AGN_AGENDA_AMT, TXN_CODE "
	         + " FROM srcode.MFI_AGENDA_MASTER where AGENDA_STATUS in ('0','1')";

	public static final String MAS_QUERY_SELECT_BY_PK_FROM_MASTER = "SELECT  AGENDA_ID, "
			+ " SEQ_NO ,CBS_AC_REF_NO, CUSTOMER_ID, AGENT_ID, DEVICE_ID, LOCATION_CODE, AGN_CMP_NAME, "
			+ " AGN_CMP_ST_DATE, AGN_CMP_END_DT, AGN_CCY_CODE, AGN_AGENDA_AMT, TXN_CODE "
			+ " FROM srcode.MFI_AGENDA_MASTER WHERE  AGENDA_ID=:id";

	public static final String MAS_QUERY_INSERT_TO_MAINTENCE = "INSERT INTO srcode.MFI_MANUAL_AGENDA_SETTLE "
			+ " (REC_ID,AGENDA_ID,SEQ_NO,CBS_AC_REF_NO,CUSTOMER_ID,AGENT_ID,DEVICE_ID,LOCATION_CODE,AGN_CMP_NAME,"
			+ " AGN_CMP_ST_DATE,AGN_CMP_END_DT,AGN_CCY_CODE,AGN_AGENDA_AMT,AGN_AGENDA_SETTLED_AMT,FULL_PART_IND,SETTLE_REMARKS,"
			+ " TXN_CODE,INIT_BY_USER_ID,INIT_DATETIME,IS_ACTIVE, PROCESS_STAT,AUTH_STAT) VALUES "
			+ " (:id, :agendaId, :seqNo, :cbsAcRefNo, :customerId, :agentId, :deviceId, :locationCode, :agnCmpName,"
			+ " :agnCmpStDate, :agnCmpEndDate, :agnCcyCode, :agnAgendaAmt, :agnAgendaSettledAmt, :fullPartInd, :settleRemarks,"
			+ " :txnCode, :initByUserId, :initDateTime, 'A', 'P' ,'U' )";/*
																		 * EGA-MN15
																		 * -
																		 * 000008
																		 * Removing
																		 * AUTH_DATETIME
																		 */

	public static final String CONSOLE_TEXT_VALUE = "select DL_DESC from srcode.MFI_CONSOL_TEXT_BASE where TEXT_ID =:id";

	public static final String CONSOLE_TEXT_JOB_STATUS = "SELECT CHARTER_CODE, RUN_STATUS FROM srcode.MFI_EGA_CHARTER ";

	public static final String CONSOLE_RUN_HAS = "SELECT RUN_STATUS,HAS_ERROR FROM srcode.MFI_EGA_CHARTER where CHARTER_CODE=:charCode";

	/*** Add Manual Agenda Settle Script End ****/

	/************************** Modify and Auth Manual Agenda Settle Script Start *************************************/

	public static final String MMAS_QUERY_SELECT_ALL = "SELECT  REC_ID, AGENDA_ID, "
			+ " SEQ_NO ,CBS_AC_REF_NO, TXN_CODE, CUSTOMER_ID, AGENT_ID, DEVICE_ID, LOCATION_CODE, AGN_CMP_NAME, "
			+ " AGN_CMP_ST_DATE, AGN_CMP_END_DT, AGN_CCY_CODE, AGN_AGENDA_AMT, AGN_AGENDA_SETTLED_AMT , FULL_PART_IND, "
			+ "  SETTLE_REMARKS, IS_ACTIVE, AUTH_STAT, INIT_BY_USER_ID, VERIFY_BY_USER_ID, INIT_DATETIME ,"
			+ "  AUTH_DATETIME,(case process_stat when 'P' then 'Pending' "
			+ " when 'C' then 'Completed' when 'E' then 'Error' end) PROCESS_STAT, ERR_CODE ,ERR_DESC "
			+ " FROM srcode.MFI_MANUAL_AGENDA_SETTLE";

	public static final String MMAS_QUERY_SELECT_BY_PK = "SELECT  REC_ID, AGENDA_ID, "
			+ " SEQ_NO ,CBS_AC_REF_NO, TXN_CODE, CUSTOMER_ID, AGENT_ID, DEVICE_ID, LOCATION_CODE, AGN_CMP_NAME, "
			+ " AGN_CMP_ST_DATE, AGN_CMP_END_DT, AGN_CCY_CODE, AGN_AGENDA_AMT, AGN_AGENDA_SETTLED_AMT , FULL_PART_IND, "
			+ "  SETTLE_REMARKS, IS_ACTIVE, AUTH_STAT, INIT_BY_USER_ID, VERIFY_BY_USER_ID, INIT_DATETIME ,"
			+ "  AUTH_DATETIME,(case process_stat when 'P' then 'Pending' "
			+ " when 'C' then 'Completed' when 'E' then 'Error' end) PROCESS_STAT, ERR_CODE ,ERR_DESC "
			+ " FROM srcode.MFI_MANUAL_AGENDA_SETTLE  WHERE  REC_ID=:id";

	public static final String MMAS_QUERY_UPDATE = "UPDATE srcode.MFI_MANUAL_AGENDA_SETTLE SET AGN_AGENDA_SETTLED_AMT=:agnAgendaSettledAmt, "
			+ " FULL_PART_IND=:fullPartInd, SETTLE_REMARKS=:settleRemarks, "
			+ " IS_ACTIVE=:isActive, AUTH_STAT='U', INIT_BY_USER_ID=:initByUserId, INIT_DATETIME=:initDateTime"
			+ " WHERE REC_ID=:id";

	public static final String MMAS_QUERY_UPDATE_BY_AUTH = "UPDATE srcode.MFI_MANUAL_AGENDA_SETTLE SET AUTH_STAT='A', "
			+ " VERIFY_BY_USER_ID=:verifyByUserId, AUTH_DATETIME=:authDateTime"
			+ " WHERE REC_ID=:id";

	/* CBSCodes Script Start */

	/* CBSCodes Script End */

	/*** Modify and Auth Manual Agenda Settle Script End ****/

	/**
	 * 
	 * 
	 * 
	 * Oracle DataBase Script End.
	 * 
	 * */

	// ApplicationQueryScript.SYSPARAM_

	/* Script Start */

	public static final String CBSCOCODES_QUERY_SELECT_ALL = "SELECT DL_VALUE, DL_DESC "
			+ "FROM srcode.MFI_CBS_DROP_LIST WHERE BRANCH_CODE='000' and DL_TYPE='CO' and  auth_status = 'A' and  is_active = 'A'";

	public static final String CBSlOCCODES_QUERY_SELECT_ALL = "SELECT DL_VALUE, DL_DESC "
			+ "FROM srcode.MFI_CBS_DROP_LIST WHERE BRANCH_CODE='000' and DL_TYPE='LC' and  auth_status = 'A' and  is_active = 'A'";

	public static final String CBSBRNCODES_QUERY_SELECT_ALL = "SELECT DL_VALUE, DL_DESC "
			+ "FROM srcode.MFI_CBS_DROP_LIST WHERE BRANCH_CODE='000' and DL_TYPE='BR' and  auth_status = 'A' and  is_active = 'A'";

	public static final String CBSROUTECODES_QUERY_SELECT_ALL = "SELECT DL_VALUE, DL_DESC "
			+ "FROM srcode.MFI_CBS_DROP_LIST WHERE BRANCH_CODE='000' and DL_TYPE='RC' and  auth_status = 'A' and  is_active = 'A'";

	public static final String CBSCENTERCODES_QUERY_SELECT_ALL = "SELECT DL_VALUE, DL_DESC "
			+ "FROM srcode.MFI_CBS_DROP_LIST WHERE BRANCH_CODE='000' and DL_TYPE='CC' and  auth_status = 'A' and  is_active = 'A'";

	public static final String CBSAGENTCODES_QUERY_SELECT_ALL = "SELECT DL_VALUE, DL_DESC "
			+ "FROM srcode.MFI_CBS_DROP_LIST WHERE BRANCH_CODE='000' and DL_TYPE='AG' and  auth_status = 'A' and  is_active = 'A'";

	/* Script End */

	/* Admin Console Script Start */

	public static final String QUERY_GET_TASK_STATUS = " SELECT RUN_STATUS FROM srcode.MFI_EGA_CHARTER WHERE CHARTER_CODE=:charterCode";

	public static final String QUERY_UPDATE_TASK_START_STATUS = "UPDATE srcode.MFI_EGA_CHARTER SET START_TIME=now(), RUN_STATUS=:status, EXECUTED_BY=:userId"
			+ " WHERE CHARTER_CODE=:charterCode";

	public static final String QUERY_RESET_TASK_START_STATUS = "UPDATE srcode.MFI_EGA_CHARTER SET START_TIME=:startTime, END_TIME=:endTime, RUN_STATUS=:status, "
			+ "EXECUTED_BY=:userId, HAS_ERROR=:hasError WHERE CHARTER_CODE=:charterCode";

	public static final String QUERY_UPDATE_TASK_COMPLETE_STATUS = "UPDATE srcode.MFI_EGA_CHARTER SET START_TIME=now(), RUN_STATUS=:completeStatus, "
			+ "EXECUTED_BY=:userId, END_TIME=now(), HAS_ERROR=:errorNo"
			+ " WHERE CHARTER_CODE=:charterCode AND RUN_STATUS<>:completeStatus";

	public static final String QUERY_UPDATE_TASK_END_STATUS = "UPDATE srcode.MFI_EGA_CHARTER SET END_TIME=now(), RUN_STATUS=:status,"
			+ " HAS_ERROR=:errorStatus WHERE CHARTER_CODE=:charterCode ";
	// + "AND (HAS_ERROR=:errorSuccess OR HAS_ERROR IS NULL)";

	public static final String QUERY_UPDATE_BUSINESSDATE = "UPDATE srcode.MFI_EGA_CHARTER SET EXECUTION_DATE=:businessDate";

	public static final String QUERY_GET_ERROR_STATUS = "SELECT HAS_ERROR FROM srcode.MFI_EGA_CHARTER WHERE CHARTER_CODE=:charterCode";

	public static final String QUERY_IS_ANY_TASK_RUNNING = "SELECT COUNT(*) FROM srcode.MFI_EGA_CHARTER WHERE RUN_STATUS=:status";

	public static final String QUERY_IS_ANY_TASK_PENDING = "SELECT COUNT(*) FROM srcode.MFI_EGA_CHARTER "
			+ "WHERE (RUN_STATUS=:statusRunning OR RUN_STATUS=:statusPending OR RUN_STATUS IS NULL) "
			+ "AND CHARTER_CODE NOT IN('MARK_GROUP_1_RESET','MARK_GROUP_2_RESET','MARK_GROUP_3_RESET',"
			+ "'MARK_GROUP_5_RESET','MARK_GROUP_6_RESET','MARK_GROUP_7_RESET','MARK_STOP_SERVICES')";

	public static final String QUERY_DELETE_LOGS_TABLE = "DELETE FROM srcode.MFI_DBG";

	public static final String QUERY_DELETE_CHARTER_EXCEPTION = "DELETE FROM  srcode.MFI_EGA_CHARTER_EXCEPTION "
			+ "WHERE TYPE =to_char((SELECT EXEC_GROUP FROM srcode.MFI_EGA_CHARTER WHERE CHARTER_CODE=:charterCode) ,'999') "
			+ "AND CLASS=:charterCode";

	public static final String QUERY_PENDING_TASK_COMPLETE = "UPDATE srcode.MFI_EGA_CHARTER SET END_TIME=now(), RUN_STATUS=:status,"
			+ " HAS_ERROR=:errorStatus, EXECUTED_BY=:userId WHERE RUN_STATUS<> :status";

	public static final String PROC_BEGIN_BUSINESS_DAY = "srcode.fn_exec_begin_all";

	public static final String PROC_BEGIN_IBS_CELANUP = "srcode.fn_mark_ibs_cleanup";

	public static final String PROC_BEGIN_AGENDA_CREATION = "srcode.fn_mark_ibs_upload";

	public static final String PROC_BEGIN_MARK_START_TXN = "srcode.fn_mark_txn_input";

	public static final String PROC_BEGIN_MARK_STOP_TXN = "srcode.fn_mark_stop_txn_input";

	public static final String PROC_MARK_EOD = "srcode.fn_mark_end_of_business_day";

	public static final String PROC_MARK_STOP_FIN = "srcode.fn_mark_stop_fin_input";

	public static final String PROC_RESET_GROUPS = "srcode.fn_reset_groups";

	/* Admin Console Script End */

	// This is DB specific query string for the BATCH SIZE
	public static final String QUERY_BATCH_STRING = " LIMIT :batchSize";

	public static final String QUERY_BATCH_STRING_WHERE = " LIMIT :batchSize";

	public static final String FN_APP_ADD_RECORD = "srcode.fn_upd_cash_record_from_ibs";

	public static final String QUERY_GET_ALL_MESSAGES = "SELECT MSG_CODE,LANG,MSG_DESC,ERR_TYPE,SUB_SYS,MSG_TYPE FROM srcode.MFI_MSG_CODE";

	public static final String QUERY_GET_UNPROCESSED_RECORD1 = "SELECT * FROM  srcode.MFI_CBS_TXN_OUT_V limit :batchSize";

	public static final String FN_ADD_BUSINESS_DATE = "srcode.fn_get_app_date";

	public static final String QUERY_INSERT_CBS_DROP_LIST = "INSERT INTO  srcode.STG_CBS_DROP_LIST (BRANCH_CODE, DL_TYPE, DL_VALUE,"
			+ " DL_DESC, CBS_UPLD_JOB_ID, IBS_INTERNAL_ERR, IBS_ERROR_DESCRIPTION)"
			+ "VALUES(:branchCode,:dlType,:dlValue,:dlDesc,:cbsUpldJobId,:ibsInternalErr,:ibsErrorDescription)";

	public static String INSERT_STG_TO_CBS_DROPLIST = "srcode.fn_upload_cbs_lov_upload";
	
	
	
	
	
	
	
	/* Cash Record Script Start */

	
	
	public static final String SELECT_AGENT_IDS = "SELECT AGENT_ID FROM srcode.MFI_AGENTS WHERE auth_status='A' and is_active='A'";
	
	public static final String CUST_SELECT_CASH_RECORD="SELECT key_value,agent_id,txn_date,dr_sum,cr_sum,to_be_settled "
			+ " FROM srcode.mfi_cash_rec_sumup_v WHERE ";
	
	public static final String QUERY_CASH_RECORD_DETAIL="SELECT txn_id,txn_datetime,sync_time,"
			+ "txn_desc,agn_id,seq_no, ccy,dr_cr,amt,auth_stat,revr_stat,"
			+ "del_stat,key_value"
			+ " FROM srcode.mfi_cash_rec_detail_v WHERE key_value= :agentId";
	
	/* Cash Record Script End */
	
	
	
	
	
	
	
	

}